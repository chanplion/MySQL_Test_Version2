set optimizer_switch='materialization=on';
set global innodb_large_prefix=off;
Warnings:
Warning	131	Using innodb_large_prefix is deprecated and the parameter may be removed in future releases. See http://dev.mysql.com/doc/refman/5.7/en/innodb-file-format.html
set @old_opt_switch=@@optimizer_switch;
set optimizer_switch='subquery_materialization_cost_based=off';
SET sql_mode = 'NO_ENGINE_SUBSTITUTION';
Warnings:
Warning	3090	Changing sql mode 'NO_AUTO_CREATE_USER' is deprecated. It will be removed in a future release.
drop table if exists t1, t2, t3, t1i, t2i, t3i;
drop view if exists v1, v2, v1m, v2m;
create table t1 (a1 char(8), a2 char(8));
create table t2 (b1 char(8), b2 char(8));
create table t3 (c1 char(8), c2 char(8));
insert into t1 values ('1 - 00', '2 - 00');
insert into t1 values ('1 - 01', '2 - 01');
insert into t1 values ('1 - 02', '2 - 02');
insert into t2 values ('1 - 01', '2 - 01');
insert into t2 values ('1 - 01', '2 - 01');
insert into t2 values ('1 - 02', '2 - 02');
insert into t2 values ('1 - 02', '2 - 02');
insert into t2 values ('1 - 03', '2 - 03');
insert into t3 values ('1 - 01', '2 - 01');
insert into t3 values ('1 - 02', '2 - 02');
insert into t3 values ('1 - 03', '2 - 03');
insert into t3 values ('1 - 04', '2 - 04');
create table t1i (a1 char(8), a2 char(8));
create table t2i (b1 char(8), b2 char(8));
create table t3i (c1 char(8), c2 char(8));
create index it1i1 on t1i (a1);
create index it1i2 on t1i (a2);
create index it1i3 on t1i (a1, a2);
create index it2i1 on t2i (b1);
create index it2i2 on t2i (b2);
create index it2i3 on t2i (b1, b2);
create index it3i1 on t3i (c1);
create index it3i2 on t3i (c2);
create index it3i3 on t3i (c1, c2);
insert into t1i select * from t1;
insert into t2i select * from t2;
insert into t3i select * from t3;
/******************************************************************************
* Simple tests.
******************************************************************************/
# non-indexed nullable fields
# explain extended
# select * from t1 where a1 in (select b1 from t2 where b1 > '0');
select * from t1 where a1 in (select b1 from t2 where b1 > '0');
a1	a2
1 - 01	2 - 01
1 - 02	2 - 02
select * from t1 where a1 in (select b1 from t2 where b1 > '0' group by b1);
a1	a2
1 - 01	2 - 01
1 - 02	2 - 02
select * from t1 where (a1, a2) in (select b1, b2 from t2 where b1 > '0' group by b1, b2);
a1	a2
1 - 01	2 - 01
1 - 02	2 - 02
select * from t1 where (a1, a2) in (select b1, min(b2) from t2 where b1 > '0' group by b1);
a1	a2
1 - 01	2 - 01
1 - 02	2 - 02
select * from t1i where a1 in (select b1 from t2i where b1 > '0');
a1	a2
1 - 01	2 - 01
1 - 02	2 - 02
select * from t1i where a1 in (select b1 from t2i where b1 > '0' group by b1);
a1	a2
1 - 01	2 - 01
1 - 02	2 - 02
select * from t1i where (a1, a2) in (select b1, b2 from t2i where b1 > '0');
a1	a2
1 - 01	2 - 01
1 - 02	2 - 02
select * from t1i where (a1, a2) in (select b1, b2 from t2i where b1 > '0' group by b1, b2);
a1	a2
1 - 01	2 - 01
1 - 02	2 - 02
select * from t1i where (a1, a2) in (select b1, min(b2) from t2i where b1 > '0' group by b1);
a1	a2
1 - 01	2 - 01
1 - 02	2 - 02
select * from t1 where (a1, a2) in (select b1, max(b2) from t2i group by b1);
a1	a2
1 - 01	2 - 01
1 - 02	2 - 02
prepare st2 from "select * from t1 where (a1, a2) in (select b1, max(b2) from t2i group by b1)";
execute st2;
a1	a2
1 - 01	2 - 01
1 - 02	2 - 02
execute st2;
a1	a2
1 - 01	2 - 01
1 - 02	2 - 02
select * from t1 where (a1, a2) in (select b1, min(b2) from t2i where b1 > '0' group by b1);
a1	a2
1 - 01	2 - 01
1 - 02	2 - 02
select * from t1 where (a1, a2) in (select b1, min(b2) from t2i limit 1,1);
ERROR 42000: This version of MySQL doesn't yet support 'LIMIT & IN/ALL/ANY/SOME subquery'
select * from t1 where (a1, a2) in (select b1, b2 from t2 order by b1, b2);
a1	a2
1 - 01	2 - 01
1 - 02	2 - 02
select * from t1i where (a1, a2) in (select b1, b2 from t2i order by b1, b2);
a1	a2
1 - 01	2 - 01
1 - 02	2 - 02
/******************************************************************************
* Views, UNIONs, several levels of nesting.
******************************************************************************/
# materialize the result of subquery over temp-table view
create algorithm=merge view v1 as
select b1, c2 from t2, t3 where b2 > c2;
create algorithm=merge view v2 as
select b1, c2 from t2, t3 group by b2, c2;
Warnings:
Warning	1354	View merge algorithm can't be used here for now (assumed undefined algorithm)
create algorithm=temptable view v1m as
select b1, c2 from t2, t3 where b2 > c2;
create algorithm=temptable view v2m as
select b1, c2 from t2, t3 group by b2, c2;
select * from v1 where (c2, b1) in (select c2, b1 from v2 where b1 is not null);
b1	c2
1 - 02	2 - 01
1 - 02	2 - 01
1 - 03	2 - 01
1 - 03	2 - 02
select * from v1 where (c2, b1) in (select distinct c2, b1 from v2 where b1 is not null);
b1	c2
1 - 02	2 - 01
1 - 02	2 - 01
1 - 03	2 - 01
1 - 03	2 - 02
select * from v1m where (c2, b1) in (select c2, b1 from v2m where b1 is not null);
b1	c2
1 - 02	2 - 01
1 - 02	2 - 01
1 - 03	2 - 01
1 - 03	2 - 02
select * from v1m where (c2, b1) in (select distinct c2, b1 from v2m where b1 is not null);
b1	c2
1 - 02	2 - 01
1 - 02	2 - 01
1 - 03	2 - 01
1 - 03	2 - 02
drop view v1, v2, v1m, v2m;
select * from t1
where (a1, a2) in (select b1, b2 from t2 where b1 >  '0') and
(a1, a2) in (select c1, c2 from t3
where (c1, c2) in (select b1, b2 from t2i where b2 > '0'));
a1	a2
1 - 01	2 - 01
1 - 02	2 - 02
select * from t1i
where (a1, a2) in (select b1, b2 from t2i where b1 >  '0') and
(a1, a2) in (select c1, c2 from t3i
where (c1, c2) in (select b1, b2 from t2i where b2 > '0'));
a1	a2
1 - 01	2 - 01
1 - 02	2 - 02
select * from t1
where (a1, a2) in (select b1, b2 from t2
where b2 in (select c2 from t3 where c2 LIKE '%02') or
b2 in (select c2 from t3 where c2 LIKE '%03')) and
(a1, a2) in (select c1, c2 from t3
where (c1, c2) in (select b1, b2 from t2i where b2 > '0'));
a1	a2
1 - 02	2 - 02
select * from t1
where (a1, a2) in (select b1, b2 from t2
where b2 in (select c2 from t3 t3a where c1 = a1) or
b2 in (select c2 from t3 t3b where c2 LIKE '%03')) and
(a1, a2) in (select c1, c2 from t3 t3c
where (c1, c2) in (select b1, b2 from t2i where b2 > '0'));
a1	a2
1 - 01	2 - 01
1 - 02	2 - 02
(select * from t1
where (a1, a2) in (select b1, b2 from t2
where b2 in (select c2 from t3 where c2 LIKE '%02') or
b2 in (select c2 from t3 where c2 LIKE '%03')
group by b1, b2) and
(a1, a2) in (select c1, c2 from t3
where (c1, c2) in (select b1, b2 from t2i where b2 > '0')))
UNION
(select * from t1i
where (a1, a2) in (select b1, b2 from t2i where b1 >  '0') and
(a1, a2) in (select c1, c2 from t3i
where (c1, c2) in (select b1, b2 from t2i where b2 > '0')));
a1	a2
1 - 02	2 - 02
1 - 01	2 - 01
select * from t1
where (a1, a2) in (select * from t1 where a1 > '0' UNION select * from t2 where b1 < '9') and
(a1, a2) in (select c1, c2 from t3
where (c1, c2) in (select b1, b2 from t2i where b2 > '0'));
a1	a2
1 - 01	2 - 01
1 - 02	2 - 02
select * from t1, t3
where (a1, a2) in (select * from t1 where a1 > '0' UNION select * from t2 where b1 < '9') and
(c1, c2) in (select c1, c2 from t3
where (c1, c2) in (select b1, b2 from t2i where b2 > '0')) and
a1 = c1;
a1	a2	c1	c2
1 - 01	2 - 01	1 - 01	2 - 01
1 - 02	2 - 02	1 - 02	2 - 02
/******************************************************************************
* Negative tests, where materialization should not be applied.
******************************************************************************/
# UNION in a subquery
# explain extended
# select * from t3
# where c1 in (select a1 from t1 where a1 > '0' UNION select b1 from t2 where b1 < '9');
select * from t3
where c1 in (select a1 from t1 where a1 > '0' UNION select b1 from t2 where b1 < '9');
c1	c2
1 - 01	2 - 01
1 - 02	2 - 02
1 - 03	2 - 03
select * from t1 where (a1, a2) in (select '1 - 01', '2 - 01');
a1	a2
1 - 01	2 - 01
select * from t1 where (a1, a2) in (select '1 - 01', '2 - 01' from dual);
a1	a2
1 - 01	2 - 01
/******************************************************************************
* Subqueries in other uncovered clauses.
******************************************************************************/
/* SELECT clause */
select ((a1,a2) IN (select * from t2 where b2 > '0')) IS NULL from t1;
((a1,a2) IN (select * from t2 where b2 > '0')) IS NULL
0
0
0
/* GROUP BY clause */
create table columns (col int key);
insert into columns values (1), (2);
select * from t1 group by (select col from columns limit 1);
a1	a2
1 - 00	2 - 00
select * from t1 group by (a1 in (select col from columns));
a1	a2
1 - 00	2 - 00
/* ORDER BY clause */
# explain extended
# select * from t1 order by (select col from columns limit 1);
select * from t1 order by (select col from columns limit 1);
a1	a2
1 - 00	2 - 00
1 - 01	2 - 01
1 - 02	2 - 02
/******************************************************************************
* Column types/sizes that affect materialization.
******************************************************************************/
# test for BIT fields,Sequoiadb not support bit
# create table t1bit (a1 bit(3), a2 bit(3));
drop table t1, t2, t3, t1i, t2i, t3i, columns;
/******************************************************************************
* Test the cache of the left operand of IN.
******************************************************************************/
# Test that default values of Cached_item are not used for comparison
create table t1 (s1 int);
create table t2 (s2 int);
insert into t1 values (5),(1),(0);
insert into t2 values (0), (1);
select s2 from t2 where s2 in (select s1 from t1);
s2
0
1
drop table t1, t2;
create table t1 (a int not null, b int not null);
create table t2 (c int not null, d int not null);
create table t3 (e int not null);
insert into t1 values (1,10);
insert into t1 values (1,20);
insert into t1 values (2,10);
insert into t1 values (2,20);
insert into t1 values (2,30);
insert into t1 values (3,20);
insert into t1 values (4,40);
insert into t2 values (2,10);
insert into t2 values (2,20);
insert into t2 values (2,40);
insert into t2 values (3,20);
insert into t2 values (4,10);
insert into t2 values (5,10);
insert into t3 values (10);
insert into t3 values (10);
insert into t3 values (20);
insert into t3 values (30);
select a from t1 where a in (select c from t2 where d >= 20);
a
2
2
2
3
create index it1a on t1(a);
select a from t1 where a in (select c from t2 where d >= 20);
a
2
2
2
3
insert into t2 values (1,10);
select a from t1 where a in (select c from t2 where d >= 20);
a
2
2
2
3
select a from t1 group by a having a in (select c from t2 where d >= 20);
a
2
3
create index iab on t1(a, b);
select a from t1 group by a having a in (select c from t2 where d >= 20);
a
2
3
select a from t1 group by a
having a in (select c from t2 where d >= some(select e from t3 where max(b)=e));
a
2
3
select a from t1
where a in (select c from t2 where d >= some(select e from t3 where b=e));
a
1
2
2
2
3
drop table t1, t2, t3;
create table t2 (a int, b int, key(a), key(b));
insert into t2 values (3,3),(3,3),(3,3);
select 1 from t2 where  
t2.a > 1 
or 
t2.a = 3 and not t2.a not in (select t2.b from t2);
1
1
1
1
drop table t2;
create table t1 (a1 int key);
create table t2 (b1 int);
insert into t1 values (5);
select min(a1) from t1 where 7 in (select b1 from t2 group by b1);
min(a1)
NULL
select min(a1) from t1 where 7 in (select b1 from t2);
min(a1)
NULL
drop table t1,t2;
create table t1 (a char(2), b varchar(10));
insert into t1 values ('a',  'aaa');
insert into t1 values ('aa', 'aaaa');
select a,b from t1 where b in (select a from t1);
a	b
prepare st1 from "select a,b from t1 where b in (select a from t1)";
execute st1;
a	b
execute st1;
a	b
drop table t1;
CREATE TABLE t1 (a varchar(5), b varchar(10));
INSERT INTO t1 VALUES
('AAA', 5), ('BBB', 4), ('BBB', 1), ('CCC', 2),
('CCC', 7), ('AAA', 2), ('AAA', 4), ('BBB', 3), ('AAA', 8);
SELECT * FROM t1 WHERE (a,b) = ANY (SELECT a, max(b) FROM t1 GROUP BY a);
a	b
BBB	4
CCC	7
AAA	8
ALTER TABLE t1 ADD INDEX(a);
FLUSH STATUS;
SELECT * FROM t1 WHERE (a,b) = ANY (SELECT a, max(b) FROM t1 GROUP BY a);
a	b
BBB	4
CCC	7
AAA	8
SHOW SESSION STATUS LIKE 'Sort_scan%';
Variable_name	Value
Sort_scan	1
DROP TABLE t1;
#
# BUG#49630: Segfault in select_describe() with double 
#            nested subquery and materialization
#
#
# BUG#46680 - Assertion failed in file item_subselect.cc, 
#             line 305 crashing on HAVING subquery
#
# Create tables
#
CREATE TABLE t1 (
pk INT,
v VARCHAR(1) DEFAULT NULL,
PRIMARY KEY(pk)
);
CREATE TABLE t2 LIKE t1;
CREATE TABLE t3 LIKE t1;
CREATE TABLE empty1 (a int);
INSERT INTO t1 VALUES (1,'c'),(2,NULL);
INSERT INTO t2 VALUES (3,'m'),(4,NULL);
INSERT INTO t3 VALUES (1,'n');

#
# 1) Test that subquery materialization is setup for query with
#    premature optimize() exit due to "Impossible WHERE"
#
SELECT MIN(t2.pk)
FROM t2 JOIN t1 ON t1.pk=t2.pk
WHERE 'j'
HAVING ('m') IN ( 
SELECT v
FROM t2);
MIN(t2.pk)
NULL
Warnings:
Warning	1292	Truncated incorrect INTEGER value: 'j'


#
# 2) Test that subquery materialization is setup for query with
#    premature optimize() exit due to "No matching min/max row"
#
SELECT MIN(t2.pk)
FROM t2 
WHERE t2.pk>10
HAVING ('m') IN ( 
SELECT v
FROM t2);
MIN(t2.pk)
NULL


#
# 3) Test that subquery materialization is setup for query with
#    premature optimize() exit due to "Select tables optimized away"
#
SELECT MIN(pk)
FROM t1
WHERE pk=NULL
HAVING ('m') IN ( 
SELECT v
FROM t2);
MIN(pk)
NULL


#
# 4) Test that subquery materialization is setup for query with
#    premature optimize() exit due to "No matching row in const table"
#

SELECT MIN(a)
FROM (SELECT a FROM empty1) tt
HAVING ('m') IN ( 
SELECT v
FROM t2);
MIN(a)
NULL


#
# 5) Test that subquery materialization is setup for query with
#    premature optimize() exit due to "Impossible WHERE noticed 
#    after reading const tables"
#
SELECT min(t1.pk)
FROM t1
WHERE t1.pk IN (SELECT 1 from t3 where pk>10)
HAVING ('m') IN ( 
SELECT v
FROM t2);
min(t1.pk)
NULL

#
# Cleanup for BUG#46680
#
DROP TABLE IF EXISTS t1,t2,t3,empty1;
#
# BUG#52344 - Subquery materialization: 
#  	     Assertion if subquery in on-clause of outer join
#
CREATE TABLE t1 (i INTEGER);
INSERT INTO t1 VALUES (10);
CREATE TABLE t2 (j INTEGER);
INSERT INTO t2 VALUES (5);
CREATE TABLE t3 (k INTEGER);
SELECT i, j FROM t1 LEFT JOIN t2 ON (j) IN (SELECT k FROM t3);
i	j
10	NULL
SELECT i, j FROM t1 LEFT JOIN t2 ON (j) IN (SELECT max(k) FROM t3);
i	j
10	NULL
DROP TABLE t1, t2, t3;
# End BUG#52344
#
# BUG#53103: MTR test ps crashes in optimize_cond() 
#            when running with --debug
#
CREATE TABLE t1(track varchar(15));
INSERT INTO t1 VALUES ('CAD'), ('CAD');
PREPARE STMT FROM
"SELECT 1 FROM t1
  WHERE
        track IN (SELECT track FROM t1
                                    GROUP BY track 
                                      HAVING track>='CAD')";
EXECUTE STMT ;
1
1
1
EXECUTE STMT ;
1
1
1
DEALLOCATE PREPARE STMT;
DROP TABLE t1;
# End of BUG#53103
#
# BUG#54511 - Assertion failed: cache != 0L in file 
#             sql_select.cc::sub_select_cache on HAVING
#
CREATE TABLE t1 (i int(11));
CREATE TABLE t2 (c char(1));
CREATE TABLE t3 (c char(1));
INSERT INTO t1 VALUES (1), (2);
INSERT INTO t2 VALUES ('a'), ('b');
INSERT INTO t3 VALUES ('x'), ('y');
SELECT COUNT( i ),i
FROM t1
HAVING ('c')  
IN (SELECT t2.c FROM (t2 JOIN t3));
COUNT( i )	i
DROP TABLE t1,t2,t3;
# End BUG#54511
#
# BUG#56367 - Assertion exec_method != EXEC_MATERIALIZATION...
#             on subquery in FROM
#
CREATE TABLE t1 (a INTEGER);
CREATE TABLE t2 (b INTEGER);
INSERT INTO t2 VALUES (1);
SELECT a FROM (
SELECT t1.* FROM t1 LEFT JOIN t2 ON t1.a > 3 OR t2.b IN (SELECT a FROM t1)
) table1;
a
DROP TABLE t1, t2;
# End BUG#56367
#
# Bug#59833 - materialization=on/off leads to different result set
#             when using IN
#
CREATE TABLE t1 (
pk int NOT NULL,
f1 int DEFAULT NULL,
PRIMARY KEY (pk)
) ENGINE=Sequoiadb;
CREATE TABLE t2 (
pk int NOT NULL,
f1 int DEFAULT NULL,
PRIMARY KEY (pk)
) ENGINE=Sequoiadb;
INSERT INTO t1 VALUES (10,0);
INSERT INTO t2 VALUES (10,0),(11,0);
SELECT * FROM t1 JOIN t2 USING (f1)
WHERE t1.f1 IN (SELECT t1.pk FROM t1 ORDER BY t1.f1);
f1	pk	pk
DROP TABLE t1, t2;
# End Bug#59833
#
# Bug#11852644 - CRASH IN ITEM_REF::SAVE_IN_FIELD ON SELECT DISTINCT
#
CREATE TABLE t1 (
col_varchar_key varchar(1) DEFAULT NULL,
col_varchar_nokey varchar(1) DEFAULT NULL,
KEY col_varchar_key (col_varchar_key)) 
;
INSERT INTO t1 VALUES
('v','v'),('r','r');
CREATE TABLE t2 (
col_varchar_key varchar(1) DEFAULT NULL,
col_varchar_nokey varchar(1) DEFAULT NULL,
KEY col_varchar_key(col_varchar_key)) 
;
INSERT INTO t2 VALUES
('r','r'),('c','c');
CREATE VIEW v3 AS SELECT * FROM t2;
SELECT DISTINCT alias2.col_varchar_key 
FROM t1 AS alias1 JOIN v3 AS alias2 
ON alias2.col_varchar_key = alias1.col_varchar_key
HAVING col_varchar_key IN (SELECT col_varchar_nokey FROM t2)
;
col_varchar_key
r
DROP TABLE t1, t2;
DROP VIEW v3;
# End Bug#11852644

# Bug#12668294 - GROUP BY ON EMPTY RESULT GIVES EMPTY ROW
# INSTEAD OF NULL WHEN MATERIALIZATION ON

CREATE TABLE t1 (col_int_nokey INT) ENGINE=Sequoiadb;
CREATE TABLE t2 (col_int_nokey INT) ENGINE=Sequoiadb;
INSERT INTO t2 VALUES (8),(7);
CREATE TABLE t3 (col_int_nokey INT) ENGINE=Sequoiadb;
INSERT INTO t3 VALUES (7);
SELECT MIN(t3.col_int_nokey),t1.col_int_nokey AS field3
FROM t3
LEFT JOIN t1
ON t1.col_int_nokey
WHERE (194, 200) IN (
SELECT SQ4_alias1.col_int_nokey,
SQ4_alias2.col_int_nokey
FROM t2 AS SQ4_alias1
JOIN
t2 AS SQ4_alias2
ON SQ4_alias2.col_int_nokey = 5
)
GROUP BY field3 ;
MIN(t3.col_int_nokey)	field3
DROP TABLE t1;
DROP TABLE t2;
DROP TABLE t3;
#
# Bug#13419028 - SUBQUERY MATERIALIZATION NOT USED IN CREATE
# SELECT
#
CREATE TABLE t1(a int);
INSERT INTO t1 values(1),(2);
CREATE TABLE t2(a int);
INSERT INTO t2 values(1),(2);
FLUSH STATUS;
SELECT * FROM t1 WHERE a IN (SELECT * FROM t2);
a
1
2
CREATE TABLE t3 SELECT * FROM t1 WHERE a IN (SELECT * FROM t2);
SELECT * FROM t3;
a
1
2
SHOW STATUS LIKE "CREATED_TMP_TABLES";
Variable_name	Value
Created_tmp_tables	2
DROP TABLE t1,t2,t3;
#
# Bug#13552968: Extra row with materialization on join + subquery in
#
CREATE TABLE t1 (
col_varchar_nokey varchar(1) NOT NULL
) ENGINE=Sequoiadb;
INSERT INTO t1 VALUES ('b');
CREATE TABLE t2 (
col_varchar_nokey varchar(1) NOT NULL
) ENGINE=Sequoiadb;
INSERT INTO t2 VALUES ('k');
CREATE TABLE t3 (
col_varchar_nokey varchar(1) NOT NULL
) ENGINE=Sequoiadb;
SELECT STRAIGHT_JOIN *
FROM t1 LEFT JOIN t2 ON t1.col_varchar_nokey IN (SELECT col_varchar_nokey
FROM t3);
col_varchar_nokey	col_varchar_nokey
b	NULL
DROP TABLE t1, t2, t3;
# End of test for bug#13552968
#
# Bug#13591383: Assertion !(*tab->on_expr_ref && .. && is_expensive())
# in join_read_const_table()
#
CREATE TABLE t1 (v INTEGER) ENGINE=Sequoiadb;
INSERT INTO t1 VALUES(1);
CREATE TABLE t2 (v INTEGER) ENGINE=Sequoiadb;
SELECT *
FROM t1 LEFT JOIN t2
ON t2.v IN(SELECT v FROM t1);
v	v
1	NULL
DROP TABLE t1, t2;
# End of test for bug#13591383.
#
# Bug#13607423: Assertion !(*tab->on_expr_ref->is_expensive())
# in join_read_const_table()
#
CREATE TABLE t1 (
pk int NOT NULL,
col_int_nokey int DEFAULT NULL,
col_int_key int DEFAULT NULL,
PRIMARY KEY (pk),
KEY col_int_key (col_int_key)
) ENGINE=Sequoiadb;
INSERT INTO t1 VALUES (1,2,4), (2,150,62);
CREATE TABLE t2 (
pk int NOT NULL,
col_int_key int DEFAULT NULL,
PRIMARY KEY (pk)
) ENGINE=Sequoiadb;
INSERT INTO t2 VALUES (1,7);
FLUSH STATUS;
SELECT table1.pk, table2.pk
FROM t2 AS table1 LEFT JOIN t2 AS table2
ON table2.pk = table1.pk AND
table2.col_int_key IN
(SELECT col_int_key
FROM t1 AS innr
WHERE innr.col_int_nokey > innr.col_int_nokey
GROUP BY col_int_key
HAVING COUNT(*) > 0
);
pk	pk
1	NULL
SHOW SESSION STATUS LIKE 'Sort_scan%';
Variable_name	Value
Sort_scan	1
DROP TABLE t1, t2;
# End of test for bug#13607423.

Test of WL#6094 "Allow subquery materialization in NOT IN if all"
"columns are not nullable"

create table t1(a int not null);
create table t2(a int not null);
insert into t1 values(1),(2);
insert into t2 values(1),(2);
Test in SELECT list

cols not nullable => subq materialization
select a, (a,a) in (select a,a from t2) from t1;
a	(a,a) in (select a,a from t2)
1	1
2	1

cols not nullable => subq materialization
select t1.a, t2.a, (t1.a,t1.a) in (select a,a from t2 as t3)
from t1 join t2 on t1.a+t2.a=1000;
a	a	(t1.a,t1.a) in (select a,a from t2 as t3)

t2.a is not nullable, but in the query it may appear as NULL
as it is in an outer join. So, no materialization.
select t1.a, t2.a, (t2.a,t2.a) in (select a,a from t2 as t3)
from t1 left join t2 on t1.a+t2.a=1000;
a	a	(t2.a,t2.a) in (select a,a from t2 as t3)
1	NULL	NULL
2	NULL	NULL
drop table t1,t2;

Test of WL6095 "Allow subquery materialization in NOT IN if
single-column subquery"

create table t1(a int null);
create table t2(a int null);
insert into t1 values(1),(2);
insert into t2 values(1),(2);

one col => subq materialization
select a, a in (select a from t2) from t1;
a	a in (select a from t2)
1	1
2	1

t2.a is not nullable, but in the query it may appear as NULL
as it is in an outer join. But there is only one inner column so
materialization is possible
select t1.a, t2.a, t2.a in (select * from t2 as t3)
from t1 left join t2 on t1.a+t2.a=1000;
a	a	t2.a in (select * from t2 as t3)
1	NULL	NULL
2	NULL	NULL

_two_ outer columns, nullable => no materialization
select t1.a, t2.a, (t2.a,t2.a) in (select a,a from t2 as t3)
from t1 left join t2 on t1.a+t2.a=1000;
a	a	(t2.a,t2.a) in (select a,a from t2 as t3)
1	NULL	NULL
2	NULL	NULL
drop table t1,t2;

Test in HAVING
create table t1(a int, b int);
create table t2(a int);
insert into t1 values(1,1),(1,2),(1,3),(2,1),(2,2),(2,3);
insert into t2 values(10),(20);
no NULLs.
select t1.a as z, sum(t1.b) from t1 group by t1.a
having (z in (select * from t2)) is null;
z	sum(t1.b)
one outer NULL
insert into t1 values(null,null);
select t1.a as z, sum(t1.b) from t1 group by t1.a
having (z in (select * from t2)) is null;
z	sum(t1.b)
NULL	NULL
one outer NULL and one inner NULL
insert into t2 values(null);
select t1.a as z, sum(t1.b) from t1 group by t1.a
having (z in (select * from t2)) is null;
z	sum(t1.b)
NULL	NULL
1	6
2	6
one inner NULL
delete from t1 where a is null;
select t1.a as z, sum(t1.b) from t1 group by t1.a
having (z in (select * from t2)) is null;
z	sum(t1.b)
1	6
2	6
drop table t1,t2;

Verify that an inner NULL is looked up only once (result is
cached).
create table t1(a int);
create table t2(a int);
insert into t1 values(1),(2),(3),(4),(5),(6);
insert into t1 select * from t1;
insert into t2 values(10),(20),(NULL);
flush status;
select a, (a in (select * from t2)) from t1;
a	(a in (select * from t2))
1	NULL
2	NULL
3	NULL
4	NULL
5	NULL
6	NULL
1	NULL
2	NULL
3	NULL
4	NULL
5	NULL
6	NULL
There will be one look-up in the temporary table for each row
of t1 (12), plus one additional look-up to check whether table
contains a NULL value.
show status like "handler_read_key";
Variable_name	Value
Handler_read_key	13
drop table t1,t2;
#
# Bug#13495157 - SUBQUERY MATERIALIZATION NOT USED FOR CERTAIN
# STATEMENTS
#
CREATE TABLE t1(a INT);
INSERT INTO t1 VALUES(1),(2),(3);
CREATE TABLE t2(a INT);
INSERT INTO t2 VALUES(1),(2),(4);
# subquery materialization used for SELECT:
SELECT * FROM t1 WHERE a IN (SELECT * FROM t2 WHERE a <> 2);
a
1
# Also used for INSERT SELECT:
CREATE TABLE t3 SELECT * FROM t1;
INSERT INTO t3 SELECT * FROM t1 WHERE a IN (SELECT * FROM t2 WHERE a <> 2);
SELECT * FROM t3;
a
1
1
2
3
INSERT INTO t2 SELECT * FROM t1 WHERE a IN (SELECT * FROM t2 WHERE a <> 2);
SELECT * FROM t2;
a
1
1
2
4
INSERT INTO t2 SELECT * FROM t2 WHERE a IN (SELECT * FROM t2 WHERE a <> 2);
SELECT * FROM t2;
a
1
1
1
1
2
4
4
# Not used for single-table UPDATE, DELETE:
UPDATE t2 SET a=a-1 WHERE a IN (SELECT * FROM t1);
SELECT * FROM t2;
a
0
0
0
0
1
4
4
DELETE FROM t2 WHERE a IN (SELECT * FROM t1);
SELECT * FROM t2;
a
0
0
0
0
4
4
EXPLAIN UPDATE t2 SET a=a-1 WHERE a IN (SELECT * FROM t2);
ERROR HY000: You can't specify target table 't2' for update in FROM clause
EXPLAIN DELETE FROM t2 WHERE a IN (SELECT * FROM t2);
ERROR HY000: You can't specify target table 't2' for update in FROM clause
UPDATE t2 SET a=3 WHERE a=0;
# Used for multi-table UPDATE, DELETE:
EXPLAIN UPDATE t2,t3 SET t2.a=10 WHERE t2.a IN (SELECT * FROM t2 WHERE a <> 2);
ERROR HY000: You can't specify target table 't2' for update in FROM clause
EXPLAIN DELETE t2.* FROM t2,t3 WHERE t2.a IN (SELECT * FROM t2 WHERE a <> 2);
ERROR HY000: You can't specify target table 't2' for update in FROM clause
DROP TABLE t1,t2,t3;
#
# Test that subquery materialization only does one lookup: does
# not try to read the next row if the first row failed the
# subquery's WHERE. We use a case where index lookup is not
# enough to satisfy IN(), because index has length two when the
# outer value has length three, and thus the post-filtering
# WHERE added by subselect_hash_sj_engine::setup() makes the
# decision.
#
create table t1 (a varchar(3));
create table t2 (a varchar(2));
insert into t1 values('aaa'), ('aaa');
insert into t2 values('aa'), ('aa');
flush status;
select * from t1 where a in (select a from t2);
a
drop table t1,t2;
#
# Bug#13655791 DIFFERENT RESULT WITH WL6094 ON QUERY WITH XOR
# IN WHERE CLAUSE + MYISAM
#
CREATE TABLE t1 (
pk int NOT NULL,
col_varchar_nokey varchar(1) DEFAULT NULL,
PRIMARY KEY (pk)
);
INSERT INTO t1 VALUES (10,'x');
CREATE TABLE t2 (
pk int NOT NULL,
col_varchar_nokey varchar(1) DEFAULT NULL,
PRIMARY KEY (pk)
);
INSERT INTO t2 VALUES (1,'v'), (5,'x'), (11,'z'), (12,'c'), (15,'y');
CREATE TABLE t3 (
pk int NOT NULL,
col_int_key int DEFAULT NULL,
PRIMARY KEY (pk),
KEY col_int_key (col_int_key)
);
INSERT INTO t3 VALUES (10,8);
CREATE TABLE t4 (
pk int NOT NULL,
col_varchar_nokey varchar(1) DEFAULT NULL,
PRIMARY KEY (pk)
);
INSERT INTO t4 VALUES (1,'x');
FLUSH STATUS;
SELECT outr.pk, outr.col_varchar_nokey, outr2.col_varchar_nokey
FROM t2 AS outr2
JOIN t4 AS outr
ON (outr2.col_varchar_nokey > outr.col_varchar_nokey)
WHERE
outr.col_varchar_nokey IN (
SELECT innr.col_varchar_nokey
FROM t3 AS innr2
LEFT JOIN t1 AS innr
ON (innr2.col_int_key >= innr.pk)
)
XOR outr.pk < 6
;
pk	col_varchar_nokey	col_varchar_nokey
DROP TABLE t1,t2,t3,t4;
#
# Bug#13727407: Assert !item->const_item() || !item->not_null_tables()
#
#
# Bug#13838501 ASSERTION `TABLE->FILE->INITED' FAILED IN
# SUBSELECT_HASH_SJ_ENGINE::EXEC
#
# End of 5.6 tests
#
# Bug #18770217 	DIFFERENT RESULT WITH SP ON 2ND EXECUTION OF QUERY WITH STRAIGHT_JOIN IN NOT IN
#
CREATE TABLE t1 (
col_int_key INT,
col_varchar_key VARCHAR(1),
col_varchar_nokey VARCHAR(1),
KEY col_int_key (col_int_key),
KEY col_varchar_key (col_varchar_key,col_int_key)
);
INSERT INTO t1 VALUES (8,'x','x');
INSERT INTO t1 VALUES (NULL,'x','x');
CREATE TABLE t2 (
col_int_key INT,
col_varchar_key VARCHAR(1),
col_varchar_nokey VARCHAR(1),
KEY col_int_key (col_int_key),
KEY col_varchar_key (col_varchar_key,col_int_key)
);
INSERT INTO t2 VALUES (0,'x','x');
CREATE TABLE t3 (
col_int_key INT,
col_varchar_key VARCHAR(1),
col_varchar_nokey VARCHAR(1),
KEY col_int_key (col_int_key),
KEY col_varchar_key (col_varchar_key,col_int_key)
);
INSERT INTO t3 VALUES (8,'g','g');
CREATE VIEW view_d AS SELECT * FROM t2;
SELECT alias2.col_int_key
FROM t1 AS alias1 , t2 AS alias2
WHERE alias1.col_varchar_key NOT IN (
SELECT sq1_alias1.col_varchar_nokey
FROM t3 AS sq1_alias1
JOIN ( t1 AS sq1_alias2
STRAIGHT_JOIN view_d AS sq1_alias3 )
WHERE (
SELECT col_int_key
FROM t1 AS c_sq1_alias1
WHERE c_sq1_alias1.col_varchar_key = sq1_alias3.col_varchar_nokey
)
)
;
ERROR 21000: Subquery returns more than 1 row
CREATE PROCEDURE stored_proc_2581 () LANGUAGE SQL SELECT alias2.col_int_key
FROM t1 AS alias1 , t2 AS alias2
WHERE alias1.col_varchar_key NOT IN (
SELECT sq1_alias1.col_varchar_nokey
FROM t3 AS sq1_alias1
JOIN ( t1 AS sq1_alias2
STRAIGHT_JOIN view_d AS sq1_alias3 )
WHERE (
SELECT col_int_key
FROM t1 AS c_sq1_alias1
WHERE c_sq1_alias1.col_varchar_key = sq1_alias3.col_varchar_nokey
)
)
;
CALL stored_proc_2581;
ERROR 21000: Subquery returns more than 1 row
CALL stored_proc_2581;
ERROR 21000: Subquery returns more than 1 row
DROP PROCEDURE stored_proc_2581;
PREPARE s FROM 'SELECT alias2.col_int_key
FROM t1 AS alias1 , t2 AS alias2
WHERE alias1.col_varchar_key NOT IN (
SELECT sq1_alias1.col_varchar_nokey
FROM t3 AS sq1_alias1
JOIN ( t1 AS sq1_alias2
STRAIGHT_JOIN view_d AS sq1_alias3 )
WHERE (
SELECT col_int_key
FROM t1 AS c_sq1_alias1
WHERE c_sq1_alias1.col_varchar_key = sq1_alias3.col_varchar_nokey
)
)
';
EXECUTE s;
ERROR 21000: Subquery returns more than 1 row
EXECUTE s;
ERROR 21000: Subquery returns more than 1 row
DROP VIEW view_d;
DROP TABLE t1,t2,t3;
#
# Bug#19297190 NOT IN DOESN'T RETURN EXPECTED RESULT
#
CREATE TABLE t1 (a VARCHAR(500) CHARACTER SET UTF8) ENGINE=Sequoiadb;
SET @str= repeat("a",450);
SET @num=1000;
INSERT INTO t1 VALUES (CONCAT((@num:=@num+1), @str));
INSERT INTO t1 SELECT CONCAT((@num:=@num+1), @str) FROM t1;
INSERT INTO t1 SELECT CONCAT((@num:=@num+1), @str) FROM t1;
INSERT INTO t1 SELECT CONCAT((@num:=@num+1), @str) FROM t1;
INSERT INTO t1 SELECT CONCAT((@num:=@num+1), @str) FROM t1;
INSERT INTO t1 SELECT CONCAT((@num:=@num+1), @str) FROM t1;
SELECT COUNT(*) FROM t1;
COUNT(*)
32
set @save_heap_size= @@max_heap_table_size;
set @@max_heap_table_size= 16384;
set @saved_engine=@@internal_tmp_disk_storage_engine;
set global internal_tmp_disk_storage_engine = 'myisam';
SELECT COUNT(*)
FROM t1
WHERE t1.a NOT IN (
SELECT t2.a FROM t1 as t2
);
COUNT(*)
0
set global internal_tmp_disk_storage_engine = 'innodb';
SELECT COUNT(*)
FROM t1
WHERE t1.a NOT IN (
SELECT t2.a FROM t1 as t2
);
COUNT(*)
0
DROP TABLE t1;
set global internal_tmp_disk_storage_engine = @saved_engine;
set @@max_heap_table_size= @save_heap_size;
#
# Bug#19805761 ASSERTION FAILURE IN SUBSELECT_HASH_SJ_ENGINE::EXEC WITH SUBQUERY IN LEFT ARGUME
#
CREATE TABLE t1(a INT) ENGINE=Sequoiadb;
INSERT INTO t1 VALUES(1);
CREATE TABLE t2 LIKE t1;
SELECT (SELECT 1,2 FROM t2) NOT IN (SELECT 1,2 FROM t1) FROM t1;
(SELECT 1,2 FROM t2) NOT IN (SELECT 1,2 FROM t1)
NULL
DROP TABLE t1,t2;
#
# Bug#20729351 ASSERTION FAILED: ITEM_IN->LEFT_EXPR->ELEMENT_INDEX(0)->MAYBE_NULL
#
#
# Bug#22089623 ASSERTION IN ITEM_FUNC_TRIG_COND::VAL_INT()
#              WITH SUBQUERY ON LEFT SIDE OF IN
#
SELECT (SELECT NULL, NULL) IN (SELECT 1, 2);
(SELECT NULL, NULL) IN (SELECT 1, 2)
NULL
SELECT (SELECT 1, 1) IN (SELECT 1, 2);
(SELECT 1, 1) IN (SELECT 1, 2)
0
SELECT (SELECT 1, 2) IN (SELECT 1, 2);
(SELECT 1, 2) IN (SELECT 1, 2)
1
SELECT (SELECT NULL, 2) IN (SELECT 1, 2);
(SELECT NULL, 2) IN (SELECT 1, 2)
NULL
SELECT (SELECT 1, NULL) IN (SELECT 1, 2);
(SELECT 1, NULL) IN (SELECT 1, 2)
NULL
SELECT (SELECT NULL, 1) IN (SELECT 1, 2);
(SELECT NULL, 1) IN (SELECT 1, 2)
0
SELECT (SELECT 2, NULL) IN (SELECT 1, 2);
(SELECT 2, NULL) IN (SELECT 1, 2)
0
SELECT (SELECT 1, 2 UNION SELECT 1, 2) IN (SELECT 1, 2);
(SELECT 1, 2 UNION SELECT 1, 2) IN (SELECT 1, 2)
1
SELECT (SELECT 1, 1 UNION SELECT 1, 1) IN (SELECT 1, 2);
(SELECT 1, 1 UNION SELECT 1, 1) IN (SELECT 1, 2)
0
SELECT (SELECT NULL, NULL UNION SELECT NULL, NULL) IN (SELECT 1, 2);
(SELECT NULL, NULL UNION SELECT NULL, NULL) IN (SELECT 1, 2)
NULL
SELECT (SELECT 1, 1 UNION SELECT 2, 2) IN (SELECT 1, 2);
ERROR 21000: Subquery returns more than 1 row
SELECT (SELECT 1, 2 WHERE FALSE UNION SELECT 1, 2 WHERE FALSE) IN (SELECT 1, 2);
(SELECT 1, 2 WHERE FALSE UNION SELECT 1, 2 WHERE FALSE) IN (SELECT 1, 2)
NULL
SELECT (SELECT 1, 2 UNION ALL SELECT 1, 2) IN (SELECT 1, 2);
ERROR 21000: Subquery returns more than 1 row
SELECT (SELECT 1, 1 UNION ALL SELECT 1, 1) IN (SELECT 1, 2);
ERROR 21000: Subquery returns more than 1 row
SELECT (SELECT NULL, NULL UNION ALL SELECT NULL, NULL) IN (SELECT 1, 2);
ERROR 21000: Subquery returns more than 1 row
SELECT (SELECT 1, 1 UNION ALL SELECT 2, 2) IN (SELECT 1, 2);
ERROR 21000: Subquery returns more than 1 row
SELECT (SELECT 1, 2 WHERE FALSE UNION ALL SELECT 1, 2 WHERE FALSE) IN (SELECT 1, 2);
(SELECT 1, 2 WHERE FALSE UNION ALL SELECT 1, 2 WHERE FALSE) IN (SELECT 1, 2)
NULL
#
# Bug#20536077: WRONG RESULT FOR SELECT NULL,NULL IN (SUBQUERY)
#
# The following queries correctly returned NULL.
CREATE TABLE s (s INT) ENGINE=Sequoiadb;
INSERT INTO s VALUES(1);
SELECT NULL IN (SELECT 1);
NULL IN (SELECT 1)
NULL
SELECT NULL = (SELECT 1);
NULL = (SELECT 1)
NULL
SELECT NULL = (SELECT 1 FROM s);
NULL = (SELECT 1 FROM s)
NULL
SELECT (NULL, NULL) IN (SELECT 1, 2);
(NULL, NULL) IN (SELECT 1, 2)
NULL
# The following queries returned 0 instead of NULL.
SELECT NULL IN (SELECT 1 FROM s);
NULL IN (SELECT 1 FROM s)
NULL
SELECT (SELECT NULL, NULL FROM DUAL) IN (SELECT 1, 2 FROM s) FROM s;
(SELECT NULL, NULL FROM DUAL) IN (SELECT 1, 2 FROM s)
NULL
SELECT (SELECT NULL,NULL) IN (SELECT 1, 2);
(SELECT NULL,NULL) IN (SELECT 1, 2)
NULL
CREATE TABLE u(a INT, b INT) ENGINE=Sequoiadb;
INSERT INTO u VALUES (NULL, NULL);
SELECT (SELECT * FROM u) IN (SELECT 1, 2 FROM s) FROM s;
(SELECT * FROM u) IN (SELECT 1, 2 FROM s)
NULL
SELECT (SELECT * FROM u) IN (SELECT 1, 2);
(SELECT * FROM u) IN (SELECT 1, 2)
NULL
DROP TABLE s, u;
set @@optimizer_switch=@old_opt_switch;
SET sql_mode = default;
set global innodb_large_prefix=default;
Warnings:
Warning	131	Using innodb_large_prefix is deprecated and the parameter may be removed in future releases. See http://dev.mysql.com/doc/refman/5.7/en/innodb-file-format.html
set optimizer_switch=default;
