set optimizer_switch='semijoin=on,materialization=on,firstmatch=on,loosescan=on,index_condition_pushdown=on,mrr=on,mrr_cost_based=off';
set @old_opt_switch=@@optimizer_switch;
set optimizer_switch='subquery_materialization_cost_based=off';
drop table if exists t0, t1, t2, t10, t11, t12;
create table t1 (a int not null, b int, primary key (a));
create table t2 (a int not null, primary key (a));
create table t3 (a int not null, b int, primary key (a));
insert into t1 values (1,10), (2,20), (3,30),  (4,40);
insert into t2 values (2), (3), (4), (5);
insert into t3 values (10,3), (20,4), (30,5);
select * from t2 where t2.a in (select a from t1);
a
2
3
4
select * from t2 where t2.a in (select a from t1 where t1.b <> 30);
a
2
4
select * from t2 where t2.a in (select t1.a from t1,t3 where t1.b=t3.a);
a
2
3
drop table t1, t2, t3;
create table t1 (a int, b int, index a (a,b));
create table t2 (a int, index a (a));
create table t3 (a int, b int, index a (a));
insert into t1 values (1,10), (2,20), (3,30), (4,40);
create table t0(a int);
insert into t0 values (0),(1),(2),(3),(4),(5),(6),(7),(8),(9);
insert into t1
select rand()*100000+200,rand()*100000 from t0 A, t0 B, t0 C, t0 D;
insert into t2 values (2), (3), (4), (5);
insert into t3 values (10,3), (20,4), (30,5);
select * from t2 where t2.a in (select a from t1);
a
2
3
4
select * from t2 where t2.a in (select a from t1 where t1.b <> 30);
a
2
4
select * from t2 where t2.a in (select t1.a from t1,t3 where t1.b=t3.a);
a
2
3
insert into t1 values (3,31);
select * from t2 where t2.a in (select a from t1 where t1.b <> 30);
a
2
3
4
select * from t2 where t2.a in (select a from t1 where t1.b <> 30 and t1.b <> 31);
a
2
4
drop table t0, t1, t2, t3;
create table t0 (a int);
insert into t0 values (0),(1),(2),(3),(4),(5),(6),(7),(8),(9);
create table t1(a int, b int);
insert into t1 values (0,0),(1,1),(2,2);
create table t2 as select * from t1;
create table t11(a int, b int);
create table t10 (pk int, a int, primary key(pk));
insert into t10 select a,a from t0;
create table t12 like t10;
insert into t12 select * from t10;
Flattened because of dependency, t10=func(t1)
select * from t1 where a in (select pk from t10);
a	b
0	0
1	1
2	2
A confluent case of dependency
select * from t1 where a in (select a from t10 where pk=12);
a	b
select * from t1 where a in (select a from t10 where pk=9);
a	b
An empty table inside
select * from t1 where a in (select a from t11);
a	b
select * from t1 where a in (select pk from t10) and b in (select pk from t10);
a	b
0	0
1	1
2	2
flattening a nested subquery
select * from t1 where a in (select pk from t10 where t10.a in (select pk from t12));
a	b
0	0
1	1
2	2
flattening subquery w/ several tables
subqueries within outer joins go into ON expr.
select * from
t1 left join t2 on (t2.a= t1.a and t2.a in (select pk from t10)) 
where t1.a < 5;
a	b	a	b
0	0	0	0
1	1	1	1
2	2	2	2
prepare s1 from
' select * from
    t1 left join t2 on (t2.a= t1.a and t2.a in (select pk from t10))
  where t1.a < 5';
execute s1;
a	b	a	b
0	0	0	0
1	1	1	1
2	2	2	2
execute s1;
a	b	a	b
0	0	0	0
1	1	1	1
2	2	2	2
insert into t1 select (A.a + 10 * B.a),1 from t0 A, t0 B;
drop table t0, t1, t2;
drop table t10, t11, t12;
#
# Check that subqueries with outer joins or straight_join work for 
# different permutations of const and non-const tables.  (Ref. Bug#46692)
#
CREATE TABLE t1 (i INTEGER);
CREATE TABLE t2 (i INTEGER);
CREATE TABLE t3 (i INTEGER);
SELECT (SELECT COUNT(*) from t1) AS c1,
(SELECT COUNT(*) from t2) AS c2,
(SELECT COUNT(*) from t3) AS c3;
c1	c2	c3
0	0	0
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 INNER JOIN t3 ON t2.i=t3.i);
i
PREPARE stmt FROM "SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 INNER JOIN t3 ON t2.i=t3.i)";
EXECUTE stmt;
i
EXECUTE stmt;
i
DEALLOCATE PREPARE stmt;
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i);
i
PREPARE stmt FROM "SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i)";
EXECUTE stmt;
i
EXECUTE stmt;
i
DEALLOCATE PREPARE stmt;
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 RIGHT JOIN t3 ON t2.i=t3.i);
i
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 STRAIGHT_JOIN t3);
i
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i);
i
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 RIGHT JOIN t3 ON t2.i=t3.i);
i
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 STRAIGHT_JOIN t3);
i
INSERT INTO t3 VALUES (2);
SELECT (SELECT COUNT(*) from t1) AS c1,
(SELECT COUNT(*) from t2) AS c2,
(SELECT COUNT(*) from t3) AS c3;
c1	c2	c3
0	0	1
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 INNER JOIN t3 ON t2.i=t3.i);
i
PREPARE stmt FROM "SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 INNER JOIN t3 ON t2.i=t3.i)";
EXECUTE stmt;
i
EXECUTE stmt;
i
DEALLOCATE PREPARE stmt;
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i);
i
PREPARE stmt FROM "SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i)";
EXECUTE stmt;
i
EXECUTE stmt;
i
DEALLOCATE PREPARE stmt;
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 RIGHT JOIN t3 ON t2.i=t3.i);
i
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 STRAIGHT_JOIN t3);
i
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i);
i
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 RIGHT JOIN t3 ON t2.i=t3.i);
i
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 STRAIGHT_JOIN t3);
i
INSERT INTO t3 VALUES (1);
SELECT (SELECT COUNT(*) from t1) AS c1,
(SELECT COUNT(*) from t2) AS c2,
(SELECT COUNT(*) from t3) AS c3;
c1	c2	c3
0	0	2
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 INNER JOIN t3 ON t2.i=t3.i);
i
PREPARE stmt FROM "SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 INNER JOIN t3 ON t2.i=t3.i)";
EXECUTE stmt;
i
EXECUTE stmt;
i
DEALLOCATE PREPARE stmt;
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i);
i
PREPARE stmt FROM "SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i)";
EXECUTE stmt;
i
EXECUTE stmt;
i
DEALLOCATE PREPARE stmt;
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 RIGHT JOIN t3 ON t2.i=t3.i);
i
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 STRAIGHT_JOIN t3);
i
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i);
i
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 RIGHT JOIN t3 ON t2.i=t3.i);
i
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 STRAIGHT_JOIN t3);
i
INSERT INTO t3 VALUES (0);
DELETE FROM t3;
INSERT INTO t2 VALUES (2);
SELECT (SELECT COUNT(*) from t1) AS c1,
(SELECT COUNT(*) from t2) AS c2,
(SELECT COUNT(*) from t3) AS c3;
c1	c2	c3
0	1	0
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 INNER JOIN t3 ON t2.i=t3.i);
i
PREPARE stmt FROM "SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 INNER JOIN t3 ON t2.i=t3.i)";
EXECUTE stmt;
i
EXECUTE stmt;
i
DEALLOCATE PREPARE stmt;
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i);
i
PREPARE stmt FROM "SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i)";
EXECUTE stmt;
i
EXECUTE stmt;
i
DEALLOCATE PREPARE stmt;
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 RIGHT JOIN t3 ON t2.i=t3.i);
i
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 STRAIGHT_JOIN t3);
i
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i);
i
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 RIGHT JOIN t3 ON t2.i=t3.i);
i
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 STRAIGHT_JOIN t3);
i
INSERT INTO t3 VALUES (2);
SELECT (SELECT COUNT(*) from t1) AS c1,
(SELECT COUNT(*) from t2) AS c2,
(SELECT COUNT(*) from t3) AS c3;
c1	c2	c3
0	1	1
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 INNER JOIN t3 ON t2.i=t3.i);
i
PREPARE stmt FROM "SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 INNER JOIN t3 ON t2.i=t3.i)";
EXECUTE stmt;
i
EXECUTE stmt;
i
DEALLOCATE PREPARE stmt;
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i);
i
PREPARE stmt FROM "SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i)";
EXECUTE stmt;
i
EXECUTE stmt;
i
DEALLOCATE PREPARE stmt;
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 RIGHT JOIN t3 ON t2.i=t3.i);
i
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 STRAIGHT_JOIN t3);
i
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i);
i
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 RIGHT JOIN t3 ON t2.i=t3.i);
i
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 STRAIGHT_JOIN t3);
i
INSERT INTO t3 VALUES (1);
SELECT (SELECT COUNT(*) from t1) AS c1,
(SELECT COUNT(*) from t2) AS c2,
(SELECT COUNT(*) from t3) AS c3;
c1	c2	c3
0	1	2
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 INNER JOIN t3 ON t2.i=t3.i);
i
PREPARE stmt FROM "SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 INNER JOIN t3 ON t2.i=t3.i)";
EXECUTE stmt;
i
EXECUTE stmt;
i
DEALLOCATE PREPARE stmt;
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i);
i
PREPARE stmt FROM "SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i)";
EXECUTE stmt;
i
EXECUTE stmt;
i
DEALLOCATE PREPARE stmt;
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 RIGHT JOIN t3 ON t2.i=t3.i);
i
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 STRAIGHT_JOIN t3);
i
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i);
i
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 RIGHT JOIN t3 ON t2.i=t3.i);
i
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 STRAIGHT_JOIN t3);
i
INSERT INTO t3 VALUES (0);
DELETE FROM t3;
INSERT INTO t2 VALUES (1);
SELECT (SELECT COUNT(*) from t1) AS c1,
(SELECT COUNT(*) from t2) AS c2,
(SELECT COUNT(*) from t3) AS c3;
c1	c2	c3
0	2	0
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 INNER JOIN t3 ON t2.i=t3.i);
i
PREPARE stmt FROM "SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 INNER JOIN t3 ON t2.i=t3.i)";
EXECUTE stmt;
i
EXECUTE stmt;
i
DEALLOCATE PREPARE stmt;
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i);
i
PREPARE stmt FROM "SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i)";
EXECUTE stmt;
i
EXECUTE stmt;
i
DEALLOCATE PREPARE stmt;
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 RIGHT JOIN t3 ON t2.i=t3.i);
i
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 STRAIGHT_JOIN t3);
i
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i);
i
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 RIGHT JOIN t3 ON t2.i=t3.i);
i
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 STRAIGHT_JOIN t3);
i
INSERT INTO t3 VALUES (2);
SELECT (SELECT COUNT(*) from t1) AS c1,
(SELECT COUNT(*) from t2) AS c2,
(SELECT COUNT(*) from t3) AS c3;
c1	c2	c3
0	2	1
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 INNER JOIN t3 ON t2.i=t3.i);
i
PREPARE stmt FROM "SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 INNER JOIN t3 ON t2.i=t3.i)";
EXECUTE stmt;
i
EXECUTE stmt;
i
DEALLOCATE PREPARE stmt;
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i);
i
PREPARE stmt FROM "SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i)";
EXECUTE stmt;
i
EXECUTE stmt;
i
DEALLOCATE PREPARE stmt;
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 RIGHT JOIN t3 ON t2.i=t3.i);
i
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 STRAIGHT_JOIN t3);
i
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i);
i
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 RIGHT JOIN t3 ON t2.i=t3.i);
i
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 STRAIGHT_JOIN t3);
i
INSERT INTO t3 VALUES (1);
SELECT (SELECT COUNT(*) from t1) AS c1,
(SELECT COUNT(*) from t2) AS c2,
(SELECT COUNT(*) from t3) AS c3;
c1	c2	c3
0	2	2
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 INNER JOIN t3 ON t2.i=t3.i);
i
PREPARE stmt FROM "SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 INNER JOIN t3 ON t2.i=t3.i)";
EXECUTE stmt;
i
EXECUTE stmt;
i
DEALLOCATE PREPARE stmt;
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i);
i
PREPARE stmt FROM "SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i)";
EXECUTE stmt;
i
EXECUTE stmt;
i
DEALLOCATE PREPARE stmt;
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 RIGHT JOIN t3 ON t2.i=t3.i);
i
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 STRAIGHT_JOIN t3);
i
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i);
i
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 RIGHT JOIN t3 ON t2.i=t3.i);
i
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 STRAIGHT_JOIN t3);
i
INSERT INTO t3 VALUES (0);
DELETE FROM t3;
INSERT INTO t2 VALUES (0);
DELETE FROM t2;
INSERT INTO t1 VALUES (2);
SELECT (SELECT COUNT(*) from t1) AS c1,
(SELECT COUNT(*) from t2) AS c2,
(SELECT COUNT(*) from t3) AS c3;
c1	c2	c3
1	0	0
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 INNER JOIN t3 ON t2.i=t3.i);
i
PREPARE stmt FROM "SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 INNER JOIN t3 ON t2.i=t3.i)";
EXECUTE stmt;
i
EXECUTE stmt;
i
DEALLOCATE PREPARE stmt;
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i);
i
PREPARE stmt FROM "SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i)";
EXECUTE stmt;
i
EXECUTE stmt;
i
DEALLOCATE PREPARE stmt;
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 RIGHT JOIN t3 ON t2.i=t3.i);
i
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 STRAIGHT_JOIN t3);
i
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i);
i
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 RIGHT JOIN t3 ON t2.i=t3.i);
i
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 STRAIGHT_JOIN t3);
i
INSERT INTO t3 VALUES (2);
SELECT (SELECT COUNT(*) from t1) AS c1,
(SELECT COUNT(*) from t2) AS c2,
(SELECT COUNT(*) from t3) AS c3;
c1	c2	c3
1	0	1
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 INNER JOIN t3 ON t2.i=t3.i);
i
PREPARE stmt FROM "SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 INNER JOIN t3 ON t2.i=t3.i)";
EXECUTE stmt;
i
EXECUTE stmt;
i
DEALLOCATE PREPARE stmt;
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i);
i
PREPARE stmt FROM "SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i)";
EXECUTE stmt;
i
EXECUTE stmt;
i
DEALLOCATE PREPARE stmt;
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 RIGHT JOIN t3 ON t2.i=t3.i);
i
2
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 STRAIGHT_JOIN t3);
i
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i);
i
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 RIGHT JOIN t3 ON t2.i=t3.i);
i
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 STRAIGHT_JOIN t3);
i
INSERT INTO t3 VALUES (1);
SELECT (SELECT COUNT(*) from t1) AS c1,
(SELECT COUNT(*) from t2) AS c2,
(SELECT COUNT(*) from t3) AS c3;
c1	c2	c3
1	0	2
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 INNER JOIN t3 ON t2.i=t3.i);
i
PREPARE stmt FROM "SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 INNER JOIN t3 ON t2.i=t3.i)";
EXECUTE stmt;
i
EXECUTE stmt;
i
DEALLOCATE PREPARE stmt;
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i);
i
PREPARE stmt FROM "SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i)";
EXECUTE stmt;
i
EXECUTE stmt;
i
DEALLOCATE PREPARE stmt;
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 RIGHT JOIN t3 ON t2.i=t3.i);
i
2
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 STRAIGHT_JOIN t3);
i
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i);
i
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 RIGHT JOIN t3 ON t2.i=t3.i);
i
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 STRAIGHT_JOIN t3);
i
INSERT INTO t3 VALUES (0);
DELETE FROM t3;
INSERT INTO t2 VALUES (2);
SELECT (SELECT COUNT(*) from t1) AS c1,
(SELECT COUNT(*) from t2) AS c2,
(SELECT COUNT(*) from t3) AS c3;
c1	c2	c3
1	1	0
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 INNER JOIN t3 ON t2.i=t3.i);
i
PREPARE stmt FROM "SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 INNER JOIN t3 ON t2.i=t3.i)";
EXECUTE stmt;
i
EXECUTE stmt;
i
DEALLOCATE PREPARE stmt;
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i);
i
PREPARE stmt FROM "SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i)";
EXECUTE stmt;
i
EXECUTE stmt;
i
DEALLOCATE PREPARE stmt;
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 RIGHT JOIN t3 ON t2.i=t3.i);
i
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 STRAIGHT_JOIN t3);
i
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i);
i
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 RIGHT JOIN t3 ON t2.i=t3.i);
i
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 STRAIGHT_JOIN t3);
i
INSERT INTO t3 VALUES (2);
SELECT (SELECT COUNT(*) from t1) AS c1,
(SELECT COUNT(*) from t2) AS c2,
(SELECT COUNT(*) from t3) AS c3;
c1	c2	c3
1	1	1
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 INNER JOIN t3 ON t2.i=t3.i);
i
2
PREPARE stmt FROM "SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 INNER JOIN t3 ON t2.i=t3.i)";
EXECUTE stmt;
i
2
EXECUTE stmt;
i
2
DEALLOCATE PREPARE stmt;
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i);
i
2
PREPARE stmt FROM "SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i)";
EXECUTE stmt;
i
2
EXECUTE stmt;
i
2
DEALLOCATE PREPARE stmt;
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 RIGHT JOIN t3 ON t2.i=t3.i);
i
2
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 STRAIGHT_JOIN t3);
i
2
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i);
i
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 RIGHT JOIN t3 ON t2.i=t3.i);
i
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 STRAIGHT_JOIN t3);
i
INSERT INTO t3 VALUES (1);
SELECT (SELECT COUNT(*) from t1) AS c1,
(SELECT COUNT(*) from t2) AS c2,
(SELECT COUNT(*) from t3) AS c3;
c1	c2	c3
1	1	2
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 INNER JOIN t3 ON t2.i=t3.i);
i
2
PREPARE stmt FROM "SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 INNER JOIN t3 ON t2.i=t3.i)";
EXECUTE stmt;
i
2
EXECUTE stmt;
i
2
DEALLOCATE PREPARE stmt;
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i);
i
2
PREPARE stmt FROM "SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i)";
EXECUTE stmt;
i
2
EXECUTE stmt;
i
2
DEALLOCATE PREPARE stmt;
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 RIGHT JOIN t3 ON t2.i=t3.i);
i
2
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 STRAIGHT_JOIN t3);
i
2
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i);
i
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 RIGHT JOIN t3 ON t2.i=t3.i);
i
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 STRAIGHT_JOIN t3);
i
INSERT INTO t3 VALUES (0);
DELETE FROM t3;
INSERT INTO t2 VALUES (1);
SELECT (SELECT COUNT(*) from t1) AS c1,
(SELECT COUNT(*) from t2) AS c2,
(SELECT COUNT(*) from t3) AS c3;
c1	c2	c3
1	2	0
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 INNER JOIN t3 ON t2.i=t3.i);
i
PREPARE stmt FROM "SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 INNER JOIN t3 ON t2.i=t3.i)";
EXECUTE stmt;
i
EXECUTE stmt;
i
DEALLOCATE PREPARE stmt;
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i);
i
PREPARE stmt FROM "SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i)";
EXECUTE stmt;
i
EXECUTE stmt;
i
DEALLOCATE PREPARE stmt;
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 RIGHT JOIN t3 ON t2.i=t3.i);
i
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 STRAIGHT_JOIN t3);
i
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i);
i
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 RIGHT JOIN t3 ON t2.i=t3.i);
i
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 STRAIGHT_JOIN t3);
i
INSERT INTO t3 VALUES (2);
SELECT (SELECT COUNT(*) from t1) AS c1,
(SELECT COUNT(*) from t2) AS c2,
(SELECT COUNT(*) from t3) AS c3;
c1	c2	c3
1	2	1
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 INNER JOIN t3 ON t2.i=t3.i);
i
2
PREPARE stmt FROM "SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 INNER JOIN t3 ON t2.i=t3.i)";
EXECUTE stmt;
i
2
EXECUTE stmt;
i
2
DEALLOCATE PREPARE stmt;
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i);
i
2
PREPARE stmt FROM "SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i)";
EXECUTE stmt;
i
2
EXECUTE stmt;
i
2
DEALLOCATE PREPARE stmt;
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 RIGHT JOIN t3 ON t2.i=t3.i);
i
2
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 STRAIGHT_JOIN t3);
i
2
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i);
i
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 RIGHT JOIN t3 ON t2.i=t3.i);
i
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 STRAIGHT_JOIN t3);
i
INSERT INTO t3 VALUES (1);
SELECT (SELECT COUNT(*) from t1) AS c1,
(SELECT COUNT(*) from t2) AS c2,
(SELECT COUNT(*) from t3) AS c3;
c1	c2	c3
1	2	2
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 INNER JOIN t3 ON t2.i=t3.i);
i
2
PREPARE stmt FROM "SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 INNER JOIN t3 ON t2.i=t3.i)";
EXECUTE stmt;
i
2
EXECUTE stmt;
i
2
DEALLOCATE PREPARE stmt;
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i);
i
2
PREPARE stmt FROM "SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i)";
EXECUTE stmt;
i
2
EXECUTE stmt;
i
2
DEALLOCATE PREPARE stmt;
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 RIGHT JOIN t3 ON t2.i=t3.i);
i
2
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 STRAIGHT_JOIN t3);
i
2
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i);
i
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 RIGHT JOIN t3 ON t2.i=t3.i);
i
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 STRAIGHT_JOIN t3);
i
INSERT INTO t3 VALUES (0);
DELETE FROM t3;
INSERT INTO t2 VALUES (0);
DELETE FROM t2;
INSERT INTO t1 VALUES (1);
SELECT (SELECT COUNT(*) from t1) AS c1,
(SELECT COUNT(*) from t2) AS c2,
(SELECT COUNT(*) from t3) AS c3;
c1	c2	c3
2	0	0
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 INNER JOIN t3 ON t2.i=t3.i);
i
PREPARE stmt FROM "SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 INNER JOIN t3 ON t2.i=t3.i)";
EXECUTE stmt;
i
EXECUTE stmt;
i
DEALLOCATE PREPARE stmt;
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i);
i
PREPARE stmt FROM "SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i)";
EXECUTE stmt;
i
EXECUTE stmt;
i
DEALLOCATE PREPARE stmt;
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 RIGHT JOIN t3 ON t2.i=t3.i);
i
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 STRAIGHT_JOIN t3);
i
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i);
i
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 RIGHT JOIN t3 ON t2.i=t3.i);
i
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 STRAIGHT_JOIN t3);
i
INSERT INTO t3 VALUES (2);
SELECT (SELECT COUNT(*) from t1) AS c1,
(SELECT COUNT(*) from t2) AS c2,
(SELECT COUNT(*) from t3) AS c3;
c1	c2	c3
2	0	1
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 INNER JOIN t3 ON t2.i=t3.i);
i
PREPARE stmt FROM "SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 INNER JOIN t3 ON t2.i=t3.i)";
EXECUTE stmt;
i
EXECUTE stmt;
i
DEALLOCATE PREPARE stmt;
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i);
i
PREPARE stmt FROM "SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i)";
EXECUTE stmt;
i
EXECUTE stmt;
i
DEALLOCATE PREPARE stmt;
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 RIGHT JOIN t3 ON t2.i=t3.i);
i
2
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 STRAIGHT_JOIN t3);
i
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i);
i
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 RIGHT JOIN t3 ON t2.i=t3.i);
i
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 STRAIGHT_JOIN t3);
i
INSERT INTO t3 VALUES (1);
SELECT (SELECT COUNT(*) from t1) AS c1,
(SELECT COUNT(*) from t2) AS c2,
(SELECT COUNT(*) from t3) AS c3;
c1	c2	c3
2	0	2
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 INNER JOIN t3 ON t2.i=t3.i);
i
PREPARE stmt FROM "SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 INNER JOIN t3 ON t2.i=t3.i)";
EXECUTE stmt;
i
EXECUTE stmt;
i
DEALLOCATE PREPARE stmt;
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i);
i
PREPARE stmt FROM "SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i)";
EXECUTE stmt;
i
EXECUTE stmt;
i
DEALLOCATE PREPARE stmt;
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 RIGHT JOIN t3 ON t2.i=t3.i);
i
2
1
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 STRAIGHT_JOIN t3);
i
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i);
i
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 RIGHT JOIN t3 ON t2.i=t3.i);
i
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 STRAIGHT_JOIN t3);
i
INSERT INTO t3 VALUES (0);
DELETE FROM t3;
INSERT INTO t2 VALUES (2);
SELECT (SELECT COUNT(*) from t1) AS c1,
(SELECT COUNT(*) from t2) AS c2,
(SELECT COUNT(*) from t3) AS c3;
c1	c2	c3
2	1	0
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 INNER JOIN t3 ON t2.i=t3.i);
i
PREPARE stmt FROM "SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 INNER JOIN t3 ON t2.i=t3.i)";
EXECUTE stmt;
i
EXECUTE stmt;
i
DEALLOCATE PREPARE stmt;
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i);
i
PREPARE stmt FROM "SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i)";
EXECUTE stmt;
i
EXECUTE stmt;
i
DEALLOCATE PREPARE stmt;
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 RIGHT JOIN t3 ON t2.i=t3.i);
i
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 STRAIGHT_JOIN t3);
i
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i);
i
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 RIGHT JOIN t3 ON t2.i=t3.i);
i
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 STRAIGHT_JOIN t3);
i
INSERT INTO t3 VALUES (2);
SELECT (SELECT COUNT(*) from t1) AS c1,
(SELECT COUNT(*) from t2) AS c2,
(SELECT COUNT(*) from t3) AS c3;
c1	c2	c3
2	1	1
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 INNER JOIN t3 ON t2.i=t3.i);
i
2
PREPARE stmt FROM "SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 INNER JOIN t3 ON t2.i=t3.i)";
EXECUTE stmt;
i
2
EXECUTE stmt;
i
2
DEALLOCATE PREPARE stmt;
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i);
i
2
PREPARE stmt FROM "SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i)";
EXECUTE stmt;
i
2
EXECUTE stmt;
i
2
DEALLOCATE PREPARE stmt;
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 RIGHT JOIN t3 ON t2.i=t3.i);
i
2
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 STRAIGHT_JOIN t3);
i
2
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i);
i
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 RIGHT JOIN t3 ON t2.i=t3.i);
i
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 STRAIGHT_JOIN t3);
i
INSERT INTO t3 VALUES (1);
SELECT (SELECT COUNT(*) from t1) AS c1,
(SELECT COUNT(*) from t2) AS c2,
(SELECT COUNT(*) from t3) AS c3;
c1	c2	c3
2	1	2
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 INNER JOIN t3 ON t2.i=t3.i);
i
2
PREPARE stmt FROM "SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 INNER JOIN t3 ON t2.i=t3.i)";
EXECUTE stmt;
i
2
EXECUTE stmt;
i
2
DEALLOCATE PREPARE stmt;
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i);
i
2
PREPARE stmt FROM "SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i)";
EXECUTE stmt;
i
2
EXECUTE stmt;
i
2
DEALLOCATE PREPARE stmt;
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 RIGHT JOIN t3 ON t2.i=t3.i);
i
2
1
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 STRAIGHT_JOIN t3);
i
2
1
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i);
i
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 RIGHT JOIN t3 ON t2.i=t3.i);
i
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 STRAIGHT_JOIN t3);
i
INSERT INTO t3 VALUES (0);
DELETE FROM t3;
INSERT INTO t2 VALUES (1);
SELECT (SELECT COUNT(*) from t1) AS c1,
(SELECT COUNT(*) from t2) AS c2,
(SELECT COUNT(*) from t3) AS c3;
c1	c2	c3
2	2	0
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 INNER JOIN t3 ON t2.i=t3.i);
i
PREPARE stmt FROM "SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 INNER JOIN t3 ON t2.i=t3.i)";
EXECUTE stmt;
i
EXECUTE stmt;
i
DEALLOCATE PREPARE stmt;
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i);
i
PREPARE stmt FROM "SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i)";
EXECUTE stmt;
i
EXECUTE stmt;
i
DEALLOCATE PREPARE stmt;
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 RIGHT JOIN t3 ON t2.i=t3.i);
i
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 STRAIGHT_JOIN t3);
i
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i);
i
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 RIGHT JOIN t3 ON t2.i=t3.i);
i
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 STRAIGHT_JOIN t3);
i
INSERT INTO t3 VALUES (2);
SELECT (SELECT COUNT(*) from t1) AS c1,
(SELECT COUNT(*) from t2) AS c2,
(SELECT COUNT(*) from t3) AS c3;
c1	c2	c3
2	2	1
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 INNER JOIN t3 ON t2.i=t3.i);
i
2
PREPARE stmt FROM "SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 INNER JOIN t3 ON t2.i=t3.i)";
EXECUTE stmt;
i
2
EXECUTE stmt;
i
2
DEALLOCATE PREPARE stmt;
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i);
i
2
PREPARE stmt FROM "SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i)";
EXECUTE stmt;
i
2
EXECUTE stmt;
i
2
DEALLOCATE PREPARE stmt;
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 RIGHT JOIN t3 ON t2.i=t3.i);
i
2
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 STRAIGHT_JOIN t3);
i
2
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i);
i
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 RIGHT JOIN t3 ON t2.i=t3.i);
i
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 STRAIGHT_JOIN t3);
i
INSERT INTO t3 VALUES (1);
SELECT (SELECT COUNT(*) from t1) AS c1,
(SELECT COUNT(*) from t2) AS c2,
(SELECT COUNT(*) from t3) AS c3;
c1	c2	c3
2	2	2
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 INNER JOIN t3 ON t2.i=t3.i);
i
2
1
PREPARE stmt FROM "SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 INNER JOIN t3 ON t2.i=t3.i)";
EXECUTE stmt;
i
2
1
EXECUTE stmt;
i
2
1
DEALLOCATE PREPARE stmt;
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i);
i
2
1
PREPARE stmt FROM "SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i)";
EXECUTE stmt;
i
2
1
EXECUTE stmt;
i
2
1
DEALLOCATE PREPARE stmt;
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 RIGHT JOIN t3 ON t2.i=t3.i);
i
2
1
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t2 STRAIGHT_JOIN t3);
i
2
1
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i);
i
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 RIGHT JOIN t3 ON t2.i=t3.i);
i
SELECT * FROM t1 WHERE (11) IN 
(SELECT t3.i FROM t2 STRAIGHT_JOIN t3);
i
INSERT INTO t3 VALUES (0);
DELETE FROM t3;
INSERT INTO t2 VALUES (0);
DELETE FROM t2;
INSERT INTO t1 VALUES (0);
DROP TABLE t1, t2, t3;
create table x1(k int primary key, d1 int, d2 int);
create table x2(k int primary key, d1 int, d2 int);
insert into x1 values
(10,   10,   10),
(20,   20,   20),
(21,   20,   null),
(30,   null, 30),
(40,   40,   40);
insert into x2 values
(10,   10,   10),
(20,   20,   20),
(21,   20,   null),
(30,   null, 30);
select *
from x1
where (d1, d2) in (select d1, d2
from x2);
k	d1	d2
10	10	10
20	20	20
select *
from x1
where (d1, d2) in (select d1, d2
from x2) is true;
k	d1	d2
10	10	10
20	20	20
select *
from x1
where (d1, d2) in (select d1, d2
from x2) is false;
k	d1	d2
40	40	40
select *
from x1
where (d1, d2) in (select d1, d2
from x2) is unknown;
k	d1	d2
21	20	NULL
30	NULL	30
select *
from x1
where d1 in (select d1
from x2
where x1.d2=x2.d2);
k	d1	d2
10	10	10
20	20	20
select *
from x1
where d1 in (select d1
from x2
where x1.d2=x2.d2) is true;
k	d1	d2
10	10	10
20	20	20
select *
from x1
where d1 in (select d1
from x2
where x1.d2=x2.d2) is false;
k	d1	d2
21	20	NULL
40	40	40
select *
from x1
where d1 in (select d1
from x2
where x1.d2=x2.d2) is unknown;
k	d1	d2
30	NULL	30
select *
from x1
where 1 in (select 1
from x2
where x1.d1=x2.d1 and x1.d2=x2.d2);
k	d1	d2
10	10	10
20	20	20
select *
from x1
where 1 in (select 1
from x2
where x1.d1=x2.d1 and x1.d2=x2.d2) is true;
k	d1	d2
10	10	10
20	20	20
select *
from x1
where 1 in (select 1
from x2
where x1.d1=x2.d1 and x1.d2=x2.d2) is false;
k	d1	d2
21	20	NULL
30	NULL	30
40	40	40
select *
from x1
where 1 in (select 1
from x2
where x1.d1=x2.d1 and x1.d2=x2.d2) is unknown;
k	d1	d2
select *
from x1
where exists (select *
from x2
where x1.d1=x2.d1 and x1.d2=x2.d2);
k	d1	d2
10	10	10
20	20	20
drop table x1;
drop table x2;
create table t1(a int);
insert into t1 values (0),(1);
select (select max(y.a) from t1 y where a in (select a from t1 z) and a < x.a) as subq from t1 x;
subq
NULL
0
drop table t1;
create table t0 (a int);
insert into t0 values (0),(1),(2),(3),(4),(5),(6),(7),(8),(9);
create table t1 as select * from t0;
insert into t1 select a+10 from t0;
insert into t0 values(2);
select * from t1 where 2 in (select a from t0);
a
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
drop table t0, t1;
create table t0 (a int);
insert into t0 values (0),(1),(2),(3),(4),(5),(6),(7),(8),(9);
create table t1 (kp1 int, kp2 int, c int, filler char(100), key(kp1, kp2));
insert into t1 select A.a+10*(B.a+10*C.a), 0, 0, 'filler' from t0 A, t0 B, t0 C;
insert into t1 select * from t1 where kp1 < 20;
create table t3 (a int);
insert into t3 select A.a + 10*B.a from t0 A, t0 B;
select * from t3 where a in (select kp1 from t1 where kp1<20);
a
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
select * from t3 where a in (select kp1 from t1 where kp1<20) and a<20;
a
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
create table t4 (pk int primary key);
insert into t4 select a from t3;
select * from t3 where a in 
(select t1.kp1 from t1,t4 where kp1<20 and t4.pk=t1.c);
a
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
drop table t1, t3, t4;
create table t1 (a int);
insert into t1 values (0),(0),(0),(1),(1),(1),(2),(2),(2),(3),(3),(3);
set @save_max_heap_table_size=@@max_heap_table_size;
set @@max_heap_table_size= 16384;
# Attempt to make one test that overflows the heap table when a
# non-duplicate row is inserted and one test that overflows the
# heap table when a duplicate record is inserted. Debugging showed
# that these situations occurred with max_heap_table_size=16384
# and optimizer_join_cache_level equals 1 and 0, respectively.
# Finally execute a test that does not overflow the heap table.
flush status;
select count(*) from t0 a, t0 b, t0 c
where c.a in (select a from t1 d);
count(*)
400
show status like 'Created_tmp_disk_tables';
Variable_name	Value
Created_tmp_disk_tables	0
set @@max_heap_table_size= @save_max_heap_table_size;
flush status;
select count(*) from t0 a, t0 b, t0 c
where c.a in (select a from t1 d);
count(*)
400
show status like 'Created_tmp_disk_tables';
Variable_name	Value
Created_tmp_disk_tables	0
drop table t0, t1;
create table t0 (a int);
insert into t0 values (0),(1),(2),(3),(4),(5),(6),(7),(8),(9);
create table t2(a int);
insert into t2 values (1),(2);
create table t3 ( a int , filler char(100), key(a));
insert into t3 select A.a + 10*B.a, 'filler' from t0 A, t0 B;
select * from t3 where a in (select a from t2);
a	filler
1	filler
2	filler
drop table t0, t2, t3;
create table t1 (a date);
insert into t1 values ('2008-01-01'),('2008-01-01'),('2008-02-01'),('2008-02-01');
create table t2 (a int);
insert into t2 values (1),(2);
create table t3 (a char(10));
insert into t3 select * from t1;
insert into t3 values (1),(2);
drop table t1, t2, t3;
create table t1 (a decimal);
insert into t1 values (1),(2);
drop table t1;
create table t1 (a int);
insert into t1 values (0),(1),(2),(3),(4),(5),(6),(7),(8),(9);
create table t2 as select * from t1;
create table t3 (a int, b int, filler char(100), key(a));
insert into t3 select A.a + 10*B.a, A.a + 10*B.a, 'filler' from t1 A, t1 B, t1 C;
create table t0 (a int, b int);
insert into t0 values(1,1);
create table t4 as select a as x, a as y from t1;
drop table t0,t1,t2,t3,t4;
create table t0 (a int);
insert into t0 values (0),(1),(2),(3),(4),(5),(6),(7),(8),(9);
create table t1 (a int, b int, filler char(100), key(a,b));
insert into t1 select A.a, B.a, 'filler' from t0 A, t0 B;
create table t2 as select * from t1;
drop table t1,t2;
create table t1 (a int, b int);
insert into t1 select a,a from t0;
create table t2 (a int, b int);
insert into t2 select A.a + 10*B.a, A.a + 10*B.a from t0 A, t0 B;
drop table t0, t1, t2;
#
# Bug#19695490: CRASH IN CREATE_REF_FOR_KEY ON SELECT + JOIN + UTF8 COLUMN
#                + DATETIME INDEX.
#
CREATE TABLE t1 (
field1 varchar(255) CHARACTER SET utf8,
field2 varchar(255) CHARACTER SET utf8
);
INSERT INTO t1 VALUES
('time','time'),
('lpjdzvkp','lpjdzvkp'),
('dzvkpai', 'dzvkpai');
CREATE TABLE t2 ( col_varchar varchar(10));
CREATE TABLE t3 (
pk int(11) NOT NULL,
col_varchar_255_utf8_key varchar(255) CHARACTER SET utf8,
col_varchar_10_utf8_key varchar(10) CHARACTER SET utf8,
PRIMARY KEY (pk)
);
INSERT INTO t3 VALUES (22,'come','h'),
(23,'time','aaa'),
(24,'lpjdzvkp','ababa'),
(25,'d','GGDD');
SELECT * FROM t1 WHERE (field1, field2) IN (
SELECT table1.col_varchar_255_utf8_key AS field1,
table1.col_varchar_255_utf8_key AS field2
FROM t3 AS table1 LEFT JOIN t2 AS table2
ON table1.col_varchar_10_utf8_key <=
table2.col_varchar
WHERE table1.pk >= 6);
field1	field2
time	time
lpjdzvkp	lpjdzvkp
DROP TABLE t1,t2,t3;
create table t0 (a decimal(4,2));
insert into t0 values (10.24), (22.11);
create table t1 as select * from t0;
insert into t1 select * from t0;
select * from t0 where a in (select a from t1);
a
10.24
22.11
drop table t0, t1;
create table t0(a date);
insert into t0 values ('2008-01-01'),('2008-02-02');
create table t1 as select * from t0;
insert into t1 select * from t0;
select * from t0 where a in (select a from t1);
a
2008-01-01
2008-02-02
drop table t0, t1;
create table t0(a int);
insert into t0 values (0),(1),(2),(3),(4),(5),(6),(7),(8),(9);
create table t1 as select a as a, a as b, a as c from t0 where a < 3;
create table t2 as select a as a, a as b from t0 where a < 3;
insert into t2 select * from t2;
drop table t0,t1,t2;
set @save_join_buffer_size = @@join_buffer_size;
set join_buffer_size= 8192;
create table t0 (a int);
insert into t0 values (0),(1),(2),(3),(4),(5),(6),(7),(8),(9);
create table t1 (a int, filler1 binary(200), filler2 binary(200));
insert into t1 select a, 'filler123456', 'filler123456' from t0;
insert into t1 select a+10, 'filler123456', 'filler123456' from t0;
create table t2 as select * from t1;
insert into t1 select a+20, 'filler123456', 'filler123456' from t0;
insert into t1 values (2, 'duplicate ok', 'duplicate ok');
insert into t1 values (18, 'duplicate ok', 'duplicate ok');
insert into t2 values (3, 'duplicate ok', 'duplicate ok');
insert into t2 values (19, 'duplicate ok', 'duplicate ok');
select 
a, mid(filler1, 1,10), length(filler1)=length(filler2) as z 
from t1 ot where a in (select a from t2 it);
a	mid(filler1, 1,10)	z
0	filler1234	1
1	filler1234	1
10	filler1234	1
11	filler1234	1
12	filler1234	1
13	filler1234	1
14	filler1234	1
15	filler1234	1
16	filler1234	1
17	filler1234	1
18	duplicate 	1
18	filler1234	1
19	filler1234	1
2	duplicate 	1
2	filler1234	1
3	filler1234	1
4	filler1234	1
5	filler1234	1
6	filler1234	1
7	filler1234	1
8	filler1234	1
9	filler1234	1
select 
a, mid(filler1, 1,10), length(filler1)=length(filler2) 
from t2 ot where a in (select a from t1 it);
a	mid(filler1, 1,10)	length(filler1)=length(filler2)
0	filler1234	1
1	filler1234	1
10	filler1234	1
11	filler1234	1
12	filler1234	1
13	filler1234	1
14	filler1234	1
15	filler1234	1
16	filler1234	1
17	filler1234	1
18	filler1234	1
19	duplicate 	1
19	filler1234	1
2	filler1234	1
3	duplicate 	1
3	filler1234	1
4	filler1234	1
5	filler1234	1
6	filler1234	1
7	filler1234	1
8	filler1234	1
9	filler1234	1
insert into t1 select a+20, 'filler123456', 'filler123456' from t0;
insert into t1 select a+20, 'filler123456', 'filler123456' from t0;
select 
a, mid(filler1, 1,10), length(filler1)=length(filler2) as z 
from t1 ot where a in (select a from t2 it);
a	mid(filler1, 1,10)	z
0	filler1234	1
1	filler1234	1
10	filler1234	1
11	filler1234	1
12	filler1234	1
13	filler1234	1
14	filler1234	1
15	filler1234	1
16	filler1234	1
17	filler1234	1
18	duplicate 	1
18	filler1234	1
19	filler1234	1
2	duplicate 	1
2	filler1234	1
3	filler1234	1
4	filler1234	1
5	filler1234	1
6	filler1234	1
7	filler1234	1
8	filler1234	1
9	filler1234	1
select 
a, mid(filler1, 1,10), length(filler1)=length(filler2) 
from t2 ot where a in (select a from t1 it);
a	mid(filler1, 1,10)	length(filler1)=length(filler2)
0	filler1234	1
1	filler1234	1
10	filler1234	1
11	filler1234	1
12	filler1234	1
13	filler1234	1
14	filler1234	1
15	filler1234	1
16	filler1234	1
17	filler1234	1
18	filler1234	1
19	duplicate 	1
19	filler1234	1
2	filler1234	1
3	duplicate 	1
3	filler1234	1
4	filler1234	1
5	filler1234	1
6	filler1234	1
7	filler1234	1
8	filler1234	1
9	filler1234	1
set @@join_buffer_size = @save_join_buffer_size;
drop table t1, t2;
create table t1 (a int, b int, key(a));
create table t2 (a int, b int, key(a));
create table t3 (a int, b int, key(a));
insert into t1 select a,a from t0;
insert into t2 select a,a from t0;
insert into t3 select a,a from t0;
t2 and t3 must be use 'ref', not 'ALL':
drop table t0, t1,t2,t3;

Test that neither MaterializeLookup strategy for semijoin,
nor subquery materialization is used when BLOBs are involved 
(except when arguments of some functions).

set @prefix_len = 6;
set @blob_len = 16;
set @suffix_len = @blob_len - @prefix_len;
create table t1_16 (a1 blob(16), a2 blob(16));
create table t2_16 (b1 blob(16), b2 blob(16));
create table t3_16 (c1 blob(16), c2 blob(16));
insert into t1_16 values
(concat('1 - 00', repeat('x', @suffix_len)), concat('2 - 00', repeat('x', @suffix_len)));
insert into t1_16 values
(concat('1 - 01', repeat('x', @suffix_len)), concat('2 - 01', repeat('x', @suffix_len)));
insert into t1_16 values
(concat('1 - 02', repeat('x', @suffix_len)), concat('2 - 02', repeat('x', @suffix_len)));
insert into t2_16 values
(concat('1 - 01', repeat('x', @suffix_len)), concat('2 - 01', repeat('x', @suffix_len)));
insert into t2_16 values
(concat('1 - 02', repeat('x', @suffix_len)), concat('2 - 02', repeat('x', @suffix_len)));
insert into t2_16 values
(concat('1 - 03', repeat('x', @suffix_len)), concat('2 - 03', repeat('x', @suffix_len)));
insert into t3_16 values
(concat('1 - 01', repeat('x', @suffix_len)), concat('2 - 01', repeat('x', @suffix_len)));
insert into t3_16 values
(concat('1 - 02', repeat('x', @suffix_len)), concat('2 - 02', repeat('x', @suffix_len)));
insert into t3_16 values
(concat('1 - 03', repeat('x', @suffix_len)), concat('2 - 03', repeat('x', @suffix_len)));
insert into t3_16 values
(concat('1 - 04', repeat('x', @suffix_len)), concat('2 - 04', repeat('x', @suffix_len)));
select left(a1,7), left(a2,7)
from t1_16
where a1 in (select b1 from t2_16 where b1 > '0');
left(a1,7)	left(a2,7)
1 - 01x	2 - 01x
1 - 02x	2 - 02x
select left(a1,7), left(a2,7)
from t1_16
where (a1,a2) in (select b1, b2 from t2_16 where b1 > '0');
left(a1,7)	left(a2,7)
1 - 01x	2 - 01x
1 - 02x	2 - 02x
select left(a1,7), left(a2,7)
from t1_16
where a1 in (select substring(b1,1,16) from t2_16 where b1 > '0');
left(a1,7)	left(a2,7)
1 - 01x	2 - 01x
1 - 02x	2 - 02x
select left(a1,7), left(a2,7)
from t1_16
where a1 in (select group_concat(b1) from t2_16 group by b2);
left(a1,7)	left(a2,7)
1 - 01x	2 - 01x
1 - 02x	2 - 02x
set @@group_concat_max_len = 256;
select left(a1,7), left(a2,7)
from t1_16
where a1 in (select group_concat(b1) from t2_16 group by b2);
left(a1,7)	left(a2,7)
1 - 01x	2 - 01x
1 - 02x	2 - 02x
create table t1 (a1 char(8), a2 char(8));
create table t2 (b1 char(8), b2 char(8));
create table t3 (c1 char(8), c2 char(8));
insert into t1 values ('1 - 00', '2 - 00');
insert into t1 values ('1 - 01', '2 - 01');
insert into t1 values ('1 - 02', '2 - 02');
insert into t2 values ('1 - 01', '2 - 01');
insert into t2 values ('1 - 01', '2 - 01');
insert into t2 values ('1 - 02', '2 - 02');
insert into t2 values ('1 - 02', '2 - 02');
insert into t2 values ('1 - 03', '2 - 03');
insert into t3 values ('1 - 01', '2 - 01');
insert into t3 values ('1 - 02', '2 - 02');
insert into t3 values ('1 - 03', '2 - 03');
insert into t3 values ('1 - 04', '2 - 04');
insert into t3 values ('1 - 05', '2 - 05');
insert into t3 values ('1 - 06', '2 - 06');
insert into t3 values ('1 - 07', '2 - 07');
insert into t3 values ('1 - 08', '2 - 08');
drop table t1_16, t2_16, t3_16, t1, t2, t3;
set @blob_len = 512;
set @suffix_len = @blob_len - @prefix_len;
create table t1_512 (a1 blob(512), a2 blob(512));
create table t2_512 (b1 blob(512), b2 blob(512));
create table t3_512 (c1 blob(512), c2 blob(512));
insert into t1_512 values
(concat('1 - 00', repeat('x', @suffix_len)), concat('2 - 00', repeat('x', @suffix_len)));
insert into t1_512 values
(concat('1 - 01', repeat('x', @suffix_len)), concat('2 - 01', repeat('x', @suffix_len)));
insert into t1_512 values
(concat('1 - 02', repeat('x', @suffix_len)), concat('2 - 02', repeat('x', @suffix_len)));
insert into t2_512 values
(concat('1 - 01', repeat('x', @suffix_len)), concat('2 - 01', repeat('x', @suffix_len)));
insert into t2_512 values
(concat('1 - 02', repeat('x', @suffix_len)), concat('2 - 02', repeat('x', @suffix_len)));
insert into t2_512 values
(concat('1 - 03', repeat('x', @suffix_len)), concat('2 - 03', repeat('x', @suffix_len)));
insert into t3_512 values
(concat('1 - 01', repeat('x', @suffix_len)), concat('2 - 01', repeat('x', @suffix_len)));
insert into t3_512 values
(concat('1 - 02', repeat('x', @suffix_len)), concat('2 - 02', repeat('x', @suffix_len)));
insert into t3_512 values
(concat('1 - 03', repeat('x', @suffix_len)), concat('2 - 03', repeat('x', @suffix_len)));
insert into t3_512 values
(concat('1 - 04', repeat('x', @suffix_len)), concat('2 - 04', repeat('x', @suffix_len)));
select left(a1,7), left(a2,7)
from t1_512
where a1 in (select b1 from t2_512 where b1 > '0');
left(a1,7)	left(a2,7)
1 - 01x	2 - 01x
1 - 02x	2 - 02x
select left(a1,7), left(a2,7)
from t1_512
where (a1,a2) in (select b1, b2 from t2_512 where b1 > '0');
left(a1,7)	left(a2,7)
1 - 01x	2 - 01x
1 - 02x	2 - 02x
select left(a1,7), left(a2,7)
from t1_512
where a1 in (select substring(b1,1,512) from t2_512 where b1 > '0');
left(a1,7)	left(a2,7)
1 - 01x	2 - 01x
1 - 02x	2 - 02x
select left(a1,7), left(a2,7)
from t1_512
where a1 in (select group_concat(b1) from t2_512 group by b2);
left(a1,7)	left(a2,7)
Warnings:
Warning	1260	Row 1 was cut by GROUP_CONCAT()
Warning	1260	Row 2 was cut by GROUP_CONCAT()
Warning	1260	Row 3 was cut by GROUP_CONCAT()
set @@group_concat_max_len = 256;
select left(a1,7), left(a2,7)
from t1_512
where a1 in (select group_concat(b1) from t2_512 group by b2);
left(a1,7)	left(a2,7)
Warnings:
Warning	1260	Row 1 was cut by GROUP_CONCAT()
Warning	1260	Row 2 was cut by GROUP_CONCAT()
Warning	1260	Row 3 was cut by GROUP_CONCAT()
drop table t1_512, t2_512, t3_512;
set @blob_len = 513;
set @suffix_len = @blob_len - @prefix_len;
create table t1_513 (a1 blob(513), a2 blob(513));
create table t2_513 (b1 blob(513), b2 blob(513));
create table t3_513 (c1 blob(513), c2 blob(513));
insert into t1_513 values
(concat('1 - 00', repeat('x', @suffix_len)), concat('2 - 00', repeat('x', @suffix_len)));
insert into t1_513 values
(concat('1 - 01', repeat('x', @suffix_len)), concat('2 - 01', repeat('x', @suffix_len)));
insert into t1_513 values
(concat('1 - 02', repeat('x', @suffix_len)), concat('2 - 02', repeat('x', @suffix_len)));
insert into t2_513 values
(concat('1 - 01', repeat('x', @suffix_len)), concat('2 - 01', repeat('x', @suffix_len)));
insert into t2_513 values
(concat('1 - 02', repeat('x', @suffix_len)), concat('2 - 02', repeat('x', @suffix_len)));
insert into t2_513 values
(concat('1 - 03', repeat('x', @suffix_len)), concat('2 - 03', repeat('x', @suffix_len)));
insert into t3_513 values
(concat('1 - 01', repeat('x', @suffix_len)), concat('2 - 01', repeat('x', @suffix_len)));
insert into t3_513 values
(concat('1 - 02', repeat('x', @suffix_len)), concat('2 - 02', repeat('x', @suffix_len)));
insert into t3_513 values
(concat('1 - 03', repeat('x', @suffix_len)), concat('2 - 03', repeat('x', @suffix_len)));
insert into t3_513 values
(concat('1 - 04', repeat('x', @suffix_len)), concat('2 - 04', repeat('x', @suffix_len)));
select left(a1,7), left(a2,7)
from t1_513
where a1 in (select b1 from t2_513 where b1 > '0');
left(a1,7)	left(a2,7)
1 - 01x	2 - 01x
1 - 02x	2 - 02x
select left(a1,7), left(a2,7)
from t1_513
where (a1,a2) in (select b1, b2 from t2_513 where b1 > '0');
left(a1,7)	left(a2,7)
1 - 01x	2 - 01x
1 - 02x	2 - 02x
select left(a1,7), left(a2,7)
from t1_513
where a1 in (select substring(b1,1,513) from t2_513 where b1 > '0');
left(a1,7)	left(a2,7)
1 - 01x	2 - 01x
1 - 02x	2 - 02x
select left(a1,7), left(a2,7)
from t1_513
where a1 in (select group_concat(b1) from t2_513 group by b2);
left(a1,7)	left(a2,7)
Warnings:
Warning	1260	Row 1 was cut by GROUP_CONCAT()
Warning	1260	Row 2 was cut by GROUP_CONCAT()
Warning	1260	Row 3 was cut by GROUP_CONCAT()
drop table t1_513, t2_513, t3_513;
set @blob_len = 1024;
set @suffix_len = @blob_len - @prefix_len;
create table t1_1024 (a1 blob(1024), a2 blob(1024));
create table t2_1024 (b1 blob(1024), b2 blob(1024));
create table t3_1024 (c1 blob(1024), c2 blob(1024));
insert into t1_1024 values
(concat('1 - 00', repeat('x', @suffix_len)), concat('2 - 00', repeat('x', @suffix_len)));
insert into t1_1024 values
(concat('1 - 01', repeat('x', @suffix_len)), concat('2 - 01', repeat('x', @suffix_len)));
insert into t1_1024 values
(concat('1 - 02', repeat('x', @suffix_len)), concat('2 - 02', repeat('x', @suffix_len)));
insert into t2_1024 values
(concat('1 - 01', repeat('x', @suffix_len)), concat('2 - 01', repeat('x', @suffix_len)));
insert into t2_1024 values
(concat('1 - 02', repeat('x', @suffix_len)), concat('2 - 02', repeat('x', @suffix_len)));
insert into t2_1024 values
(concat('1 - 03', repeat('x', @suffix_len)), concat('2 - 03', repeat('x', @suffix_len)));
insert into t3_1024 values
(concat('1 - 01', repeat('x', @suffix_len)), concat('2 - 01', repeat('x', @suffix_len)));
insert into t3_1024 values
(concat('1 - 02', repeat('x', @suffix_len)), concat('2 - 02', repeat('x', @suffix_len)));
insert into t3_1024 values
(concat('1 - 03', repeat('x', @suffix_len)), concat('2 - 03', repeat('x', @suffix_len)));
insert into t3_1024 values
(concat('1 - 04', repeat('x', @suffix_len)), concat('2 - 04', repeat('x', @suffix_len)));
select left(a1,7), left(a2,7)
from t1_1024
where a1 in (select b1 from t2_1024 where b1 > '0');
left(a1,7)	left(a2,7)
1 - 01x	2 - 01x
1 - 02x	2 - 02x
select left(a1,7), left(a2,7)
from t1_1024
where (a1,a2) in (select b1, b2 from t2_1024 where b1 > '0');
left(a1,7)	left(a2,7)
1 - 01x	2 - 01x
1 - 02x	2 - 02x
select left(a1,7), left(a2,7)
from t1_1024
where a1 in (select substring(b1,1,1024) from t2_1024 where b1 > '0');
left(a1,7)	left(a2,7)
1 - 01x	2 - 01x
1 - 02x	2 - 02x
select left(a1,7), left(a2,7)
from t1_1024
where a1 in (select group_concat(b1) from t2_1024 group by b2);
left(a1,7)	left(a2,7)
Warnings:
Warning	1260	Row 1 was cut by GROUP_CONCAT()
Warning	1260	Row 2 was cut by GROUP_CONCAT()
Warning	1260	Row 3 was cut by GROUP_CONCAT()
set @@group_concat_max_len = 256;
select left(a1,7), left(a2,7)
from t1_1024
where a1 in (select group_concat(b1) from t2_1024 group by b2);
left(a1,7)	left(a2,7)
Warnings:
Warning	1260	Row 1 was cut by GROUP_CONCAT()
Warning	1260	Row 2 was cut by GROUP_CONCAT()
Warning	1260	Row 3 was cut by GROUP_CONCAT()
drop table t1_1024, t2_1024, t3_1024;
set @blob_len = 1025;
set @suffix_len = @blob_len - @prefix_len;
create table t1_1025 (a1 blob(1025), a2 blob(1025));
create table t2_1025 (b1 blob(1025), b2 blob(1025));
create table t3_1025 (c1 blob(1025), c2 blob(1025));
insert into t1_1025 values
(concat('1 - 00', repeat('x', @suffix_len)), concat('2 - 00', repeat('x', @suffix_len)));
insert into t1_1025 values
(concat('1 - 01', repeat('x', @suffix_len)), concat('2 - 01', repeat('x', @suffix_len)));
insert into t1_1025 values
(concat('1 - 02', repeat('x', @suffix_len)), concat('2 - 02', repeat('x', @suffix_len)));
insert into t2_1025 values
(concat('1 - 01', repeat('x', @suffix_len)), concat('2 - 01', repeat('x', @suffix_len)));
insert into t2_1025 values
(concat('1 - 02', repeat('x', @suffix_len)), concat('2 - 02', repeat('x', @suffix_len)));
insert into t2_1025 values
(concat('1 - 03', repeat('x', @suffix_len)), concat('2 - 03', repeat('x', @suffix_len)));
insert into t3_1025 values
(concat('1 - 01', repeat('x', @suffix_len)), concat('2 - 01', repeat('x', @suffix_len)));
insert into t3_1025 values
(concat('1 - 02', repeat('x', @suffix_len)), concat('2 - 02', repeat('x', @suffix_len)));
insert into t3_1025 values
(concat('1 - 03', repeat('x', @suffix_len)), concat('2 - 03', repeat('x', @suffix_len)));
insert into t3_1025 values
(concat('1 - 04', repeat('x', @suffix_len)), concat('2 - 04', repeat('x', @suffix_len)));
select left(a1,7), left(a2,7)
from t1_1025
where a1 in (select b1 from t2_1025 where b1 > '0');
left(a1,7)	left(a2,7)
1 - 01x	2 - 01x
1 - 02x	2 - 02x
select left(a1,7), left(a2,7)
from t1_1025
where (a1,a2) in (select b1, b2 from t2_1025 where b1 > '0');
left(a1,7)	left(a2,7)
1 - 01x	2 - 01x
1 - 02x	2 - 02x
select left(a1,7), left(a2,7)
from t1_1025
where a1 in (select substring(b1,1,1025) from t2_1025 where b1 > '0');
left(a1,7)	left(a2,7)
1 - 01x	2 - 01x
1 - 02x	2 - 02x
select left(a1,7), left(a2,7)
from t1_1025
where a1 in (select group_concat(b1) from t2_1025 group by b2);
left(a1,7)	left(a2,7)
Warnings:
Warning	1260	Row 1 was cut by GROUP_CONCAT()
Warning	1260	Row 2 was cut by GROUP_CONCAT()
Warning	1260	Row 3 was cut by GROUP_CONCAT()
set @@group_concat_max_len = 256;
select left(a1,7), left(a2,7)
from t1_1025
where a1 in (select group_concat(b1) from t2_1025 group by b2);
left(a1,7)	left(a2,7)
Warnings:
Warning	1260	Row 1 was cut by GROUP_CONCAT()
Warning	1260	Row 2 was cut by GROUP_CONCAT()
Warning	1260	Row 3 was cut by GROUP_CONCAT()
drop table t1_1025, t2_1025, t3_1025;
#
# WL#5561: Enable semi join transformation with outer join.
#
CREATE TABLE ot1(a INT);
CREATE TABLE ot2(a INT);
CREATE TABLE ot3(a INT);
CREATE TABLE it1(a INT);
CREATE TABLE it2(a INT);
CREATE TABLE it3(a INT);
INSERT INTO ot1 VALUES(0),(1),(2),(3),(4),(5),(6),(7);
INSERT INTO ot2 VALUES(0),(2),(4),(6);
INSERT INTO ot3 VALUES(0),(3),(6);
INSERT INTO it1 VALUES(0),(1),(2),(3),(4),(5),(6),(7);
INSERT INTO it2 VALUES(0),(2),(4),(6);
INSERT INTO it3 VALUES(0),(3),(6);
# Test cases, Subquery Pattern 1
# Example SQ1.1:
SELECT *
FROM ot1 LEFT JOIN ot2 ON ot1.a=ot2.a
WHERE ot1.a IN (SELECT a FROM it3);
a	a
0	0
3	NULL
6	6
# Example SQ1.2:
SELECT *
FROM ot1 LEFT JOIN ot2 ON ot1.a=ot2.a
WHERE COALESCE(ot2.a,0) IN (SELECT a FROM it3);
a	a
0	0
1	NULL
3	NULL
5	NULL
6	6
7	NULL
# Example SQ1.3:
SELECT *
FROM ot1 LEFT JOIN ot2 ON ot1.a=ot2.a
WHERE (ot1.a,ot2.a) IN (SELECT a, a FROM it3);
a	a
0	0
6	6
# More test cases
SELECT *
FROM ot1 LEFT JOIN ot2 ON ot1.a=ot2.a+0
WHERE ot1.a IN (SELECT a FROM it3);
a	a
0	0
3	NULL
6	6
SELECT *
FROM ot1 LEFT JOIN ot2 ON ot1.a=ot2.a+0
WHERE ot1.a IN (SELECT a+0 FROM it3);
a	a
0	0
3	NULL
6	6
SELECT *
FROM ot1 LEFT JOIN ot2 ON ot1.a=ot2.a+0
WHERE COALESCE(ot2.a,0) IN (SELECT a FROM it3);
a	a
0	0
1	NULL
3	NULL
5	NULL
6	6
7	NULL
SELECT *
FROM ot1 LEFT JOIN ot2 ON ot1.a=ot2.a
WHERE COALESCE(ot2.a,0) IN (SELECT a+0 FROM it3);
a	a
0	0
1	NULL
3	NULL
5	NULL
6	6
7	NULL
SELECT *
FROM ot1 LEFT JOIN ot2 ON ot1.a=ot2.a+0
WHERE (ot1.a,ot2.a) IN (SELECT a, a FROM it3);
a	a
0	0
6	6
SELECT *
FROM ot1 LEFT JOIN ot2 ON ot1.a=ot2.a
LEFT JOIN ot3 ON ot1.a=ot3.a
WHERE ot1.a IN (SELECT a FROM it3);
a	a	a
0	0	0
3	NULL	3
6	6	6
SELECT *
FROM ot1 LEFT JOIN ot2 ON ot1.a=ot2.a
LEFT JOIN ot3 ON ot1.a=ot3.a
WHERE COALESCE(ot2.a,0) IN (SELECT a FROM it3);
a	a	a
0	0	0
1	NULL	NULL
3	NULL	3
5	NULL	NULL
6	6	6
7	NULL	NULL
SELECT *
FROM ot1 LEFT JOIN ot2 ON ot1.a=ot2.a
LEFT JOIN ot3 ON ot1.a=ot3.a
WHERE COALESCE(ot3.a,0) IN (SELECT a FROM it3);
a	a	a
0	0	0
1	NULL	NULL
2	2	NULL
3	NULL	3
4	4	NULL
5	NULL	NULL
6	6	6
7	NULL	NULL
SELECT *
FROM ot1 LEFT JOIN ot2 ON ot1.a=ot2.a
LEFT JOIN ot3 ON ot2.a=ot3.a
WHERE ot1.a IN (SELECT a FROM it3);
a	a	a
0	0	0
3	NULL	NULL
6	6	6
SELECT *
FROM ot1 LEFT JOIN ot2 ON ot1.a=ot2.a
LEFT JOIN ot3 ON ot2.a=ot3.a
WHERE COALESCE(ot2.a,0) IN (SELECT a FROM it3);
a	a	a
0	0	0
1	NULL	NULL
3	NULL	NULL
5	NULL	NULL
6	6	6
7	NULL	NULL
SELECT *
FROM ot1 LEFT JOIN ot2 ON ot1.a=ot2.a
LEFT JOIN ot3 ON ot2.a=ot3.a
WHERE COALESCE(ot3.a,0) IN (SELECT a FROM it3);
a	a	a
0	0	0
1	NULL	NULL
2	2	NULL
3	NULL	NULL
4	4	NULL
5	NULL	NULL
6	6	6
7	NULL	NULL
# Test cases, Subquery Pattern 2
# Example SQ2.1:
SELECT *
FROM ot1 JOIN ot2 ON ot1.a=ot2.a AND ot1.a IN (SELECT a FROM it3);
a	a
0	0
6	6
# Example SQ2.2:
SELECT *
FROM ot1 JOIN ot2 ON ot1.a=ot2.a AND ot1.a IN (SELECT a FROM it2)
AND ot2.a IN (SELECT a FROM it3);
a	a
0	0
6	6
# More test cases
SELECT *
FROM ot1 JOIN ot2 ON ot1.a=ot2.a+0 AND ot1.a IN (SELECT a FROM it3);
a	a
0	0
6	6
SELECT *
FROM ot1 JOIN ot2 ON ot1.a=ot2.a AND ot1.a IN (SELECT a+0 FROM it3);
a	a
0	0
6	6
SELECT *
FROM ot1 JOIN ot2 ON ot1.a=ot2.a+0 AND ot2.a IN (SELECT a FROM it3);
a	a
0	0
6	6
SELECT *
FROM ot1 JOIN ot2 ON ot1.a=ot2.a AND ot2.a IN (SELECT a+0 FROM it3);
a	a
0	0
6	6
SELECT *
FROM ot1 JOIN ot2 ON ot1.a=ot2.a AND ot1.a IN (SELECT a+0 FROM it2)
AND ot2.a IN (SELECT a+0 FROM it3);
a	a
0	0
6	6
SELECT *
FROM ot1 JOIN ot2 ON ot1.a=ot2.a AND ot1.a IN (SELECT a FROM it3)
JOIN ot3 ON ot2.a=ot3.a AND ot3.a IN (SELECT a FROM it3);
a	a	a
0	0	0
6	6	6
# Test cases, Subquery Pattern 3
# Example SQ3.1:
SELECT *
FROM ot1 LEFT JOIN ot2 ON ot1.a=ot2.a AND ot1.a IN (SELECT a FROM it3);
a	a
0	0
1	NULL
2	NULL
3	NULL
4	NULL
5	NULL
6	6
7	NULL
# Example SQ3.2:
SELECT *
FROM ot1 LEFT JOIN ot2 ON ot1.a=ot2.a AND ot2.a IN (SELECT a FROM it2);
a	a
0	0
1	NULL
2	2
3	NULL
4	4
5	NULL
6	6
7	NULL
# Example SQ3.3
SELECT *
FROM ot1 LEFT JOIN ot2 ON ot1.a=ot2.a AND ot1.a IN (SELECT a FROM it1)
AND ot2.a IN (SELECT a FROM it2);
a	a
0	0
1	NULL
2	2
3	NULL
4	4
5	NULL
6	6
7	NULL
# Example SQ3.4
SELECT *
FROM ot1 LEFT JOIN ot2 ON ot1.a=ot2.a AND
(ot1.a, ot2.a) IN (SELECT it1.a, it2.a
FROM it1 JOIN it2 ON it1.a=it2.a);
a	a
0	0
1	NULL
2	2
3	NULL
4	4
5	NULL
6	6
7	NULL
# More test cases
SELECT *
FROM ot1 LEFT JOIN ot2 ON ot1.a=ot2.a+0 AND ot1.a IN (SELECT a FROM it3);
a	a
0	0
1	NULL
2	NULL
3	NULL
4	NULL
5	NULL
6	6
7	NULL
SELECT *
FROM ot1 LEFT JOIN ot2 ON ot1.a=ot2.a AND ot1.a IN (SELECT a+0 FROM it3);
a	a
0	0
1	NULL
2	NULL
3	NULL
4	NULL
5	NULL
6	6
7	NULL
SELECT *
FROM ot1 LEFT JOIN ot2 ON ot1.a=ot2.a+0 AND ot2.a IN (SELECT a FROM it2);
a	a
0	0
1	NULL
2	2
3	NULL
4	4
5	NULL
6	6
7	NULL
SELECT *
FROM ot1 LEFT JOIN ot2 ON ot1.a=ot2.a AND ot2.a IN (SELECT a+0 FROM it2);
a	a
0	0
1	NULL
2	2
3	NULL
4	4
5	NULL
6	6
7	NULL
SELECT *
FROM ot1 LEFT JOIN ot2 ON ot1.a=ot2.a+0 AND ot1.a IN (SELECT a+0 FROM it1)
AND ot2.a IN (SELECT a+0 FROM it2);
a	a
0	0
1	NULL
2	2
3	NULL
4	4
5	NULL
6	6
7	NULL
SELECT *
FROM ot1 LEFT JOIN ot2 ON ot1.a=ot2.a+0 AND
(ot1.a, ot2.a) IN (SELECT it1.a+0, it2.a+0
FROM it1 JOIN it2 ON it1.a=it2.a);
a	a
0	0
1	NULL
2	2
3	NULL
4	4
5	NULL
6	6
7	NULL
SELECT *
FROM ot1 LEFT JOIN ot2 ON ot1.a=ot2.a AND ot1.a IN (SELECT a FROM it3)
LEFT JOIN ot3 ON ot2.a=ot3.a AND ot3.a IN (SELECT a FROM it3);
a	a	a
0	0	0
1	NULL	NULL
2	NULL	NULL
3	NULL	NULL
4	NULL	NULL
5	NULL	NULL
6	6	6
7	NULL	NULL
SELECT *
FROM ot1 LEFT JOIN ot2 ON ot1.a=ot2.a+0 AND ot1.a IN (SELECT a FROM it3)
LEFT JOIN ot3 ON ot2.a=ot3.a+0 AND ot3.a IN (SELECT a FROM it3);
a	a	a
0	0	0
1	NULL	NULL
2	NULL	NULL
3	NULL	NULL
4	NULL	NULL
5	NULL	NULL
6	6	6
7	NULL	NULL
# Test cases, Subquery Pattern 4
# Example SQ4.1:
SELECT *
FROM   ot1
LEFT JOIN
(ot2 JOIN ot3 ON ot2.a=ot3.a)
ON ot1.a=ot2.a AND ot1.a IN (SELECT a FROM it1);
a	a	a
0	0	0
1	NULL	NULL
2	NULL	NULL
3	NULL	NULL
4	NULL	NULL
5	NULL	NULL
6	6	6
7	NULL	NULL
# Example SQ4.2:
SELECT *
FROM   ot1
JOIN
(ot2 JOIN ot3 ON ot2.a=ot3.a)
ON ot1.a=ot2.a AND ot1.a IN (SELECT a FROM it1);
a	a	a
0	0	0
6	6	6
# Example SQ4.3:
SELECT *
FROM   ot1
JOIN
(ot2 LEFT JOIN ot3 ON ot2.a=ot3.a)
ON ot1.a=ot2.a AND ot1.a IN (SELECT a FROM it1);
a	a	a
0	0	0
2	2	NULL
4	4	NULL
6	6	6
# Example SQ4.4:
SELECT *
FROM   ot1
LEFT JOIN
(ot2 LEFT JOIN ot3 ON ot2.a=ot3.a)
ON ot1.a=ot2.a AND ot1.a IN (SELECT a FROM it1);
a	a	a
0	0	0
1	NULL	NULL
2	2	NULL
3	NULL	NULL
4	4	NULL
5	NULL	NULL
6	6	6
7	NULL	NULL
# More test cases
SELECT *
FROM   ot1
LEFT JOIN
(ot2 JOIN ot3 ON ot2.a=ot3.a+0)
ON ot1.a=ot2.a AND ot1.a IN (SELECT a FROM it1);
a	a	a
0	0	0
1	NULL	NULL
2	NULL	NULL
3	NULL	NULL
4	NULL	NULL
5	NULL	NULL
6	6	6
7	NULL	NULL
SELECT *
FROM   ot1
LEFT JOIN
(ot2 JOIN ot3 ON ot2.a=ot3.a)
ON ot1.a=ot2.a+0 AND ot1.a IN (SELECT a FROM it1);
a	a	a
0	0	0
1	NULL	NULL
2	NULL	NULL
3	NULL	NULL
4	NULL	NULL
5	NULL	NULL
6	6	6
7	NULL	NULL
SELECT *
FROM   ot1
LEFT JOIN
(ot2 JOIN ot3 ON ot2.a=ot3.a)
ON ot1.a=ot2.a AND ot1.a IN (SELECT a+0 FROM it1);
a	a	a
0	0	0
1	NULL	NULL
2	NULL	NULL
3	NULL	NULL
4	NULL	NULL
5	NULL	NULL
6	6	6
7	NULL	NULL
SELECT *
FROM   ot1
JOIN
(ot2 JOIN ot3 ON ot2.a=ot3.a+0)
ON ot1.a=ot2.a AND ot1.a IN (SELECT a FROM it1);
a	a	a
0	0	0
6	6	6
SELECT *
FROM   ot1
JOIN
(ot2 JOIN ot3 ON ot2.a=ot3.a)
ON ot1.a=ot2.a+0 AND ot1.a IN (SELECT a FROM it1);
a	a	a
0	0	0
6	6	6
SELECT *
FROM   ot1
JOIN
(ot2 JOIN ot3 ON ot2.a=ot3.a)
ON ot1.a=ot2.a AND ot1.a IN (SELECT a+0 FROM it1);
a	a	a
0	0	0
6	6	6
SELECT *
FROM   ot1
JOIN
(ot2 LEFT JOIN ot3 ON ot2.a=ot3.a+0)
ON ot1.a=ot2.a AND ot1.a IN (SELECT a FROM it1);
a	a	a
0	0	0
2	2	NULL
4	4	NULL
6	6	6
SELECT *
FROM   ot1
JOIN
(ot2 LEFT JOIN ot3 ON ot2.a=ot3.a)
ON ot1.a=ot2.a+0 AND ot1.a IN (SELECT a FROM it1);
a	a	a
0	0	0
2	2	NULL
4	4	NULL
6	6	6
SELECT *
FROM   ot1
JOIN
(ot2 LEFT JOIN ot3 ON ot2.a=ot3.a)
ON ot1.a=ot2.a AND ot1.a IN (SELECT a+0 FROM it1);
a	a	a
0	0	0
2	2	NULL
4	4	NULL
6	6	6
SELECT *
FROM   ot1
LEFT JOIN
(ot2 LEFT JOIN ot3 ON ot2.a=ot3.a+0)
ON ot1.a=ot2.a AND ot1.a IN (SELECT a FROM it1);
a	a	a
0	0	0
1	NULL	NULL
2	2	NULL
3	NULL	NULL
4	4	NULL
5	NULL	NULL
6	6	6
7	NULL	NULL
SELECT *
FROM   ot1
LEFT JOIN
(ot2 LEFT JOIN ot3 ON ot2.a=ot3.a)
ON ot1.a=ot2.a+0 AND ot1.a IN (SELECT a FROM it1);
a	a	a
0	0	0
1	NULL	NULL
2	2	NULL
3	NULL	NULL
4	4	NULL
5	NULL	NULL
6	6	6
7	NULL	NULL
SELECT *
FROM   ot1
LEFT JOIN
(ot2 LEFT JOIN ot3 ON ot2.a=ot3.a)
ON ot1.a=ot2.a AND ot1.a IN (SELECT a+0 FROM it1);
a	a	a
0	0	0
1	NULL	NULL
2	2	NULL
3	NULL	NULL
4	4	NULL
5	NULL	NULL
6	6	6
7	NULL	NULL
SELECT *
FROM   ot1
LEFT JOIN
(ot2 LEFT JOIN ot3 ON ot2.a=ot3.a)
ON ot1.a=ot2.a AND ot1.a IN (SELECT a FROM it1)
LEFT JOIN
ot1 AS ot4
ON ot2.a=ot4.a;
a	a	a	a
0	0	0	0
1	NULL	NULL	NULL
2	2	NULL	2
3	NULL	NULL	NULL
4	4	NULL	4
5	NULL	NULL	NULL
6	6	6	6
7	NULL	NULL	NULL
SELECT *
FROM   ot1
LEFT JOIN
(ot2 LEFT JOIN ot3 ON ot2.a=ot3.a
LEFT JOIN ot1 AS ot4 ON ot3.a=ot4.a)
ON ot1.a=ot2.a AND ot1.a IN (SELECT a FROM it1);
a	a	a	a
0	0	0	0
1	NULL	NULL	NULL
2	2	NULL	NULL
3	NULL	NULL	NULL
4	4	NULL	NULL
5	NULL	NULL	NULL
6	6	6	6
7	NULL	NULL	NULL
DROP TABLE ot1,ot2,ot3,it1,it2,it3;
CREATE TABLE t (
a INTEGER DEFAULT NULL
) ENGINE=Sequoiadb;
INSERT INTO t VALUES (1);
CREATE TABLE t2 (
a INTEGER DEFAULT NULL
) ENGINE=Sequoiadb;
INSERT INTO t2 VALUES (1),(1);
CREATE TABLE t4 (
a INTEGER DEFAULT NULL
) ENGINE=Sequoiadb;
INSERT INTO t4 VALUES (1),(1);
CREATE TABLE v (
a INTEGER DEFAULT NULL
) ENGINE=Sequoiadb;
INSERT INTO v VALUES (1),(1);
SELECT *
FROM t AS t1
LEFT JOIN
(t2
LEFT JOIN t AS t3
ON t3.a IN (SELECT a FROM t AS it)
JOIN t4
ON t4.a=100
)
ON TRUE
WHERE t1.a IN (SELECT * FROM v AS it2);
a	a	a	a
1	NULL	NULL	NULL
DROP TABLE t,t2,t4,v;
# End of WL#5561
#
# Bug#48868: Left outer join in subquery causes segmentation fault in
#            make_join_select.
#
CREATE TABLE t1 (i INTEGER);
INSERT INTO t1 VALUES (1);
INSERT INTO t1 VALUES (2);
CREATE TABLE t2 (i INTEGER);
INSERT INTO t2 VALUES(1);
CREATE TABLE t3 (i INTEGER);
INSERT INTO t3 VALUES (1);
INSERT INTO t3 VALUES (2);
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t2.i FROM t2 LEFT JOIN t3 ON t2.i=t3.i);
i
1
DROP TABLE t1, t2, t3;

Bug#37899: Wrongly checked optimization prerequisite caused failed
assertion.

CREATE TABLE t1 (
`pk` int(11),
`varchar_nokey` varchar(5)
);
INSERT INTO t1 VALUES
(1,'qk'),(2,'j'),(3,'aew');
SELECT *
FROM t1
WHERE varchar_nokey IN (
SELECT
varchar_nokey
FROM
t1
) XOR pk = 30;
pk	varchar_nokey
1	qk
2	j
3	aew
drop table t1;
#
# BUG#41842: Semi-join materialization strategy crashes when the upper query has HAVING
#

Bug#46797 "Crash in fix_semijoin_strategies_for_picked_join_order 
with semijoin=on"

CREATE TABLE t1 (
varchar_key varchar(1) DEFAULT NULL,
KEY varchar_key (varchar_key)
);
CREATE TABLE t2 (
varchar_key varchar(1) DEFAULT NULL,
KEY varchar_key (varchar_key)
);
INSERT INTO t2 VALUES
(NULL),(NULL),(NULL),(NULL),('a'),('a'),('a'),('b'),('b'),('b'),('b'),('c'),
('c'),('c'),('c'),('c'),('c'),('c'),('d'),('d'),('d'),('d'),('d'),('d'),('e'),
('e'),('e'),('e'),('e'),('e'),('f'),('f'),('f'),('g'),('g'),('h'),('h'),('h'),
('h'),('i'),('j'),('j'),('j'),('k'),('k'),('l'),('l'),('m'),('m'),('m'),('m'),
('n'),('n'),('n'),('o'),('o'),('o'),('p'),('p'),('p'),('q'),('q'),('q'),('r'),
('r'),('r'),('r'),('s'),('s'),('s'),('s'),('t'),('t'),('t'),('t'),('u'),('u'),
('u'),('u'),('v'),('v'),('v'),('v'),('w'),('w'),('w'),('w'),('w'),('w'),('x'),
('x'),('x'),('y'),('y'),('y'),('y'),('z'),('z'),('z'),('z');
CREATE TABLE t3 (
varchar_key varchar(1) DEFAULT NULL,
KEY varchar_key (varchar_key)
) ENGINE=Sequoiadb DEFAULT CHARSET=latin1;
INSERT INTO t3 VALUES
(NULL),('c'),('d'),('e'),('f'),('h'),('j'),('k'),('k'),('m'),('m'),('m'),
('n'),('o'),('r'),('t'),('t'),('u'),('w'),('y');
SELECT varchar_key FROM t3 
WHERE (SELECT varchar_key FROM t3 
WHERE (varchar_key,varchar_key) 
IN (SELECT t1.varchar_key, t2 .varchar_key 
FROM t1 RIGHT JOIN t2 ON t1.varchar_key  
)  
);
varchar_key
DROP TABLE t1, t2, t3;
#
# Bug#46556 Returning incorrect, empty results for some IN subqueries 
#           w/semijoin=on
#
CREATE TABLE t0 (
pk INTEGER,
vkey VARCHAR(1),
vnokey VARCHAR(1),
PRIMARY KEY (pk),
KEY vkey(vkey)
);
INSERT INTO t0 
VALUES (1,'g','g'), (2,'v','v'), (3,'t','t'), (4,'u','u'), (5,'n','n');
SELECT vkey FROM t0 WHERE pk IN 
(SELECT t1.pk FROM t0 t1 JOIN t0 t2 ON t2.vkey = t1.vnokey);
vkey
g
n
t
u
v
DROP TABLE t0;
# End of bug#46556

Bug#48834: Procedure with view + subquery + semijoin=on 
crashes on second call.

CREATE TABLE t1 ( t1field integer, primary key (t1field));
CREATE TABLE t2 ( t2field integer, primary key (t2field));
CREATE VIEW v1 AS 
SELECT t1field as v1field
FROM t1 A 
WHERE A.t1field IN (SELECT t1field FROM t2 );
CREATE VIEW v2 AS 
SELECT t2field as v2field
FROM t2 A 
WHERE A.t2field IN (SELECT t2field FROM t2 );
CREATE PROCEDURE p1 () 
BEGIN 
SELECT v1field
FROM v1 
WHERE v1field IN ( SELECT v2field as vf_inner FROM v2 );
END|
INSERT INTO t1 VALUES (1),(2),(3);
INSERT INTO t2 VALUES (2),(3),(4);
CALL p1;
v1field
2
3
CALL p1;
v1field
2
3
DROP TABLE t1,t2;
DROP VIEW v1,v2;
DROP PROCEDURE p1;
# End of BUG#48834
#
# Bug#46692 "Crash occurring on queries with nested FROM subqueries 
# using materialization."
#
CREATE TABLE t1 (
pk INTEGER PRIMARY KEY,
int_key INTEGER,
KEY int_key(int_key)
);
INSERT INTO t1 VALUES (10,186),(11,NULL),(12,2),(13,3),(14,0),(15,133),(16,1);
CREATE TABLE t2 (
pk INTEGER PRIMARY KEY,
int_key INTEGER,
KEY int_key(int_key)
);
INSERT INTO t2 VALUES (1,7),(2,2);
SELECT * FROM t1 WHERE (140, 4) IN 
(SELECT t2.int_key, t2 .pk FROM t2 STRAIGHT_JOIN t1 ON t2.int_key);
pk	int_key
DROP TABLE t1, t2;
#
# Bug#42353 "SELECT ... WHERE oe IN (SELECT w/ LEFT JOIN) query
# causes crash."
#
#
# Bug#46550 Azalea returning duplicate results for some IN subqueries
# w/ semijoin=on
#
DROP TABLE IF EXISTS t0, t1, t2;
CREATE TABLE t0 (
int_key int(11) DEFAULT NULL,
varchar_key varchar(1) DEFAULT NULL,
varchar_nokey varchar(1) DEFAULT NULL,
KEY int_key (int_key),
KEY varchar_key (varchar_key,int_key)
);
INSERT INTO t0 VALUES
(1,'m','m'),
(40,'h','h'),
(1,'r','r'),
(1,'h','h'),
(9,'x','x'),
(NULL,'q','q'),
(NULL,'k','k'),
(7,'l','l'),
(182,'k','k'),
(202,'a','a'),
(7,'x','x'),
(6,'j','j'),
(119,'z','z'),
(4,'d','d'),
(5,'h','h'),
(1,'u','u'),
(3,'q','q'),
(7,'a','a'),
(3,'e','e'),
(6,'l','l');
CREATE TABLE t1 (
int_key int(11) DEFAULT NULL,
varchar_key varchar(1) DEFAULT NULL,
varchar_nokey varchar(1) DEFAULT NULL,
KEY int_key (int_key),
KEY varchar_key (varchar_key,int_key)
);
INSERT INTO t1 VALUES (7,NULL,NULL),(4,'x','x');
CREATE TABLE t2 (
int_key int(11) DEFAULT NULL,
varchar_key varchar(1) DEFAULT NULL,
varchar_nokey varchar(1) DEFAULT NULL,
KEY int_key (int_key),
KEY varchar_key (varchar_key,int_key)
);
INSERT INTO t2 VALUES (123,NULL,NULL);
SELECT int_key  
FROM t0  
WHERE varchar_nokey  IN (  
SELECT t1 .varchar_key  from t1
);
int_key
9
7
DROP TABLE t0, t1, t2;
# End of bug#46550

Bug #48073 Subquery on char columns from view crashes Mysql

DROP TABLE IF EXISTS t1, t2;
DROP VIEW IF EXISTS v1;
CREATE TABLE t1 (
city VARCHAR(50) NOT NULL,
country_id SMALLINT UNSIGNED NOT NULL
);
INSERT INTO t1 VALUES 
('Batna',2),
('Bchar',2),
('Skikda',2),
('Tafuna',3),
('Algeria',2) ;
CREATE TABLE t2 (
country_id SMALLINT UNSIGNED NOT NULL,
country VARCHAR(50) NOT NULL
);
INSERT INTO t2 VALUES
(2,'Algeria'),
(3,'American Samoa') ;
CREATE VIEW v1 AS 
SELECT country_id, country 
FROM t2
WHERE LEFT(country,1) = "A" 
;
SELECT city, country_id
FROM t1
WHERE city IN (
SELECT country 
FROM t2
WHERE LEFT(country, 1) = "A" 
);
city	country_id
Algeria	2
SELECT city, country_id
FROM t1
WHERE city IN (
SELECT country 
FROM v1
);
city	country_id
Algeria	2
drop table t1, t2;
drop view v1;
# End of bug#48073

Bug#49097 subquery with view generates wrong result with
non-prepared statement

DROP TABLE IF EXISTS t1, t2;
DROP VIEW IF EXISTS v1;
CREATE TABLE t1 (
city VARCHAR(50) NOT NULL,
country_id SMALLINT UNSIGNED NOT NULL
);
INSERT INTO t1 VALUES 
('Batna',2),
('Bchar',2),
('Skikda',2),
('Tafuna',3),
('Algeria',2) ;
CREATE TABLE t2 (
country_id SMALLINT UNSIGNED NOT NULL,
country VARCHAR(50) NOT NULL
);
INSERT INTO t2 VALUES
(2,'Algeria'),
(3,'XAmerican Samoa') ;
CREATE VIEW v1 AS 
SELECT country_id, country 
FROM t2
WHERE LEFT(country,1) = "A" 
;
SELECT city, country_id
FROM t1
WHERE country_id IN (
SELECT country_id 
FROM t2
WHERE LEFT(country,1) = "A" 
);
city	country_id
Batna	2
Bchar	2
Skikda	2
Algeria	2
SELECT city, country_id
FROM t1
WHERE country_id IN (
SELECT country_id 
FROM v1
);
city	country_id
Batna	2
Bchar	2
Skikda	2
Algeria	2
PREPARE stmt FROM
"
SELECT city, country_id
FROM t1
WHERE country_id IN (
  SELECT country_id 
  FROM v1
);
";
execute stmt;
city	country_id
Batna	2
Bchar	2
Skikda	2
Algeria	2
deallocate prepare stmt;
drop table t1, t2;
drop view v1;
# End of Bug#49097
# 
# Bug#49198 Wrong result for second call of procedure
#           with view in subselect.
# 
CREATE TABLE t1 (t1field integer, primary key (t1field));
CREATE TABLE t2 (t2field integer, primary key (t2field));
CREATE TABLE t3 (t3field integer, primary key (t3field));
CREATE VIEW v2 AS SELECT * FROM t2;
CREATE VIEW v3 AS SELECT * FROM t3;
INSERT INTO t1 VALUES(1),(2);
INSERT INTO t2 VALUES(1),(2);
INSERT INTO t3 VALUES(1),(2);
PREPARE stmt FROM
"
SELECT t1field
FROM t1
WHERE t1field IN (SELECT * FROM v2);
";
EXECUTE stmt;
t1field
1
2
EXECUTE stmt;
t1field
1
2
DROP TABLE t1, t2, t3;
DROP VIEW v2, v3;
# End of Bug#49198
# 
# Bug#48623 Multiple subqueries are optimized incorrectly
# 
CREATE TABLE ot(val VARCHAR(10));
CREATE TABLE it1(val VARCHAR(10));
CREATE TABLE it2(val VARCHAR(10));
INSERT INTO ot  VALUES('aaa'), ('bbb'), ('eee'), ('mmm'), ('ppp');
INSERT INTO it1 VALUES('aaa'), ('aaa'), ('bbb'), ('eee'), ('mmm'), ('ppp');
INSERT INTO it2 VALUES('aaa'), ('bbb'), ('eee'), ('mmm'), ('ppp');
SELECT *
FROM ot
WHERE ot.val IN (SELECT it1.val FROM it1
WHERE  it1.val LIKE 'a%' OR it1.val LIKE 'e%')
AND ot.val IN (SELECT it2.val FROM it2
WHERE  it2.val LIKE 'a%' OR it2.val LIKE 'e%');
val
aaa
eee
DROP TABLE ot;
DROP TABLE it1;
DROP TABLE it2;
# End of Bug#48623
# 
# Bug #51487 Assertion failure when semi-join flattening occurs
#            for a subquery in HAVING 
# 
CREATE TABLE t1 (a INT, b INT);
INSERT INTO t1 VALUES (1,10),(2,11),(1,13);
CREATE TABLE t2 AS SELECT * FROM t1;
CREATE TABLE t3 AS SELECT * FROM t1;
SELECT COUNT(*) FROM t1
GROUP BY t1.a 
HAVING t1.a IN (SELECT t3.a FROM t3
WHERE t3.b IN (SELECT b FROM t2 WHERE t2.a=t1.a));
COUNT(*)
2
1
DROP TABLE t1, t2, t3;
# End of Bug#51487
# 
# BUG#38075: Wrong result: rows matching a subquery with outer join not returned
# 
# End of BUG#38075
# 
# BUG#50089: Second call of procedure with view in subselect crashes server
# 
CREATE TABLE t1(t1field INTEGER, PRIMARY KEY(t1field));
CREATE VIEW v1 AS 
SELECT t1field AS v1field
FROM t1 a
WHERE a.t1field IN (SELECT t1field FROM t1);
INSERT INTO t1 VALUES(1),(2);
SELECT t1field
FROM t1
WHERE t1field IN (SELECT v1field FROM v1);
t1field
1
2
SELECT t1.t1field
FROM t1 LEFT JOIN t1 AS t2 ON t1.t1field IN (SELECT v1field FROM v1);
t1field
1
1
2
2
CREATE PROCEDURE p1() 
BEGIN 
SELECT t1field
FROM t1
WHERE t1field IN (SELECT v1field FROM v1);
END|
CALL p1;
t1field
1
2
CALL p1;
t1field
1
2
PREPARE stmt FROM
"
SELECT t1field
FROM t1
WHERE t1field IN (SELECT v1field FROM v1);
";
EXECUTE stmt;
t1field
1
2
EXECUTE stmt;
t1field
1
2
DROP PROCEDURE p1;
DROP VIEW v1;
DROP TABLE t1;
# End of BUG#50089
#
# Bug#45191: Incorrectly initialized semi-join led to a wrong result.
#
CREATE TABLE staff (EMPNUM   CHAR(3) NOT NULL,
EMPNAME  CHAR(20), GRADE DECIMAL(4), CITY CHAR(15));
CREATE TABLE proj (PNUM CHAR(3) NOT NULL,
PNAME    CHAR(20), PTYPE CHAR(6),
BUDGET   DECIMAL(9),
CITY     CHAR(15));
CREATE TABLE works (EMPNUM CHAR(3) NOT NULL,
PNUM CHAR(3) NOT NULL, HOURS DECIMAL(5));
INSERT INTO staff VALUES ('E1','Alice',12,'Deale');
INSERT INTO staff VALUES ('E2','Betty',10,'Vienna');
INSERT INTO staff VALUES ('E3','Carmen',13,'Vienna');
INSERT INTO staff VALUES ('E4','Don',12,'Deale');
INSERT INTO staff VALUES ('E5','Ed',13,'Akron');
INSERT INTO proj VALUES  ('P1','MXSS','Design',10000,'Deale');
INSERT INTO proj VALUES  ('P2','CALM','Code',30000,'Vienna');
INSERT INTO proj VALUES  ('P3','SDP','Test',30000,'Tampa');
INSERT INTO proj VALUES  ('P4','SDP','Design',20000,'Deale');
INSERT INTO proj VALUES  ('P5','IRM','Test',10000,'Vienna');
INSERT INTO proj VALUES  ('P6','PAYR','Design',50000,'Deale');
INSERT INTO works VALUES  ('E1','P1',40);
INSERT INTO works VALUES  ('E1','P2',20);
INSERT INTO works VALUES  ('E1','P3',80);
INSERT INTO works VALUES  ('E1','P4',20);
INSERT INTO works VALUES  ('E1','P5',12);
INSERT INTO works VALUES  ('E1','P6',12);
INSERT INTO works VALUES  ('E2','P1',40);
INSERT INTO works VALUES  ('E2','P2',80);
INSERT INTO works VALUES  ('E3','P2',20);
INSERT INTO works VALUES  ('E4','P2',20);
INSERT INTO works VALUES  ('E4','P4',40);
INSERT INTO works VALUES  ('E4','P5',80);
SELECT EMPNUM, EMPNAME
FROM staff
WHERE EMPNUM IN
(SELECT EMPNUM  FROM works
WHERE PNUM IN
(SELECT PNUM  FROM proj));
EMPNUM	EMPNAME
E1	Alice
E2	Betty
E3	Carmen
E4	Don
drop table staff,works,proj;
# End of bug#45191
#  
# BUG#36896: Server crash on SELECT FROM DUAL
# 
create table t1 (a int);
select 1 as res from dual where (1) in (select * from t1);
res
drop table t1;

BUG#40118 Crash when running Batched Key Access and requiring one match for each key

create table t0(a int);
insert into t0 values (0),(1),(2),(3),(4),(5),(6),(7),(8),(9);
create table t1 (a int, key(a));
insert into t1 select * from t0;
alter table t1 add b int not null, add filler char(200);
insert into t1 select * from t1;
insert into t1 select * from t1;
select * from t0 where t0.a in (select t1.a from t1 where t1.b=0);
a
0
1
2
3
4
5
6
7
8
9
drop table t0, t1;
# 
# BUG#32665 Query with dependent subquery is too slow
#
create table t1 (
idIndividual int primary key
);
insert into t1 values (1),(2);
create table t2 (
idContact int primary key,
contactType int,
idObj int
);
insert into t2 values (1,1,1),(2,2,2),(3,3,3);
create table t3 (
idAddress int primary key,
idContact int,
postalStripped varchar(100)
);
insert into t3 values (1,1, 'foo'), (2,2,'bar');
The following must be converted to a semi-join:
drop table t1,t2,t3;
CREATE TABLE t1 (one int, two int, flag char(1));
CREATE TABLE t2 (one int, two int, flag char(1));
INSERT INTO t1 VALUES(1,2,'Y'),(2,3,'Y'),(3,4,'Y'),(5,6,'N'),(7,8,'N');
INSERT INTO t2 VALUES(1,2,'Y'),(2,3,'Y'),(3,4,'Y'),(5,6,'N'),(7,8,'N');
SELECT * FROM t1
WHERE ROW(one,two) IN (SELECT DISTINCT one,two FROM t2 WHERE flag = 'N');
one	two	flag
5	6	N
7	8	N
SELECT * FROM t1
WHERE ROW(one,two) IN (SELECT DISTINCT one,two FROM t1 WHERE flag = 'N');
one	two	flag
5	6	N
7	8	N
insert into t2 values (null,null,'N');
insert into t2 values (null,3,'0');
insert into t2 values (null,5,'0');
insert into t2 values (10,null,'0');
insert into t1 values (10,3,'0');
insert into t1 values (10,5,'0');
insert into t1 values (10,10,'0');
SELECT one,two,ROW(one,two) IN (SELECT one,two FROM t2 WHERE flag = 'N') as 'test' from t1;
one	two	test
1	2	NULL
2	3	NULL
3	4	NULL
5	6	1
7	8	1
10	3	NULL
10	5	NULL
10	10	NULL
SELECT one,two from t1 where ROW(one,two) IN (SELECT one,two FROM t2 WHERE flag = 'N');
one	two
5	6
7	8
SELECT one,two,ROW(one,two) IN (SELECT one,two FROM t2 WHERE flag = 'N' group by one,two) as 'test' from t1;
one	two	test
1	2	NULL
2	3	NULL
3	4	NULL
5	6	1
7	8	1
10	3	NULL
10	5	NULL
10	10	NULL
SELECT one,two,ROW(one,two) IN (SELECT one,two FROM t2 WHERE flag = '0') as 'test' from t1;
one	two	test
1	2	0
2	3	NULL
3	4	0
5	6	0
7	8	0
10	3	NULL
10	5	NULL
10	10	NULL
SELECT one,two,ROW(one,two) IN (SELECT one,two FROM t2 WHERE flag = '0' group by one,two) as 'test' from t1;
one	two	test
1	2	0
2	3	NULL
3	4	0
5	6	0
7	8	0
10	3	NULL
10	5	NULL
10	10	NULL
DROP TABLE t1,t2;
CREATE TABLE t1 (a char(5), b char(5));
INSERT INTO t1 VALUES (NULL,'aaa'), ('aaa','aaa');
SELECT * FROM t1 WHERE (a,b) IN (('aaa','aaa'), ('aaa','bbb'));
a	b
aaa	aaa
DROP TABLE t1;
CREATE TABLE t1 (a CHAR(1), b VARCHAR(10));
INSERT INTO t1 VALUES ('a', 'aa');
INSERT INTO t1 VALUES ('a', 'aaa');
SELECT a,b FROM t1 WHERE b IN (SELECT a FROM t1);
a	b
CREATE INDEX I1 ON t1 (a);
CREATE INDEX I2 ON t1 (b);
SELECT a,b FROM t1 WHERE b IN (SELECT a FROM t1);
a	b
CREATE TABLE t2 (a VARCHAR(1), b VARCHAR(10));
INSERT INTO t2 SELECT * FROM t1;
CREATE INDEX I1 ON t2 (a);
CREATE INDEX I2 ON t2 (b);
SELECT a,b FROM t2 WHERE b IN (SELECT a FROM t2);
a	b
SELECT a,b FROM t1 WHERE b IN (SELECT a FROM t1 WHERE LENGTH(a)<500);
a	b
DROP TABLE t1,t2;
#
# BUG#45928 "Differing query results depending on MRR and
# engine_condition_pushdown settings"
#
#
# BUG#45863 "Assertion failed: (fixed == 0), function fix_fields(),
#            file item.cc, line 4448"
#
DROP TABLE IF EXISTS C, BB;
CREATE TABLE C (
varchar_nokey varchar(1) NOT NULL
);
INSERT INTO C VALUES
('k'),('a'),(''),('u'),('e'),('v'),('i'),
('t'),('u'),('f'),('u'),('m'),('j'),('f'),
('v'),('j'),('g'),('e'),('h'),('z');
CREATE TABLE BB (
varchar_nokey varchar(1) NOT NULL
);
INSERT INTO BB VALUES ('i'),('t');
SELECT varchar_nokey FROM C
WHERE (varchar_nokey, OUTR) IN (SELECT varchar_nokey
FROM BB);
ERROR 42S22: Unknown column 'OUTR' in 'IN/ALL/ANY subquery'
SELECT varchar_nokey FROM C
WHERE (varchar_nokey, OUTR) IN (SELECT varchar_nokey, varchar_nokey
FROM BB);
ERROR 42S22: Unknown column 'OUTR' in 'IN/ALL/ANY subquery'
DROP TABLE C,BB;
#
# During work with BUG#45863 I had problems with a query that was
# optimized differently in regular and prepared mode.
# Because there was a bug in one of the selected strategies, I became
# aware of the problem. Adding an EXPLAIN query to catch this.
#
# BUG#45221 Query SELECT pk FROM C WHERE pk IN (SELECT int_key) failing
#
CREATE TABLE t1 (
i1_key INT,
i2 INT,
i3 INT,
KEY i1_index (i1_key)
);
INSERT INTO t1 VALUES (9,1,2), (9,2,1);
CREATE TABLE t2 (
pk INT NOT NULL,
i1 INT,
PRIMARY KEY (pk)
);
INSERT INTO t2 VALUES (9,1);
SELECT pk
FROM t2
WHERE 
pk IN ( 
SELECT i1_key
FROM t1
WHERE t1.i2 < t1.i3 XOR t2.i1 > 1
ORDER BY t1.i2 desc);
pk
9
DROP TABLE t1,t2;
# BUG#50361 Doublenested noncorrelated subquery with FirstMatch and join cache wrong result
#
CREATE TABLE t1(
id INTEGER
);
INSERT INTO t1 VALUES(10),(20);
create table t2 select * from t1;
create table t3 select * from t1;
SELECT *
FROM t1
WHERE 1 IN(SELECT 1
FROM t2
WHERE 1 IN(SELECT 1
FROM t3));
id
10
20
delete from t2;
delete from t3;
INSERT INTO t1 VALUES(30),(40),(50),(60),(70),(80),(90);
insert into t2 select * from t1;
insert into t3 select * from t1;
create table t4 select * from t1;
SELECT *
FROM t1
WHERE 1 IN(SELECT 1
FROM t2
WHERE 1 IN(SELECT 1
FROM t3
WHERE 1 IN(SELECT 1
FROM t4)));
id
10
20
30
40
50
60
70
80
90
SELECT *
FROM t1
WHERE 1 IN(SELECT 1
FROM t1
WHERE 1 IN(SELECT 1
FROM t1
WHERE 1 IN(SELECT 1
FROM t1)));
id
10
20
30
40
50
60
70
80
90
drop table t1,t2,t3,t4;
#
# BUG#53298 "wrong result with semijoin (no semijoin strategy chosen)"
#
create table t1 (uid int, fid int);
insert into t1 values (1,1), (3,1);
create table t2 (uid int, name varchar(128));
insert into t2 values (1, "A"), (2, "B");
create table t3 (uid int, fid int, index(uid));
insert into t3 values (1,3), (1,3);
create table t4 (uid int);
insert into t4 values (3);
select t2.uid from t2, t1 
where t1.uid in (select t4.uid from t4, t3 where t3.uid=1 and t4.uid=t3.fid)
and t2.uid=t1.fid;
uid
1
drop table t1,t2,t3,t4;
CREATE TABLE t1 (
pk int,
a varchar(1),
b varchar(4),
c varchar(4),
d varchar(4),
PRIMARY KEY (pk)
);
INSERT INTO t1 VALUES (1,'o','ffff','ffff','ffoo'),(2,'f','ffff','ffff','ffff');
CREATE TABLE t2 LIKE t1;
INSERT INTO t2 VALUES (1,'i','iiii','iiii','iiii'),(2,'f','ffff','ffff','ffff');
SELECT pk FROM t1 WHERE (a) IN (SELECT a FROM t2 WHERE pk > 0);
pk
2
SELECT pk FROM t1 WHERE (b,c,d) IN (SELECT b,c,d FROM t2 WHERE pk > 0);
pk
2
DROP TABLE t1, t2;
CREATE TABLE t1 (f1 INT, f2 DECIMAL(5,3)) ENGINE=Sequoiadb;
INSERT INTO t1 (f1, f2) VALUES (1, 1.789);
INSERT INTO t1 (f1, f2) VALUES (13, 1.454);
INSERT INTO t1 (f1, f2) VALUES (10, 1.668);
CREATE TABLE t2 LIKE t1;
INSERT INTO t2 VALUES (1, 1.789);
INSERT INTO t2 VALUES (13, 1.454);
SELECT COUNT(*) FROM t1 WHERE (f1,f2) IN (SELECT f1,f2 FROM t2);
COUNT(*)
2
DROP TABLE t1, t2;
create table t0 (a int);
insert into t0 values (0),(1),(2),(3),(4);
create table t1 (a int, b int, key(a));
insert into t1 select a,a from t0;
create table t2 (a int, b int, primary key(a));
insert into t2 select * from t1;
Table t2, unlike table t1, should be displayed as pulled out
update t1 set a=3, b=11 where a=4;
update t2 set b=11 where a=3;
create temporary table tmp select * from t0 where t0.a in 
(select t1.a from t1, t2 where t2.a=t0.a and t1.b=t2.b);
create temporary table tmp_as_ref (a int);
insert into tmp_as_ref values(0),(1),(2),(3);
select * from tmp;
a
0
1
2
3
drop table t0, t1, t2, tmp, tmp_as_ref;
CREATE TABLE t1 (
id int(11) NOT NULL,
PRIMARY KEY (id));
CREATE TABLE t2 (
id int(11) NOT NULL,
fid int(11) NOT NULL,
PRIMARY KEY (id));
insert into t1 values(1);
insert into t2 values(1,7503),(2,1);
explain select count(*) 
from t1 
where fid IN (select fid from t2 where (id between 7502 and 8420) order by fid );
ERROR 42S22: Unknown column 'fid' in 'IN/ALL/ANY subquery'
drop table t1, t2;
create table t1 (a int, b int, key (a), key (b));
insert into t1 values (2,4),(2,4),(2,4);
select t1.a from t1 
where 
t1.a in (select 1 from t1 where t1.a in (select 1 from t1) group by  t1.a);
a
drop table t1;
create table t1(a int,b int,key(a),key(b));
insert into t1 values (1,1),(2,2),(3,3);
select 1 from t1 
where t1.a not in (select 1 from t1 
where t1.a in (select 1 from t1) 
group by  t1.b);
1
1
1
drop table t1;
CREATE TABLE t1
(EMPNUM   CHAR(3) NOT NULL,
EMPNAME  CHAR(20),
GRADE    DECIMAL(4),
CITY     CHAR(15));
CREATE TABLE t2
(PNUM     CHAR(3) NOT NULL,
PNAME    CHAR(20),
PTYPE    CHAR(6),
BUDGET   DECIMAL(9),
CITY     CHAR(15));
CREATE TABLE t3
(EMPNUM   CHAR(3) NOT NULL,
PNUM     CHAR(3) NOT NULL,
HOURS    DECIMAL(5));
INSERT INTO t1 VALUES ('E1','Alice',12,'Deale');
INSERT INTO t1 VALUES ('E2','Betty',10,'Vienna');
INSERT INTO t1 VALUES ('E3','Carmen',13,'Vienna');
INSERT INTO t1 VALUES ('E4','Don',12,'Deale');
INSERT INTO t1 VALUES ('E5','Ed',13,'Akron');
INSERT INTO t2 VALUES ('P1','MXSS','Design',10000,'Deale');
INSERT INTO t2 VALUES ('P2','CALM','Code',30000,'Vienna');
INSERT INTO t2 VALUES ('P3','SDP','Test',30000,'Tampa');
INSERT INTO t2 VALUES ('P4','SDP','Design',20000,'Deale');
INSERT INTO t2 VALUES ('P5','IRM','Test',10000,'Vienna');
INSERT INTO t2 VALUES ('P6','PAYR','Design',50000,'Deale');
INSERT INTO t3 VALUES  ('E1','P1',40);
INSERT INTO t3 VALUES  ('E1','P2',20);
INSERT INTO t3 VALUES  ('E1','P3',80);
INSERT INTO t3 VALUES  ('E1','P4',20);
INSERT INTO t3 VALUES  ('E1','P5',12);
INSERT INTO t3 VALUES  ('E1','P6',12);
INSERT INTO t3 VALUES  ('E2','P1',40);
INSERT INTO t3 VALUES  ('E2','P2',80);
INSERT INTO t3 VALUES  ('E3','P2',20);
INSERT INTO t3 VALUES  ('E4','P2',20);
INSERT INTO t3 VALUES  ('E4','P4',40);
INSERT INTO t3 VALUES  ('E4','P5',80);
SELECT * FROM t1;
EMPNUM	EMPNAME	GRADE	CITY
E1	Alice	12	Deale
E2	Betty	10	Vienna
E3	Carmen	13	Vienna
E4	Don	12	Deale
E5	Ed	13	Akron
CREATE UNIQUE INDEX t1_IDX ON t1(EMPNUM);
SELECT EMPNAME
FROM t1
WHERE EMPNUM IN
(SELECT EMPNUM
FROM t3
WHERE PNUM IN
(SELECT PNUM
FROM t2
WHERE PTYPE = 'Design'));
EMPNAME
Alice
Betty
Don
DROP INDEX t1_IDX ON t1;
CREATE INDEX t1_IDX ON t1(EMPNUM);
SELECT EMPNAME
FROM t1
WHERE EMPNUM IN
(SELECT EMPNUM
FROM t3
WHERE PNUM IN
(SELECT PNUM
FROM t2
WHERE PTYPE = 'Design'));
EMPNAME
Alice
Betty
Don
DROP INDEX t1_IDX ON t1;
SELECT EMPNAME
FROM t1
WHERE EMPNUM IN
(SELECT EMPNUM
FROM t3
WHERE PNUM IN
(SELECT PNUM
FROM t2
WHERE PTYPE = 'Design'));
EMPNAME
Alice
Betty
Don
DROP TABLE t1, t2, t3;
CREATE TABLE t1 (f1 INT NOT NULL);
CREATE VIEW v1 (a) AS SELECT f1 IN (SELECT f1 FROM t1) FROM t1;
SELECT * FROM v1;
a
drop view v1;
drop table t1;
create table t0 (a int);
insert into t0 values (0),(1),(2),(3),(4),(5),(6),(7),(8),(9);
create table t1(a int, b int);
insert into t1 values (0,0),(1,1),(2,2);
create table t2 as select * from t1;
create table t3 (pk int, a int, primary key(pk));
insert into t3 select a,a from t0;
drop table t0, t1, t2, t3;
create table t0 (a int);
insert into t0 values (0),(1),(2),(3),(4),(5),(6),(7),(8),(9);
create table t1 (a int) as select A.a + 10 *(B.a + 10*C.a) as a  from t0 A, t0 B, t0 C;
create table t2 (id int, a int, primary key(id), key(a)) as select a as id, a as a  from t1;
show create table t2;
Table	Create Table
t2	CREATE TABLE `t2` (
  `id` int(11) NOT NULL,
  `a` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `a` (`a`)
) ENGINE=SEQUOIADB DEFAULT CHARSET=latin1
set @a=0;
create table t3 as select * from t2 limit 0;
insert into t3 select @a:=@a+1, t2.a from t2, t0;
insert into t3 select @a:=@a+1, t2.a from t2, t0;
insert into t3 select @a:=@a+1, t2.a from t2, t0;
alter table t3 add primary key(id), add key(a);
The following must use loose index scan over t3, key a:
select count(a) from t2 where a in ( SELECT  a FROM t3);
count(a)
1000
drop table t0,t1,t2,t3;
#
# Bug#33062: subquery in stored routine cause crash
#
CREATE TABLE t1(a INT);
CREATE TABLE t2(c INT);
CREATE PROCEDURE p1(v1 int)
BEGIN
SELECT 1 FROM t1 WHERE a = v1 AND a IN (SELECT c FROM t2);
END
//
CREATE PROCEDURE p2(v1 int)
BEGIN
SELECT 1 FROM t1 WHERE a IN (SELECT c FROM t2);
END
//
CREATE PROCEDURE p3(v1 int)
BEGIN
SELECT 1 
FROM 
t1 t01,t1 t02,t1 t03,t1 t04,t1 t05,t1 t06,t1 t07,t1 t08,
t1 t09,t1 t10,t1 t11,t1 t12,t1 t13,t1 t14,t1 t15,t1 t16,
t1 t17,t1 t18,t1 t19,t1 t20,t1 t21,t1 t22,t1 t23,t1 t24,
t1 t25,t1 t26,t1 t27,t1 t28,t1 t29,t1 t30,t1 t31,t1 t32,
t1 t33,t1 t34,t1 t35,t1 t36,t1 t37,t1 t38,t1 t39,t1 t40,
t1 t41,t1 t42,t1 t43,t1 t44,t1 t45,t1 t46,t1 t47,t1 t48,
t1 t49,t1 t50,t1 t51,t1 t52,t1 t53,t1 t54,t1 t55,t1 t56,
t1 t57,t1 t58,t1 t59,t1 t60
WHERE t01.a IN (SELECT c FROM t2);
END
//
CREATE PROCEDURE p4(v1 int)
BEGIN
SELECT 1 
FROM 
t1 t01,t1 t02,t1 t03,t1 t04,t1 t05,t1 t06,t1 t07,t1 t08,
t1 t09,t1 t10,t1 t11,t1 t12,t1 t13,t1 t14,t1 t15,t1 t16,
t1 t17,t1 t18,t1 t19,t1 t20,t1 t21,t1 t22,t1 t23,t1 t24,
t1 t25,t1 t26,t1 t27,t1 t28,t1 t29,t1 t30,t1 t31,t1 t32,
t1 t33,t1 t34,t1 t35,t1 t36,t1 t37,t1 t38,t1 t39,t1 t40,
t1 t41,t1 t42,t1 t43,t1 t44,t1 t45,t1 t46,t1 t47,t1 t48,
t1 t49,t1 t50,t1 t51,t1 t52,t1 t53,t1 t54,t1 t55,t1 t56,
t1 t57,t1 t58,t1 t59,t1 t60
WHERE t01.a = v1 AND t01.a IN (SELECT c FROM t2);
END
//
CALL p1(1);
1
CALL p2(1);
1
CALL p3(1);
1
CALL p4(1);
1
DROP TABLE t1, t2;
DROP PROCEDURE p1;
DROP PROCEDURE p2;
DROP PROCEDURE p3;
DROP PROCEDURE p4;
# 
# Bug#48213 Materialized subselect crashes if using GEOMETRY type
# 
# End of Bug#48213
# 
# BUG#53060: LooseScan semijoin strategy does not return all rows
# 
CREATE TABLE t1 (i INTEGER);
INSERT INTO t1 VALUES (1), (2), (3), (4), (5);
CREATE TABLE t2 (i INTEGER, j INTEGER, KEY k(i, j));
INSERT INTO t2 VALUES (1, 0), (1, 1), (2, 0), (2, 1);
SELECT * FROM t1 WHERE (i) IN (SELECT i FROM t2 where j > 0);
i
1
2
DROP TABLE t1, t2;
# End of BUG#53060
#
# Bug#53305 "Duplicate weedout + join buffer (join cache --level=7,8) loses rows"
#
create table t1 (uid int, fid int, index(uid));
insert into t1 values
(1,1), (1,2), (1,3), (1,4),
(2,5), (2,6), (2,7), (2,8),
(3,1), (3,2), (3,9);
create table t2 (uid int primary key, name varchar(128), index(name));
insert into t2 values 
(1, "A"), (2, "B"), (3, "C"), (4, "D"), (5, "E"),
(6, "F"), (7, "G"), (8, "H"), (9, "I");
create table t3 (uid int, fid int, index(uid));
insert into t3 values
(1,1), (1,2), (1,3),(1,4),
(2,5), (2,6), (2,7), (2,8),
(3,1), (3,2), (3,9);
create table t4 (uid int primary key, name varchar(128), index(name));
insert into t4 values 
(1, "A"), (2, "B"), (3, "C"), (4, "D"), (5, "E"),
(6, "F"), (7, "G"), (8, "H"), (9, "I");
select name from t2, t1 
where t1.uid in (select t4.uid from t4, t3 where t3.uid=1 and t4.uid=t3.fid)
and t2.uid=t1.fid;
name
A
A
B
B
C
D
E
F
G
H
I
drop table t1,t2,t3,t4;
#
# Bug#43768 Prepared query with nested subqueries core dump on second execution
#
CREATE TABLE t1 (
id INT PRIMARY KEY,
partner_id VARCHAR(35)
);
INSERT INTO t1 VALUES
(1, 'partner1'), (2, 'partner2'),
(3, 'partner3'), (4, 'partner4');
CREATE TABLE t2 (
id INT NOT NULL,
t1_line_id INT,
article_id VARCHAR(20),
PRIMARY KEY(id, t1_line_id)
);
INSERT INTO t2 VALUES
(1, 1, 'sup'), (2, 1, 'sup'),
(2, 2, 'sup'), (2, 3, 'sup'),
(2, 4, 'imp'), (3, 1, 'sup'),
(4, 1, 'sup');
CREATE TABLE t3 (
user_id VARCHAR(50),
article_id VARCHAR(20) NOT NULL,
PRIMARY KEY(user_id)
);
INSERT INTO t3 VALUES('nicke', 'imp');
SELECT t1.partner_id
FROM t1
WHERE t1.id IN (
SELECT t2.id
FROM t2
WHERE article_id IN (
SELECT article_id FROM t3
WHERE user_id = 'nicke'
    )
);
partner_id
partner2
DROP TABLE t1,t2,t3;
# End of Bug#43768
#
# Bug#53058 - semijoin execution of subquery with outerjoin yields wrong result
#
CREATE TABLE t1 (i INTEGER);
CREATE TABLE t2 (i INTEGER);
CREATE TABLE t3 (i INTEGER);
INSERT INTO t1 VALUES (1), (2);
INSERT INTO t2 VALUES (6);
INSERT INTO t3 VALUES (1), (2);
SELECT * FROM t1 WHERE (t1.i) IN 
(SELECT t3.i FROM t3 LEFT JOIN t2 ON t2.i=t3.i);
i
1
2
drop table t1,t2,t3;
#
# BUG#49453: re-execution of prepared statement with view 
#            and semijoin crashes
#
CREATE TABLE t1 (city VARCHAR(50), country_id INT);
CREATE TABLE t2 (country_id INT, country VARCHAR(50));
INSERT INTO t1 VALUES 
('Batna',2),('Bchar',2),('Skikda',2),('Tafuna',3),('Algeria',2) ;
INSERT INTO t2 VALUES (2,'Algeria'),(2,'AlgeriaDup'),(3,'XAmerican Samoa');
CREATE VIEW v1 AS 
SELECT country_id as vf_country_id
FROM t2
WHERE LEFT(country,1) = "A";
PREPARE stmt FROM "
SELECT city, country_id
FROM t1
WHERE country_id IN (SELECT vf_country_id FROM v1);
";

EXECUTE stmt;
city	country_id
Batna	2
Bchar	2
Skikda	2
Algeria	2
EXECUTE stmt;
city	country_id
Batna	2
Bchar	2
Skikda	2
Algeria	2
DROP TABLE t1,t2;
DROP VIEW v1;
#
# Bug#54437 Extra rows with LEFT JOIN + semijoin (firstmatch
# and duplicates weedout)
#
create table t1 (a int);
create table t2 (a int);
create table t3 (a int);
insert into t1 values(1),(1);
insert into t2 values(1),(1),(1),(1);
insert into t3 values(2),(2);
select * from t1 where t1.a in (select t2.a from t2 left join t3 on t2.a=t3.a);
a
1
1
drop table t1,t2,t3;
#
# Bug#55955: crash in MEMORY engine with IN(LEFT JOIN (JOIN))
#
CREATE TABLE t1 (a INT);
CREATE TABLE t2 (a INT);
CREATE TABLE t3 (a INT);
INSERT INTO t1 VALUES(1),(1);
INSERT INTO t2 VALUES(1),(1);
INSERT INTO t3 VALUES(2),(2);
SELECT * FROM t1
WHERE t1.a IN (SELECT t2.a
FROM t2 LEFT JOIN (t2 AS t2inner, t3) ON t2.a=t3.a);
a
1
1
DROP TABLE t1,t2,t3;
#
# BUG#52329 - Wrong result: subquery materialization, IN, 
#             non-null field followed by nullable
#
CREATE TABLE t1 (a1 CHAR(8) NOT NULL, a2 char(8) NOT NULL);
CREATE TABLE t2a (b1 char(8), b2 char(8));
CREATE TABLE t2b (b1 CHAR(8), b2 char(8) NOT NULL);
CREATE TABLE t2c (b1 CHAR(8) NOT NULL, b2 char(8));
INSERT INTO t1 VALUES ('1 - 12', '2 - 22');
INSERT INTO t2a VALUES ('1 - 11', '2 - 21'),
('1 - 11', '2 - 21'),
('1 - 12', '2 - 22'),
('1 - 12', '2 - 22'),
('1 - 13', '2 - 23');
INSERT INTO t2b SELECT * FROM t2a;
INSERT INTO t2c SELECT * FROM t2a;
SELECT * FROM t1
WHERE (a1, a2) IN (
SELECT b1, b2 FROM t2c WHERE b1 > '0' GROUP BY b1, b2);
a1	a2
1 - 12	2 - 22
SELECT * FROM t1
WHERE (a1, a2) IN (
SELECT b1, b2 FROM t2a WHERE b1 > '0');
a1	a2
1 - 12	2 - 22
SELECT * FROM t1
WHERE (a1, a2) IN (
SELECT b1, b2 FROM t2b WHERE b1 > '0');
a1	a2
1 - 12	2 - 22
SELECT * FROM t1
WHERE (a1, a2) IN (
SELECT b1, b2 FROM t2c WHERE b1 > '0');
a1	a2
1 - 12	2 - 22
DROP TABLE t1,t2a,t2b,t2c;
# End BUG#52329
#
# Bug#45174: Incorrectly applied equality propagation caused wrong
# result on a query with a materialized semi-join.
#
CREATE TABLE t1 (
varchar_nokey varchar(1) NOT NULL
);
INSERT INTO t1 VALUES
('v'), ('u'), ('n'), ('l'), ('h'), ('u'), ('n'), ('j'), ('k'),
('e'), ('i'), ('u'), ('n'), ('b'), ('x'), (''), ('q'), ('u');
CREATE TABLE t2 (
pk int NOT NULL,
varchar_key varchar(1) NOT NULL,
varchar_nokey varchar(1) NOT NULL,
PRIMARY KEY(pk),
KEY varchar_key(varchar_key)
);
INSERT INTO t2 VALUES
(11,'m','m'), (12,'j','j'), (13,'z','z'), (14,'a','a'), (15,'',''),
(16,'e','e'), (17,'t','t'), (19,'b','b'), (20,'w','w'), (21,'m','m'),
(23,'',''), (24,'w','w'), (26,'e','e'), (27,'e','e'), (28,'p','p');
SELECT varchar_nokey
FROM t1
WHERE (varchar_nokey, varchar_nokey) IN (SELECT varchar_key, varchar_nokey
FROM t2  
WHERE varchar_nokey < 'n' XOR pk);
varchar_nokey
DROP TABLE t1, t2;
# End of the test for bug#45174.
#
# Bug#50019: Wrong result for IN-query with materialization
#
CREATE TABLE t1(i INT);
INSERT INTO t1 VALUES (1), (2), (3), (4), (5), (6), (7), (8), (9), (10);
CREATE TABLE t2(i INT);
INSERT INTO t2 VALUES (1), (2), (3), (4), (5), (6), (7), (8), (9), (10);
CREATE TABLE t3(i INT);
INSERT INTO t3 VALUES (1), (2), (3), (4), (5), (6), (7), (8), (9), (10);
SELECT * FROM t1 WHERE t1.i IN (SELECT t2.i
FROM t2 JOIN t3
WHERE t2.i + t3.i = 5);
i
1
2
3
4
DROP TABLE t1,t2,t3;
# End of the test for bug#50019.
#
# Bug#52068: Optimizer generates invalid semijoin materialization plan
#
CREATE TABLE ot1(a INTEGER);
INSERT INTO ot1 VALUES(5), (8);
CREATE TABLE it2(a INTEGER);
INSERT INTO it2 VALUES(9), (5), (1), (8);
CREATE TABLE it3(a INTEGER);
INSERT INTO it3 VALUES(7), (1), (0), (5), (1), (4);
CREATE TABLE ot4(a INTEGER);
INSERT INTO ot4 VALUES(1), (3), (5), (7), (9), (7), (3), (1);
SELECT * FROM ot1,ot4
WHERE (ot1.a,ot4.a) IN (SELECT it2.a,it3.a
FROM it2,it3);
a	a
5	1
8	1
5	5
8	5
5	7
8	7
5	7
8	7
5	1
8	1
DROP TABLE IF EXISTS ot1, ot4, it2, it3;
# End of the test for bug#52068.
#
# Bug#57623: subquery within before insert trigger causes crash (sj=on)
#
CREATE TABLE ot1(a INT);
CREATE TABLE ot2(a INT);
CREATE TABLE ot3(a INT);
CREATE TABLE it1(a INT);
INSERT INTO ot1 VALUES(0),(1),(2),(3),(4),(5),(6),(7);
INSERT INTO ot2 VALUES(0),(2),(4),(6);
INSERT INTO ot3 VALUES(0),(3),(6);
INSERT INTO it1 VALUES(0),(1),(2),(3),(4),(5),(6),(7);
SELECT *
FROM   ot1
LEFT JOIN
(ot2 JOIN ot3 on ot2.a=ot3.a)
ON ot1.a=ot2.a AND ot1.a IN (SELECT a from it1);
a	a	a
0	0	0
1	NULL	NULL
2	NULL	NULL
3	NULL	NULL
4	NULL	NULL
5	NULL	NULL
6	6	6
7	NULL	NULL
prepare s from 'SELECT *
FROM   ot1
LEFT JOIN
(ot2 JOIN ot3 on ot2.a=ot3.a)
ON ot1.a=ot2.a AND ot1.a IN (SELECT a from it1)';
execute s;
a	a	a
0	0	0
1	NULL	NULL
2	NULL	NULL
3	NULL	NULL
4	NULL	NULL
5	NULL	NULL
6	6	6
7	NULL	NULL
execute s;
a	a	a
0	0	0
1	NULL	NULL
2	NULL	NULL
3	NULL	NULL
4	NULL	NULL
5	NULL	NULL
6	6	6
7	NULL	NULL
deallocate prepare s;
DROP TABLE ot1, ot2, ot3, it1;
# End of the test for bug#57623.
#
# Bug#11766739: Crash in tmp_table_param::init() with semijoin=on
#
CREATE TABLE t1 (f1 INTEGER) ENGINE=Sequoiadb;
CREATE TABLE t2 (f1 INTEGER, f2 INTEGER) ENGINE=Sequoiadb;
INSERT INTO t1 VALUES (1);
INSERT INTO t2 VALUES (1,1), (2,1);
SELECT * FROM t2
WHERE f2 IN (SELECT t1.f1
FROM t1 LEFT OUTER JOIN (t2 AS b1 JOIN t2 AS b2 ON TRUE) ON TRUE);
f1	f2
1	1
2	1
DROP TABLE t1, t2;
# End of the test for bug#11766739.
#
# Bug#11766642: crash in Item_field::register_field_in_read_map with view
#
CREATE TABLE t1(a INT);
CREATE VIEW v1 AS SELECT a FROM t1;
INSERT INTO t1 VALUES (0),(1),(2);
SELECT a FROM t1 WHERE a IN 
(SELECT a XOR a FROM v1)
ORDER BY a;
a
0
DROP TABLE t1;
DROP VIEW v1;
#
# Bug#12546542 MISSING ROW WHEN USING OPTIMIZER_JOIN_CACHE_LEVEL>=3
#
CREATE TABLE t1 (
f2 varchar(1024)
);
INSERT INTO t1 VALUES ('v'),('we');
CREATE TABLE t2 (
col_varchar_1024_utf8 varchar(1024) CHARACTER SET utf8 DEFAULT NULL,
col_int_key int,
col_int int
);
INSERT INTO t2 VALUES ('we',4,NULL),('v',1305673728,6);
CREATE TABLE t3 (
col_int_key int,
col_int int
);
INSERT INTO t3 VALUES (4,4);
SELECT *
FROM t1
WHERE f2 IN (SELECT a1.col_varchar_1024_utf8 AS f2
FROM t2 AS a1 LEFT JOIN t3 AS a2
ON a1.col_int_key = a2.col_int_key
WHERE a1.col_int BETWEEN 1 AND 10 OR a2.col_int IS NOT NULL);
f2
we
v
DROP TABLE t1,t2,t3;
#
# BUG#12616344 - JCL: DIFFERENT RESULT SET AND DIFFERENT AMOUNT
# OF ROWS WHEN JCL>=3
#
CREATE TABLE t1 (col_int_nokey int, col_int_key int, col_varchar_key varchar(1));
INSERT INTO t1 VALUES (0,4,'c'),(1,6,'u');
CREATE TABLE t2 (pk int, col_int_nokey int, col_varchar_nokey varchar(1));
INSERT INTO t2 VALUES (1,4,'b'),(94,6,'u');
CREATE TABLE t3 (pk int, col_int_nokey int, col_varchar_key varchar(1));
INSERT INTO t3 VALUES (1,4,'j'),(2,6,'v');
DROP TABLE t1,t2,t3;
#
# Bug#12608157: ASSERT IN FIELD_LONG::VAL_INT WHEN USING MEMORY ENGINE
#
CREATE TABLE t1 (i1 int);
INSERT INTO t1 VALUES (1);
CREATE TABLE t2 (i1 int, i2 int) ENGINE=Sequoiadb;
INSERT INTO t2 VALUES (1, 2),(7, 3);
SELECT GRANDPARENT1.i1
FROM t2 AS GRANDPARENT1 
WHERE GRANDPARENT1.i2
IN ( SELECT PARENT1.i2
FROM t2 AS PARENT1 JOIN t1 AS PARENT2 ON (PARENT1.i1 = PARENT2.i1)
WHERE 
GRANDPARENT1.i1 IN ( SELECT CHILD1.i1 FROM t2 AS CHILD1 )
ORDER BY PARENT1.i1)
ORDER BY GRANDPARENT1.i2 ;
i1
1
DROP TABLE t1,t2;
#
# Bug#12640083: Same query executed as WHERE subquery gives different
#              results on IN() compare
#
# End of the test for bug#12640083.
#
# Bug#12603200 - Assert in QUICK_INDEX_MERGE_SELECT::need_sorted_output
#
CREATE TABLE t1 (
pk int NOT NULL,
col_int_key int NOT NULL,
col_varchar_nokey varchar(1) NOT NULL,
col_varchar_key varchar(1) NOT NULL,
PRIMARY KEY(pk),
KEY col_int_key(col_int_key),
KEY col_varchar_key(col_varchar_key, col_int_key)
) engine=Sequoiadb;
INSERT INTO t1 VALUES
(1,7,'a','a'),
(2,0,'v','v'),
(3,9,'c','c'),
(4,3,'m','m'),
(5,2,'a','a'),
(6,1,'d','d'),
(7,8,'y','y'),
(8,6,'t','t'),
(11,7,'a','x'),
(12,0,'v','v'),
(13,9,'c','c'),
(14,3,'m','m'),
(15,2,'a','x'),
(16,1,'d','d'),
(17,8,'y','y'),
(18,6,'t','u'),
(19,6,'t','u');
CREATE TABLE t2 (
pk int NOT NULL,
col_int_key int NOT NULL,
col_varchar_key varchar(1) NOT NULL,
PRIMARY KEY(pk),
KEY col_varchar_key(col_varchar_key, col_int_key)
) engine=Sequoiadb;
INSERT INTO t2(pk,col_int_key,col_varchar_key) VALUES
(8,7,'c'),
(11,4,'l'),
(12,7,'b'),
(13,0,'c'),
(14,2,'i'),
(15,9,'h'),
(16,4,'q'),
(17,1,'m'),
(18,9,'b'),
(19,2,'e'),
(20,1,'c'),
(21,7,'z'),
(22,4,'l'),
(23,7,'z'),
(24,0,'c'),
(25,2,'i'),
(26,9,'h'),
(27,4,'q'),
(28,0,'a'),
(29,1,'d');
SELECT outr.col_varchar_key AS x, outr.pk AS y
FROM t1 AS outr
WHERE outr.col_varchar_key IN (SELECT innr.col_varchar_key
FROM t2 AS innr
WHERE innr.col_varchar_key = 'a' OR innr.pk = 8)
AND outr.col_varchar_nokey < 't'
ORDER BY outr.col_varchar_key, outr.pk;
x	y
a	1
a	5
c	3
c	13
DROP TABLE t1, t2;
# End of bug#12603200
#
# Bug#12603183: Segfault in hp_movelink
#
CREATE TABLE t1 (
col_varchar_key varchar(1) ,
col_varchar_nokey varchar(1) ,
KEY col_varchar_key(col_varchar_key)
);
INSERT INTO t1 VALUES
('i','i'),
('h','h'),
('q','q'),
('a','a'),
('v','v'),
('u','u'),
('s','s'),
('y','y'),
('z','z'),
('h','h'),
('p','p'),
('e','e'),
('i','i'),
('y','y'),
('w','w');
CREATE TABLE t2 (
col_varchar_nokey varchar(1)
);
INSERT INTO t2 VALUES
('b');
SELECT grandparent1.col_varchar_nokey
FROM t1 AS grandparent1 LEFT JOIN t2 AS grandparent2 USING (col_varchar_nokey)
WHERE (grandparent1.col_varchar_key) IN
(SELECT parent1.col_varchar_nokey
FROM t1 AS parent1
WHERE parent1.col_varchar_key IN
(SELECT child1.col_varchar_nokey AS c1
FROM t1 AS child1 LEFT JOIN t2 AS child2
ON (child1.col_varchar_key > child2.col_varchar_nokey)));
col_varchar_nokey
a
e
h
h
i
i
p
q
s
u
v
w
y
y
z
DROP TABLE t1, t2;
# End of test for bug#12603183.
#
# Bug#12818569: Diff nr of rows returned when using IN/ALL+subquery
#
# End of test for bug#12818569.
#
# Bug#12803439: Assert in replace_subcondition() on update query
#
CREATE TABLE t1(a INTEGER);
INSERT INTO t1 values(1), (2);
CREATE TABLE t2(a INTEGER);
INSERT INTO t2 VALUES(1), (3);
SELECT *
FROM t1
WHERE a IN (SELECT a
FROM t2
HAVING a IN (SELECT a
FROM t2)
)
HAVING a IN (SELECT a
FROM t2);
a
1
DROP TABLE t1, t2;
# End of test for bug#12803439.
#
# Bug#12797534: Segfault in hp_movelink still exists
#
CREATE TABLE t1 (
g1 VARCHAR(1) NOT NULL
) ENGINE=Sequoiadb;
INSERT INTO t1 VALUES ('d'), ('s');
CREATE TABLE t2 (
pk INT NOT NULL,
col_int_key INT NOT NULL,
col_varchar_key VARCHAR(1) NOT NULL,
col_varchar_nokey VARCHAR(1) NOT NULL,
PRIMARY KEY (pk),
KEY col_varchar_key(col_varchar_key, col_int_key)
) ENGINE=Sequoiadb;
INSERT INTO t2 VALUES
(1,4,'j','j'), (2,6,'v','v'), (3,3,'c','c'), (4,5,'m','m'),
(5,3,'d','d'), (6,246,'d','d'), (7,2,'y','y'), (8,9,'t','t'),
(9,3,'d','d'), (10,8,'s','s'), (11,1,'r','r'), (12,8,'m','m'),
(13,8,'b','b'), (14,5,'x','x'), (15,7,'g','g'), (16,5,'p','p'),
(17,1,'q','q'), (18,6,'w','w'), (19,2,'d','d'), (20,9,'e','e');
CREATE TABLE t3 (
pk INTEGER NOT NULL,
PRIMARY KEY (pk)
) ENGINE=Sequoiadb;
INSERT INTO t3 VALUES (10);
SELECT *
FROM t1
WHERE g1 NOT IN
(SELECT  grandparent1.col_varchar_nokey AS g1
FROM t2 AS grandparent1
WHERE grandparent1.col_varchar_key IN
(SELECT parent1.col_varchar_nokey AS p1
FROM t2 AS parent1 LEFT JOIN t3 AS parent2 USING (pk)
)
AND grandparent1.col_varchar_key IS NOT NULL
);
g1
DROP TABLE t1, t2, t3;
# End of test for bug#12797534.
#
# Bug#12714094: Assert in optimize_semijoin_nests()
#
CREATE TABLE it (
pk int NOT NULL,
col_varchar VARCHAR(10) DEFAULT NULL,
PRIMARY KEY (pk)
) ENGINE=Sequoiadb;
INSERT INTO it VALUES (1, 'g');
CREATE TABLE ot
SELECT alias1.pk AS field1
FROM it AS alias1
LEFT JOIN it AS alias2
ON alias1.col_varchar = alias2.col_varchar
;
SELECT *
FROM ot
WHERE field1 IN (
SELECT alias1.pk
FROM it AS alias1
LEFT JOIN it AS alias2
ON alias1.col_varchar = alias2.col_varchar
);
field1
1
DROP TABLE it, ot;
# End of test for bug#12714094
#
# Bug#12867557: Valgrind: conditional jump/move at key_cmp
#
# End of test for bug#12867557
#
# Bug#12711441: crash in fix_after_pullout
#
CREATE TABLE t1 (
pk int NOT NULL,
col_int_nokey int DEFAULT NULL,
col_int_key int DEFAULT NULL,
col_time_key time DEFAULT NULL,
col_varchar_key varchar(1) DEFAULT NULL,
PRIMARY KEY (pk)
);
CREATE VIEW v1 AS SELECT * FROM t1;
CREATE TABLE t2 (
col_int_key int DEFAULT NULL,
col_varchar_key varchar(1) DEFAULT NULL,
col_varchar_nokey varchar(1) DEFAULT NULL,
KEY col_varchar_key(col_varchar_key, col_int_key)
);
CREATE TABLE t3 (
pk int NOT NULL,
col_int_key INT DEFAULT NULL,
PRIMARY KEY (pk)
);
CREATE TABLE t4 (
col_int_nokey INT DEFAULT NULL,
col_varchar_key varchar(1) DEFAULT NULL,
col_varchar_nokey varchar(1) DEFAULT NULL,
KEY col_varchar_key(col_varchar_key)
);
CREATE TABLE ts
SELECT alias1.col_time_key AS field1
FROM v1 AS alias1
RIGHT JOIN t3 AS alias2
ON alias2.col_int_key = alias1.col_int_nokey
WHERE alias1.pk >= SOME(
SELECT SQ1_alias1.pk AS SQ1_field1
FROM t3 AS SQ1_alias1
INNER JOIN (t2 AS SQ1_alias2
INNER JOIN t4 AS SQ1_alias3
ON SQ1_alias3.col_varchar_key = SQ1_alias2.col_varchar_nokey)
ON SQ1_alias3.col_int_nokey = SQ1_alias2.col_int_key
WHERE SQ1_alias2.col_varchar_key <= alias1.col_varchar_key
AND SQ1_alias3.col_varchar_nokey <> alias1.col_varchar_key)
;
SELECT * FROM ts WHERE field1 IN (
SELECT alias1.col_time_key AS field1
FROM v1 AS alias1
RIGHT JOIN t3 AS alias2
ON alias2.col_int_key = alias1.col_int_nokey
WHERE alias1.pk >= SOME(
SELECT SQ1_alias1.pk AS SQ1_field1
FROM t3 AS SQ1_alias1
INNER JOIN (t2 AS SQ1_alias2
INNER JOIN t4 AS SQ1_alias3
ON SQ1_alias3.col_varchar_key = SQ1_alias2.col_varchar_nokey)
ON SQ1_alias3.col_int_nokey = SQ1_alias2.col_int_key
WHERE SQ1_alias2.col_varchar_key <= alias1.col_varchar_key
AND SQ1_alias3.col_varchar_nokey <> alias1.col_varchar_key)
);
field1
DROP TABLE t1, t2, t3, t4, ts;
DROP VIEW v1;
# End of test for bug#12711441.
#
# Bug#12664936: Same query executed as where subquery ...
#
CREATE TABLE t1 (
col_varchar_key VARCHAR(1),
KEY col_varchar_key (col_varchar_key)
);
INSERT INTO t1 VALUES
('o'), ('w'), ('m'), ('q'),
('f'), ('p'), ('j'), ('c');
CREATE TABLE t2 (
col_int_nokey INTEGER,
col_int_key INTEGER,
col_varchar_key varchar(1),
KEY col_int_key (col_int_key)
);
INSERT INTO t2 VALUES
(8,5,'u'),(4,5,'p'),(8,1,'o'),(NULL,7,'v'),
(1,2,'g'),(2,1,'q'),(NULL,7,'l'),(3,1,'n');
CREATE TABLE t4
SELECT t2.col_int_nokey, t2.col_varchar_key
FROM t1 JOIN t2 ON t2.col_varchar_key = t1.col_varchar_key
WHERE t2.col_int_key = 1;
SELECT *
FROM t4
WHERE (col_int_nokey, col_varchar_key) IN
(SELECT t2.col_int_nokey, t2.col_varchar_key
FROM t1 JOIN t2 ON t2.col_varchar_key = t1.col_varchar_key
WHERE t2.col_int_key = 1
);
col_int_nokey	col_varchar_key
8	o
2	q
DROP TABLE t1, t2, t4;
# End of test for bug#12664936.
#
# Bug#13340270: assertion table->sort.record_pointers == __null
#
CREATE TABLE t1 (
pk int NOT NULL,
col_int_key int DEFAULT NULL,
col_varchar_key varchar(1) DEFAULT NULL,
col_varchar_nokey varchar(1) DEFAULT NULL,
PRIMARY KEY (pk),
KEY col_int_key (col_int_key),
KEY col_varchar_key (col_varchar_key, col_int_key)
) ENGINE=Sequoiadb;
INSERT INTO t1 VALUES
(10,8,'x','x'),
(11,7,'d','d'),
(12,1,'r','r'),
(13,7,'f','f'),
(14,9,'y','y'),
(15,NULL,'u','u'),
(16,1,'m','m'),
(17,9,NULL,NULL),
(18,2,'o','o'),
(19,9,'w','w'),
(20,2,'m','m'),
(21,4,'q','q');
CREATE TABLE t2
SELECT alias1.col_varchar_nokey AS field1
FROM t1 AS alias1 JOIN t1 AS alias2
ON alias2.col_int_key = alias1.pk OR
alias2.col_int_key = alias1.col_int_key
WHERE alias1.pk = 58 OR alias1.col_varchar_key = 'o'

;
SELECT *
FROM t2
WHERE (field1) IN (SELECT alias1.col_varchar_nokey AS field1
FROM t1 AS alias1 JOIN t1 AS alias2
ON alias2.col_int_key = alias1.pk OR
alias2.col_int_key = alias1.col_int_key
WHERE alias1.pk = 58 OR alias1.col_varchar_key = 'o'
);
field1
o
o
DROP TABLE t1, t2;
# End of test for bug#13340270.
#
# Bug#13335319: Seg fault when analyzing FirstMatch semi-join strategy
#
CREATE TABLE ot1(a INTEGER);
INSERT INTO ot1 VALUES(1), (2), (3);
CREATE TABLE ot2(a INTEGER);
INSERT INTO ot2 VALUES(1), (2), (4), (6), (8), (10);
CREATE TABLE it1(a INTEGER);
INSERT INTO it1 VALUES(1), (3), (5), (7);
CREATE TABLE it2(a INTEGER);
INSERT INTO it2 VALUES(1), (3), (5), (7), (9);
SELECT ot1.a, ot2.a
FROM ot1, ot2
WHERE ot1.a IN (SELECT a FROM it1) AND
ot2.a IN (SELECT a FROM it2);
a	a
1	1
3	1
DROP TABLE ot1, ot2, it1, it2;
# End of test for bug#13335319.
#
# Bug#13334882: Assertion keypart_map failed in MyIsam function
#
CREATE TABLE t1 (
pk int NOT NULL,
col_int_nokey INT NOT NULL,
col_int_key INT NOT NULL,
PRIMARY KEY (pk),
KEY col_int_key (col_int_key)
) ENGINE=Sequoiadb;
INSERT INTO t1 VALUES
(1,4,0),
(2,6,8),
(3,3,1),
(7,2,6),
(8,9,1),
(9,3,6),
(10,8,2),
(11,1,4),
(12,8,8),
(13,8,4),
(14,5,4);
CREATE TABLE t2 (
pk int NOT NULL,
col_int_nokey int NOT NULL,
col_int_key int NOT NULL,
PRIMARY KEY (pk),
KEY col_int_key (col_int_key)
) ENGINE=Sequoiadb;
INSERT INTO t2 VALUES
(10,8,7);
CREATE TABLE t3
SELECT grandparent1.col_int_nokey AS g1
FROM t1 AS grandparent1
WHERE (grandparent1.col_int_nokey, grandparent1.col_int_key) IN
(SELECT parent1.col_int_key AS p1,
parent1.col_int_key AS p2
FROM t1 AS parent1
LEFT JOIN t2 AS parent2
ON parent1.col_int_nokey = parent2.col_int_key
)
AND grandparent1.col_int_key <> 3
;
SELECT * FROM t3
WHERE g1 NOT IN
(SELECT grandparent1.col_int_nokey AS g1
FROM t1 AS grandparent1
WHERE (grandparent1.col_int_nokey, grandparent1.col_int_key) IN
(SELECT parent1.col_int_key AS p1,
parent1.col_int_key AS p2
FROM t1 AS parent1
LEFT JOIN t2 AS parent2
ON parent1.col_int_nokey = parent2.col_int_key
)
AND grandparent1.col_int_key <> 3
);
g1
DROP TABLE t1, t2, t3;
# End of test for bug#13334882.
#
# Bug#13339643: Assertion on JOIN::flatten_subqueries on second execution
#
CREATE TABLE t1 (
col_int_nokey INT,
col_varchar_nokey VARCHAR(1)
);
INSERT INTO t1 VALUES
(1,'o'),
(2,'t');
CREATE TABLE t2 LIKE t1;
INSERT INTO t2 VALUES
(1,'o'),
(4,'f');
CREATE VIEW v_t2 AS SELECT * FROM t2;
CREATE TABLE t3 LIKE t1;
INSERT INTO t3 VALUES
(1,'o'),
(4,'f');
SELECT alias1.col_varchar_nokey
FROM t1 AS alias1
INNER JOIN v_t2 AS alias2
ON alias2.col_int_nokey = alias1.col_int_nokey AND
'o' IN (SELECT col_varchar_nokey
FROM t3);
col_varchar_nokey
o
PREPARE stmt FROM "SELECT alias1.col_varchar_nokey
FROM t1 AS alias1
INNER JOIN v_t2 AS alias2
ON alias2.col_int_nokey = alias1.col_int_nokey AND
'o' IN (SELECT col_varchar_nokey
FROM t3)";
EXECUTE stmt;
col_varchar_nokey
o
DROP VIEW v_t2;
DROP TABLE t1, t2, t3;
# End of test for bug#13339643.
#
# Bug#13424134: Wrong result on JOIN + nested WHERE ... IN clauses
#
CREATE TABLE t1 (
pk int NOT NULL,
col_int_nokey int NOT NULL,
col_int_key int NOT NULL,
PRIMARY KEY (pk),
KEY col_int_key (col_int_key)
) ENGINE=Sequoiadb;
INSERT INTO t1 VALUES
(10,1,7), (13,7,3), (18,0,1), (23,8,1);
CREATE TABLE t2 (
pk int NOT NULL,
col_int_key int NOT NULL,
PRIMARY KEY (pk),
KEY col_int_key (col_int_key)
) ENGINE=Sequoiadb;
INSERT INTO t2 VALUES (1,7);
SELECT t1a.*
FROM t1 AS t1a
JOIN t1 AS t1b USING ( col_int_nokey )
WHERE t1a.col_int_key IN (
SELECT pk
FROM t2
WHERE col_int_key IN (
SELECT col_int_nokey
FROM t1
)
);
pk	col_int_nokey	col_int_key
18	0	1
23	8	1
DROP TABLE t1, t2;
# End of test for bug#13424134.
#
# Bug#13414014: Extra rows in result on semijoin query with where ...
#
CREATE TABLE t1 (
c INT,
d INT,
a VARCHAR(1),
b VARCHAR(1),
KEY a (a)
);
INSERT INTO t1 VALUES
(NULL,8,'x','x'), (7,4,'q','q'), (6,8,'c','c');
CREATE TABLE t2 (
a VARCHAR(1),
KEY a (a)
);
INSERT INTO t2 VALUES
('c'), (NULL), ('x'), ('q');
SELECT *
FROM t2 AS ot
WHERE (a, a) IN
(SELECT a, b
FROM t1 AS it
WHERE it.a = 'x' OR it.c > it.d
)
;
a
x
q
DROP TABLE t1, t2;
# End of test for bug#13414014.
#
# Bug#13545215: Missing rows on nested in-subquery with materialization
#
CREATE TABLE t1 (
col_int_key int,
col_varchar_key varchar(1),
col_varchar_nokey varchar(1),
KEY col_int_key (col_int_key),
KEY col_varchar_key (col_varchar_key,col_int_key)
) ;
INSERT INTO t1 VALUES
(8,'x','x'), (0,'p','p'), (8,'c','c');
CREATE TABLE t2 (
pk int NOT NULL,
col_varchar_key varchar(1),
col_varchar_nokey varchar(1),
PRIMARY KEY (pk),
KEY col_varchar_key (col_varchar_key)
);
INSERT INTO t2 VALUES
(1,'v','v'), (2,'v','v'), (3,'c','c'), (4,NULL,NULL),
(5,'x','x'), (6,'i','i'), (7,'e','e'), (8,'p','p');
CREATE TABLE t3 (
col_int_nokey int
);
INSERT INTO t3 VALUES (7);
SELECT grandparent1.col_varchar_nokey
FROM t1 AS grandparent1 JOIN t1 AS grandparent2 USING (col_int_key)
WHERE grandparent1.col_varchar_key IN (
SELECT col_varchar_nokey
FROM t2 AS parent1
WHERE col_varchar_key IN (
SELECT child1.col_varchar_nokey
FROM t2 AS child1 LEFT JOIN t3 AS child2
ON child1.pk < child2.col_int_nokey
)
);
col_varchar_nokey
c
c
p
x
x
DROP TABLE t1, t2, t3;
# End of test for bug#13545215.
#
# BUG#13553211 - MISSING ROWS ON SELECT WITH IN-SUBQUERY AND
# MATERIALIZATION + SEMIJOIN ON
#
CREATE TABLE t1 (
col_int_key int(11) DEFAULT NULL,
col_varchar_key varchar(1) DEFAULT NULL,
col_varchar_nokey varchar(1) DEFAULT NULL,
KEY col_int_key (col_int_key),
KEY col_varchar_key (col_varchar_key,col_int_key)
);
INSERT INTO t1 VALUES (4,'v','v');
INSERT INTO t1 VALUES (62,'v','v');
INSERT INTO t1 VALUES (7,'c','c');
INSERT INTO t1 VALUES (1,NULL,NULL);
SELECT
alias1.col_varchar_nokey AS a1_nokey,
alias1.col_varchar_key AS a1_key,
alias2.col_varchar_nokey AS a2_nokey
FROM
t1 AS alias1, t1 AS alias2
WHERE
(alias1.col_varchar_nokey,alias2.col_varchar_nokey)
IN
(
SELECT
sq2_alias2.col_varchar_nokey, sq2_alias1.col_varchar_key
FROM
t1 AS sq2_alias1, t1 AS sq2_alias2
)
;
a1_nokey	a1_key	a2_nokey
c	c	c
c	c	v
c	c	v
v	v	c
v	v	c
v	v	v
v	v	v
v	v	v
v	v	v
DROP TABLE t1;
#
# Bug#13541406: Wrong result with loosescan on select .. where .. in
#
CREATE TABLE t1 (
col_int_key INT NOT NULL,
col_varchar_nokey VARCHAR(1) NOT NULL,
KEY col_int_key (col_int_key)
) ENGINE=Sequoiadb;
INSERT INTO t1 VALUES
(7,'v'), (0,'s'), (9,'l'), (3,'y'), (4,'c'), (2,'i'), (5,'h'), (3,'q'),
(1,'a'), (3,'v'), (6,'u'), (7,'s'), (5,'y'), (1,'z'), (204,'h'), (224,'p'),
(9,'e'), (5,'i'), (0,'y'), (3,'w');
CREATE TABLE t2 (
pk INT NOT NULL,
col_int_key INT NOT NULL,
col_varchar_key VARCHAR(1) NOT NULL,
col_varchar_nokey VARCHAR(1) NOT NULL,
PRIMARY KEY (pk),
KEY col_int_key (col_int_key),
KEY col_varchar_key (col_varchar_key,col_int_key)
) ENGINE=Sequoiadb;
INSERT INTO t2 VALUES
(1,0,'j','j'), (2,8,'v','v'), (3,1,'c','c'), (4,8,'m','m'),
(5,9,'d','d'), (6,24,'d','d'), (7,6,'y','y'), (8,1,'t','t'),
(9,6,'d','d'), (10,2,'s','s'), (11,4,'r','r'), (12,8,'m','m'),
(13,4,'b','b'), (14,4,'x','x'), (15,7,'g','g'), (16,4,'p','p'),
(17,1,'q','q'), (18,9,'w','w'), (19,4,'d','d'), (20,8,'e','e');
# This query should never use a LooseScan strategy
SELECT ot1.col_int_key AS field1
FROM t2 AS ot1, t2 AS ot2
WHERE (ot1.col_varchar_key, ot2.col_varchar_nokey) IN (
SELECT it2.col_varchar_nokey, it1.col_varchar_key
FROM t2 AS it1 JOIN t1 AS it2 ON it2.col_int_key = it1.pk);
field1
1
1
1
2
6
6
6
6
6
8
8
8
8
8
8
9
DROP TABLE t1, t2;
# End of test for bug#13541406.
#
# Bug#13576391: Missing rows on select with in-subquery and
# batched-key-access=on and semijoin
#
CREATE TABLE t1 (
col_int_nokey int NOT NULL,
col_varchar_key varchar(1) NOT NULL,
KEY col_varchar_key (col_varchar_key)
) engine=Sequoiadb;
INSERT INTO t1 VALUES
(1,'v'), (7,'s'), (4,'l'), (7,'y'), (0,'c'), (2,'i'), (9,'h'), (4,'q'),
(0,'a'), (9,'v'), (1,'u'), (3,'s'), (8,'y'), (8,'z'), (18,'h'), (84,'p'),
(6,'e'), (3,'i'), (6,'y'), (6,'w');
CREATE TABLE t2 (
col_int_nokey int NOT NULL,
col_varchar_nokey varchar(1) NOT NULL
) engine=Sequoiadb;
INSERT INTO t2 VALUES
(4,'j'), (6,'v'), (3,'c'), (5,'m'), (3,'d'), (246,'d'), (2,'y'), (9,'t'),
(3,'d'), (8,'s'), (1,'r'), (8,'m'), (8,'b'), (5,'x'), (7,'g'), (5,'p'),
(1,'q'), (6,'w'), (2,'d'), (9,'e');
SELECT col_varchar_nokey
FROM t2 AS ot
WHERE col_varchar_nokey IN (
SELECT col_varchar_key
FROM t1 AS it
WHERE it.col_int_nokey <= it.col_int_nokey
AND NOT ot.col_int_nokey < 2
)
ORDER BY col_varchar_nokey;
col_varchar_nokey
c
e
p
s
v
w
y
DROP TABLE t1, t2;
# End of test for bug#13576391.
#
# Bug #13589848 "MISSING ROW ON SELECT WITH NESTED IN CLAUSES WHEN LOOSESCAN=ON"
#
CREATE TABLE t1 (
id INT,
col_varchar_key VARCHAR(1),
col_varchar_nokey VARCHAR(1),
KEY (col_varchar_key)
);
INSERT INTO t1 VALUES (100,'m','m'),
(200,'b','b'), (300,'x','x');
CREATE TABLE t2 (
col_varchar_key VARCHAR(1),
col_varchar_nokey VARCHAR(1),
KEY (col_varchar_key)
);
INSERT INTO t2 VALUES ('b','b');
CREATE TABLE t3 (
col_varchar_key VARCHAR(1),
col_varchar_nokey VARCHAR(1),
KEY (col_varchar_key)
);
INSERT INTO t3 VALUES ('k','k');
SELECT gp1.id
FROM t1 AS gp1 JOIN t3 AS gp2
ON gp2.col_varchar_key <> gp1.col_varchar_nokey
WHERE (gp1.col_varchar_nokey, gp1.col_varchar_nokey)
IN (
SELECT col_varchar_nokey, col_varchar_nokey
FROM t1
WHERE col_varchar_nokey
IN ( SELECT col_varchar_key
FROM t2 LEFT JOIN t3 USING (col_varchar_key) )
)
;
id
200
DROP TABLE t1,t2,t3;
#
# Bug #13596176: Missing row on select with nested in clause when
#                matr=on and bnl=off + MyISAM
#
CREATE TABLE t1 (
int_key int DEFAULT NULL,
vc_key varchar(1) DEFAULT NULL,
vc_nokey varchar(1) DEFAULT NULL,
KEY int_key (int_key),
KEY vc_key (vc_key, int_key)
) ENGINE=Sequoiadb;
INSERT INTO t1 VALUES
(8,'x','x'), (7,'d','d'), (1,'r','r'), (7,'f','f'),
(9,'y','y'), (NULL,'u','u'), (1,'m','m'), (9,NULL,NULL),
(2,'o','o'), (9,'w','w'), (2,'m','m'), (4,'q','q'),
(0,NULL,NULL), (4,'d','d'), (8,'g','g'), (NULL,'x','x'),
(NULL,'f','f'), (0,'p','p'), (NULL,'j','j'), (8,'c','c');
CREATE TABLE t2 (
int_key int DEFAULT NULL,
vc_key varchar(1) DEFAULT NULL,
KEY int_key (int_key),
KEY vc_key (vc_key, int_key)
) ENGINE=Sequoiadb;
INSERT INTO t2 VALUES (8,'g');
SELECT vc_key
FROM t1 as outr
WHERE (vc_nokey, vc_key ) IN
(SELECT vc_nokey, vc_nokey
FROM t1 middle
WHERE vc_nokey IN
(SELECT child1.vc_key
FROM t2 AS child1 JOIN t1 AS child2 USING (int_key)
)
);
vc_key
g
DROP TABLE t1, t2;
# End of test for bug#13596176.
#
# BUG#11754478: MAX/MIN + SUBQUERY + AND FAILS TO RETURN ANY ROWS
# BUG#13599013: MAX/MIN + SUBQUERY IN WHERE CLAUSE MATCHING NO 
#               ROWS + INDEX DOES NOT RETURN NULL
#
CREATE TABLE t1 (
pk int(11) PRIMARY KEY,
int_key int(11),
KEY int_key (int_key)
);
INSERT INTO t1 VALUES (1,0),(2,0),(3,2),(4,0),(5,3),(6,0);
SELECT MIN(int_key) FROM t1 WHERE (4, 4) IN (SELECT 1, 2);
MIN(int_key)
NULL
SELECT MIN(int_key) FROM t1 WHERE (4, 4) IN (SELECT 4, 4);
MIN(int_key)
0
SELECT MIN(pk) FROM t1 WHERE pk IN (SELECT int_key FROM t1) AND pk = 6;
MIN(pk)
NULL
DROP TABLE t1;
# BUG#13726217: Crash in Item_ident::fix_after_pullout()
CREATE TABLE t1(a INTEGER) engine=Sequoiadb;
INSERT INTO t1 VALUES (0);
SELECT 0
FROM t1
WHERE 0 IN
(SELECT 0
FROM t1
WHERE 0 LIKE
(SELECT elt(a, 0) AS b
FROM t1
GROUP BY a
HAVING b
)
);
0
DROP TABLE t1;
# End of test for bug#13726217.
# BUG#13773979: Missing rows on second execution of prepared statement
CREATE TABLE t1 (
col_int_nokey INT,
col_int_key INT,
col_varchar_key VARCHAR(1)
);
INSERT INTO t1 VALUES
(1,7,'v'), (7,0,'s'), (4,9,'l'), (7,3,'y'),
(2,2,'i'), (9,5,'h'), (0,1,'a'), (9,3,'v');
CREATE VIEW v1 AS SELECT * FROM t1;
SELECT *
FROM t1
WHERE col_int_key IN (
SELECT alias1.col_int_nokey AS field1
FROM v1 AS alias1
WHERE alias1.col_varchar_key < 'v'
);
col_int_nokey	col_int_key	col_varchar_key
1	7	v
2	2	i
4	9	l
7	0	s
prepare stmt FROM "SELECT *
FROM t1
WHERE col_int_key IN (
SELECT alias1.col_int_nokey AS field1
FROM v1 AS alias1
WHERE alias1.col_varchar_key < 'v'
)";
execute stmt;
col_int_nokey	col_int_key	col_varchar_key
1	7	v
2	2	i
4	9	l
7	0	s
execute stmt;
col_int_nokey	col_int_key	col_varchar_key
1	7	v
2	2	i
4	9	l
7	0	s
DEALLOCATE PREPARE stmt;
DROP VIEW v1;
DROP TABLE t1;
# End of test for bug#13773979.
#
# BUG#13685026 ASSERTION CUR_SJ_INNER_TABLES == 0 IN
# --OPTIMIZE_TABLE_ORDER::CHOOSE_TABLE_ORDER
#
#
# BUG#13848789: SEGFAULT IN JOIN_READ_NEXT_SAME AT 
#               SQL/SQL_EXECUTOR.CC ON HAVING...IN...JOIN
#
CREATE TABLE t1 (
col_int_key INT,
col_varchar_key VARCHAR(1),
KEY col_int_key (col_int_key),
KEY col_varchar_key (col_varchar_key)
);
INSERT INTO t1 VALUES (8,'x');
CREATE TABLE t2 (
col_varchar_key VARCHAR(1),
KEY col_varchar_key (col_varchar_key)
);
INSERT INTO t2 VALUES ('x'), ('y');
SELECT MIN(col_int_key)
FROM t1 as t1_outer
HAVING (1, 2) IN (
SELECT t1_inner.col_int_key, MAX(t1_inner.col_int_key)
FROM t1 as t1_inner JOIN t2
ON t2.col_varchar_key = t1_inner.col_varchar_key
);
MIN(col_int_key)
DROP TABLE t1,t2;
# Bug#13838810: Segfault in evaluate_null_complemented_join_record
CREATE TABLE t1 (
pk int NOT NULL,
col_int_nokey int DEFAULT NULL,
col_int_key int DEFAULT NULL,
col_varchar_key varchar(1) DEFAULT NULL,
PRIMARY KEY (pk),
KEY col_int_key (col_int_key),
KEY col_varchar_key (col_varchar_key,col_int_key)
) ENGINE=Sequoiadb;
INSERT INTO t1 VALUES (10,NULL,8,'x');
CREATE TABLE t2 (
pk int NOT NULL,
col_varchar_nokey varchar(1) DEFAULT NULL,
PRIMARY KEY (pk)
) ENGINE=Sequoiadb;
INSERT INTO t2 VALUES (1,'x');
CREATE TABLE t3 (
pk int NOT NULL,
col_varchar_key varchar(1) DEFAULT NULL,
col_varchar_nokey varchar(1) DEFAULT NULL,
PRIMARY KEY (pk),
KEY col_varchar_key (col_varchar_key)
) ENGINE=Sequoiadb;
INSERT INTO t3 VALUES
(1,'v','v'), (2,'v','v'), (3,'c','c'), (4,NULL,NULL);
SELECT table1.pk,table2.pk, table3.pk
FROM t2 AS table1
LEFT JOIN t1 AS table2
LEFT JOIN t1 AS table3
ON table3.col_int_key = table2.col_int_key
ON table3.pk = table2.col_int_nokey AND
table1.col_varchar_nokey IN (
SELECT subquery3_t1.col_varchar_nokey
FROM t3 AS subquery3_t1
LEFT JOIN t1 AS subquery3_t2
ON subquery3_t2.col_varchar_key = subquery3_t1.col_varchar_key
WHERE subquery3_t2.col_int_nokey <> 9
)
;
pk	pk	pk
1	NULL	NULL
DROP TABLE t1, t2, t3;
Extra test case for specific code coverage
CREATE TABLE t1(pk INTEGER);
INSERT INTO t1 VALUES(1), (2);
SELECT *
FROM t1 AS ot1 LEFT JOIN t1 AS ot2
ON ot1.pk=ot2.pk AND
ot2.pk IN
(SELECT it1.pk
FROM t1 AS it1 LEFT JOIN t1 AS it2 ON it1.pk=it2.pk);
pk	pk
1	1
2	2
DROP TABLE t1;
# End of test for bug#13838810.
#
# Bug#13845930: Segfault in st_join_table::and_with_condition
#
CREATE TABLE t1 (
col_int INTEGER
);
CREATE TABLE t2 (
col_varchar_1 VARCHAR(1),
col_varchar_2 VARCHAR(1)
);
INSERT INTO t2 VALUES ('x','x'), ('c','c');
PREPARE stmt FROM '
SELECT alias2.col_varchar_2 AS field1
FROM t2 AS alias1
     JOIN
      (t2 AS alias2
       LEFT JOIN t2 AS alias3
       ON (8, 92) IN
          (SELECT sq1_alias1.col_int,
                  sq1_alias2.col_int
           FROM t1 AS sq1_alias1 JOIN t1 AS sq1_alias2
          )
      )
     ON alias3.col_varchar_1 = alias2.col_varchar_2
';
EXECUTE stmt;
field1
EXECUTE stmt;
field1
DEALLOCATE prepare stmt;
DROP TABLE t1, t2;
# End of test for bug#13845930.
#
# Bug#13855925: Assert 'prebuilt->search_tuple->n_fields > 0'
#               in ha_innobase::index_read
#
# End of test for bug#13855925.
#
# Bug#13897959: Segfault in setup_semijoin_dups_elimination()
#
# End of test for bug#13897959.
#
# Bug#13898625 ASSERT `(REMAINING_TABLES_AFTER != 0) ...' IN
# BEST_EXTENSION_BY_LIMITED_SEARCH
#
CREATE TABLE t1 (
pk int(11) NOT NULL,
col_int_nokey INT,
col_int_key INT,
col_varchar_key VARCHAR(1),
col_varchar_nokey VARCHAR(1),
PRIMARY KEY (pk),
KEY col_int_key (col_int_key),
KEY col_varchar_key (col_varchar_key,col_int_key)
);
INSERT INTO t1 VALUES (26,6,NULL,'f','f');
INSERT INTO t1 VALUES (29,6,8,'c','c');
CREATE TABLE t2 (
pk INT NOT NULL,
col_int_nokey INT,
col_int_key INT,
col_varchar_key VARCHAR(1),
col_varchar_nokey VARCHAR(1),
PRIMARY KEY (pk),
KEY col_int_key (col_int_key),
KEY col_varchar_key (col_varchar_key,col_int_key)
);
INSERT INTO t2 VALUES (1,2,4,'v','v');
INSERT INTO t2 VALUES (2,150,62,'v','v');
INSERT INTO t2 VALUES (5,5,0,'x','x');
INSERT INTO t2 VALUES (6,3,7,'i','i');
INSERT INTO t2 VALUES (7,1,7,'e','e');
CREATE VIEW view_c AS SELECT * FROM t2;
PREPARE prep_stmt_7430 FROM 'SELECT SUM( alias1.col_varchar_key ) AS field1
FROM t1 AS alias1
RIGHT JOIN t2 AS alias2
INNER JOIN t1 AS alias3
ON (alias3.col_varchar_key = alias2.col_varchar_key )
ON ( "v" ) IN (
SELECT sq1_alias1.col_varchar_nokey AS sq1_field1
FROM t1 AS sq1_alias1
)
WHERE alias3.pk IN (
SELECT sq2_alias1.col_int_key AS sq2_field1
FROM ( view_c AS sq2_alias1, t1 AS sq2_alias2 )
)
';
EXECUTE prep_stmt_7430;
field1
NULL
EXECUTE prep_stmt_7430;
field1
NULL
PREPARE prep_stmt_7430 FROM 'SELECT SUM( alias1.col_varchar_key ) AS field1
FROM t1 AS alias1
RIGHT JOIN t2 AS alias2
INNER JOIN t1 AS alias3
ON (alias3.col_varchar_key = alias2.col_varchar_key )
ON ( "v" ) IN (
SELECT sq1_alias1.col_varchar_nokey AS sq1_field1
FROM t1 AS sq1_alias1
)
WHERE alias3.pk IN (
SELECT sq2_alias1.col_int_key AS sq2_field1
FROM ( view_c AS sq2_alias1 , t1 AS sq2_alias2 )
WHERE sq2_alias1.col_varchar_nokey <> alias2.col_varchar_key
AND sq2_alias1.col_varchar_key < "l"
  )
';
EXECUTE prep_stmt_7430;
field1
NULL
EXECUTE prep_stmt_7430;
field1
NULL
DROP TABLE t1,t2;
DROP VIEW view_c;
#
# Bug#13902463 SEGFAULT IN BITMAP<64U>::MERGE OR ADD_KEY_FIELD
# ON SECOND EXEC OF PREP STMT
#
CREATE TABLE t1 (
pk INT,
col_int_nokey INT,
col_int_key INT,
col_varchar_key VARCHAR(1),
col_varchar_nokey VARCHAR(1),
KEY col_varchar_key (col_varchar_key)
);
CREATE VIEW view_b AS SELECT * FROM t1;
PREPARE prep_stmt_20421 FROM 'SELECT alias2.col_varchar_nokey AS field1
FROM t1 AS alias1
INNER JOIN t1 AS alias2
ON (alias1.col_varchar_key = alias2.col_varchar_nokey
AND ( alias1.col_int_key ) IN (
SELECT t1.col_int_nokey
FROM t1
)
)
WHERE alias1.col_varchar_key IN (
SELECT sq2_alias2.col_varchar_nokey AS sq2_field1
FROM view_b AS sq2_alias1
INNER JOIN t1 AS sq2_alias2
ON (sq2_alias2.col_varchar_key = sq2_alias1.col_varchar_key )
WHERE sq2_alias1.pk > alias2.pk
)
';
EXECUTE prep_stmt_20421;
field1
EXECUTE prep_stmt_20421;
field1
ALTER TABLE t1 DROP INDEX col_varchar_key;
PREPARE prep_stmt_20421 FROM 'SELECT alias2.col_varchar_nokey AS field1
FROM t1 AS alias1
INNER JOIN t1 AS alias2
ON (alias1.col_varchar_key = alias2.col_varchar_nokey
AND ( alias1.col_int_key ) IN (
SELECT t1.col_int_nokey
FROM t1
)
)
WHERE alias1.col_varchar_key IN (
SELECT sq2_alias2.col_varchar_nokey AS sq2_field1
FROM view_b AS sq2_alias1
INNER JOIN t1 AS sq2_alias2
ON (sq2_alias2.col_varchar_key = sq2_alias1.col_varchar_key )
WHERE sq2_alias1.pk > alias2.pk
)
';
EXECUTE prep_stmt_20421;
field1
EXECUTE prep_stmt_20421;
field1
DROP TABLE t1;
DROP VIEW view_b;
#
# Bug#13907277: Segfault in evaluate_null_complemented_join_record
#
CREATE TABLE t1 (
pk INTEGER,
col_varchar_nokey VARCHAR(1),
col_varchar_key VARCHAR(1),
PRIMARY KEY (pk)
);
INSERT INTO t1 VALUES (1, 'x', 'x');
CREATE TABLE t2 (
pk INTEGER,
PRIMARY KEY (pk)
);
INSERT INTO t2 VALUES (1);
CREATE TABLE t3 (
pk INTEGER,
col_int_nokey INTEGER,
col_int_key INTEGER,
col_varchar_nokey VARCHAR(1),
PRIMARY KEY (pk)
);
INSERT INTO t3 VALUES (1, 6, 5, 'r');
SELECT outer_t1.pk, outer_t2.pk
FROM t3 AS outer_t1
RIGHT JOIN t2 AS outer_t2
ON outer_t1.col_int_nokey IN
(SELECT inner_t1.col_int_nokey
FROM t3 AS inner_t1
LEFT JOIN t1 AS inner_t2
INNER JOIN t1 AS inner_t3
ON inner_t3.pk = inner_t2.pk
ON inner_t3.col_varchar_nokey = inner_t2.col_varchar_key
);
pk	pk
1	1
DROP TABLE t1, t2, t3;
# End of test for bug#13907277.
#
# Bug#13955713: Assert 'JOIN->best_read < ...' on second execution
#
CREATE TABLE t1 (
pk INTEGER,
col_varchar_key VARCHAR(1),
col_varchar_nokey VARCHAR(1)
);
PREPARE stmt FROM "
SELECT MIN(alias2.col_varchar_key) AS field1
FROM t1 AS alias1
     INNER JOIN (t1 AS alias2
       INNER JOIN t1 AS alias3
       ON 8 IN
         (SELECT sq1_alias1.pk AS sq1_field2
          FROM t1 AS sq1_alias1
          WHERE 9 IN
             (SELECT SUM(t1_sq1_alias1.pk) AS t1_sq1_field2
              FROM t1 AS t1_sq1_alias1
             )
         )
     )
     ON alias3.col_varchar_nokey = alias2.col_varchar_key
WHERE EXISTS
   (SELECT sq2_alias1.pk AS sq2_field1
    FROM t1 AS sq2_alias1
    WHERE sq2_alias1.col_varchar_key < alias1.col_varchar_nokey
   )
";
EXECUTE stmt;
field1
NULL
EXECUTE stmt;
field1
NULL
DEALLOCATE PREPARE stmt;
DROP TABLE t1;
# End of test for bug#13955713.
#
# Bug#13956813: Segfault in memcpy from Join_cache::write_record_data()
#
CREATE TABLE t1 (
pk INT,
col_varchar_key VARCHAR(1),
col_varchar_nokey VARCHAR(1)
);
CREATE TABLE t2 (
pk INT,
col_varchar_key VARCHAR(1),
col_varchar_nokey VARCHAR(1)
);
INSERT INTO t2 VALUES
(10,'j','j'), (11,'z','z'), (12,'c','c'), (13,'a','a'),
(14,'q','q'), (15,'y','y'), (16,NULL,NULL), (17,'r','r'),
(18,'v','v'), (19,NULL,NULL), (20,'r','r');
CREATE TABLE t3 (
pk INT,
col_int_key INT,
col_varchar_key VARCHAR(1),
KEY col_int_key (col_int_key)
);
INSERT INTO t3 VALUES
(15,NULL,'u'), (16,1,'m'), (17,9,NULL), (18,2,'o'),
(19,9,'w'), (20,2,'m'), (21,4,'q'), (22,0,NULL),
(23,4,'d'), (24,8,'g'), (25,NULL,'x'), (26,NULL,'f'),
(27,0,'p'), (28,NULL,'j'), (29,8,'c');
CREATE VIEW view_inline_0 AS
SELECT t1.*
FROM t1 INNER JOIN t3
ON t1.pk = t3.pk;
CREATE VIEW view_inline_1 AS
SELECT sq2_alias2.col_varchar_key AS sq2_field1,
sq2_alias1.col_varchar_key AS sq2_field2
FROM t3 AS sq2_alias1 LEFT OUTER JOIN t3 AS sq2_alias2
ON sq2_alias1.pk = sq2_alias2.col_int_key;
CREATE VIEW view_inline_2 AS
SELECT 'p', 'p' UNION SELECT 'k', 's';
SET @optimizer_switch_saved= @@optimizer_switch;
SET @@optimizer_switch="derived_merge=off";
SELECT SUM(alias1.col_varchar_nokey) AS field2
FROM t2 AS alias2
LEFT JOIN (SELECT * FROM view_inline_0) AS alias1
ON alias2.col_varchar_key = alias1.col_varchar_key AND
(alias2.col_varchar_nokey, alias2.col_varchar_key) IN
(SELECT * FROM view_inline_1
)
WHERE (alias1.col_varchar_key, alias1.col_varchar_nokey) IN
(SELECT * FROM view_inline_2
);
field2
NULL
SET @@optimizer_switch= @optimizer_switch_saved;
DROP VIEW view_inline_0, view_inline_1, view_inline_2;
DROP TABLE t1, t2, t3;
# End of test for bug#13956813.
#
# Bug#13974177: Assert !(tab->table->regginfo.not_exists_optimize...
#
# End of test for bug#13974177.
#
# Bug#13971022: Assert 'keyparts > 0' failed in create_ref_for_key...
#
CREATE TABLE t1 (
pk INT,
col_int_key INT,
col_varchar_key VARCHAR(1),
PRIMARY KEY (pk),
KEY col_varchar_key (col_varchar_key,col_int_key)
);
CREATE TABLE t2 (
pk INT,
col_int_key INT,
col_varchar_key VARCHAR(1),
col_varchar_nokey VARCHAR(1),
PRIMARY KEY (pk)
) ENGINE=Sequoiadb;
CREATE TABLE t3 (
i INT
);
SET @optimizer_switch_saved= @@optimizer_switch;
SET @@optimizer_switch="derived_merge=off";
SELECT table1.pk AS field1
FROM ( SELECT subquery1_t1. *
FROM t2 AS subquery1_t1
JOIN t2 AS subquery1_t2
ON subquery1_t2.pk = subquery1_t1.pk) AS table1
STRAIGHT_JOIN t2 AS table2
ON table1.col_int_key IN (SELECT 7 FROM t3)
WHERE table1.col_varchar_nokey IN
(SELECT subquery3_t1.col_varchar_key AS subquery3_field1
FROM t1 AS subquery3_t1
)
;
field1
SET @@optimizer_switch= @optimizer_switch_saved;
DROP TABLE t1, t2, t3;
# End of test for bug#13971022.
#
# Bug#13623473 "MISSING ROWS ON SELECT AND JOIN WITH
# TIME/DATETIME COMPARE" - Subquery part of test.
#
# End of test for bug#13623473.
#
# Bug#13980954: Missing data on left join + null value + where..in
#
CREATE TABLE t1 (
ik INT,
vc varchar(1)
);
INSERT INTO t1 VALUES (8, 'x'), (NULL, 'x');
CREATE TABLE t2 (
ik INT,
vc varchar(1)
);
INSERT INTO t2 VALUES
(0, 'x'), (7, 'i'), (7, 'e'), (1, 'p'), (7, 's'), (1, 'j');
SELECT t2.vc, t2.ik AS t2_ik, t1.ik AS t1_ik
FROM t2 LEFT JOIN t1 ON t2.vc=t1.vc
WHERE t2.vc IN (SELECT vc FROM t2 AS t3);
vc	t2_ik	t1_ik
x	0	8
x	0	NULL
i	7	NULL
e	7	NULL
p	1	NULL
s	7	NULL
j	1	NULL
DROP TABLE t1, t2;
# End of test for bug#13980954.
#
# Bug#14048292: Segfault in Item_field::result_type on 2nd execution
#               of prep stmt with join of view
#
CREATE TABLE t1 (
col_int INT
);
INSERT INTO t1 VALUES (0), (1);
CREATE VIEW view_t1 AS SELECT * FROM t1;
PREPARE stmt FROM "SELECT alias1.col_int
FROM t1 AS alias1
LEFT JOIN view_t1 AS alias2
ON alias1.col_int IN
(SELECT sq1_alias1.col_int
FROM t1 AS sq1_alias1
)";
EXECUTE stmt;
col_int
0
0
1
1
EXECUTE stmt;
col_int
0
0
1
1
DEALLOCATE PREPARE stmt;
DROP VIEW view_t1;
DROP TABLE t1;
# End of test for bug#14048292.
#
# Bug#14064201: Missing data on join of derived table + WHERE .. IN
#               with two operands
#
CREATE TABLE t1 (
col_varchar_nokey VARCHAR(1)
);
INSERT INTO t1 VALUES
('v'), ('s'), ('l'), ('y'), ('c'), ('i'), ('h'), ('q'), ('a'), ('v'),
('u'), ('s'), ('y'), ('z'), ('h'), ('p'), ('e'), ('i'), ('y'), ('w');
CREATE TABLE t2 (
col_varchar_key VARCHAR(1),
col_varchar_nokey VARCHAR(1),
KEY col_varchar_key(col_varchar_key)
);
INSERT INTO t2 VALUES
('j','j'), ('v','v'), ('c','c'), ('m','m'), ('d','d'), ('d','d'), ('y','y');
SET @optimizer_switch_saved= @@optimizer_switch;
SET @@optimizer_switch="derived_merge=off";
SELECT *
FROM (SELECT * FROM t2) AS derived1
LEFT JOIN t1
USING (col_varchar_nokey)
WHERE (col_varchar_nokey, col_varchar_nokey) IN
(SELECT col_varchar_nokey, col_varchar_key
FROM t2 AS derived2
);
col_varchar_nokey	col_varchar_key
v	v
y	y
c	c
v	v
y	y
y	y
j	j
m	m
d	d
d	d
SET @@optimizer_switch= @optimizer_switch_saved;
DROP TABLE t1, t2;
CREATE TABLE t1 (
col_int_nokey int NOT NULL,
col_int_key int NOT NULL,
KEY col_int_key (col_int_key)
);
INSERT INTO t1 VALUES
(1,7), (7,0), (4,9), (7,3), (0,4), (2,2), (9,5), (4,3), (0,1), (9,3),
(1,6), (3,7), (8,5), (8,1), (18,204), (84,224), (6,9), (3,5), (6,0), (6,3);
CREATE TABLE t2 (
col_int_nokey int NOT NULL,
col_int_key int NOT NULL,
KEY col_int_key (col_int_key)
);
INSERT INTO t2 VALUES
(4,0), (6,8), (3,1), (5,8), (3,9), (246,24), (2,6), (9,1), (3,6), (8,2),
(1,4), (8,8), (8,4), (5,4), (7,7), (5,4), (1,1), (6,9), (2,4), (9,8);
SELECT grandparent1.*
FROM t1 AS grandparent1
LEFT JOIN t1 USING (col_int_nokey)
WHERE (col_int_nokey, col_int_nokey) IN
(SELECT col_int_nokey, col_int_key
FROM t2
);
col_int_nokey	col_int_key
1	7
1	6
7	0
7	3
7	0
7	3
1	7
1	6
8	5
8	1
8	5
8	1
DROP TABLE t1, t2;
# End of test for bug#14064201.
#
# Bug#18223655:ASSERTION FAILED: (INT)IDX >= 0
#               && IDX < PARENT_JOIN->TABLES
#
CREATE TABLE b (d INT);
CREATE TABLE c (a INT, b INT,c INT,d BLOB NOT NULL);
SELECT(SELECT  1
FROM b WHERE(SELECT 1 IN (SELECT 1 FROM b WHERE 1 NOT BETWEEN d AND 1)
FROM  b) IN (SELECT d FROM c)) as cc FROM  b;
cc
INSERT INTO b VALUE(1);
INSERT INTO c VALUES(1,2,3,'1'),(2,3,4,'1'),(3,4,5,'C');
SELECT(SELECT d FROM b WHERE(SELECT d IN 
(SELECT d FROM b WHERE 1 NOT BETWEEN d AND 1) FROM b) IN
(SELECT d FROM c)) as cc FROM  c;
cc
1
1
1
DROP TABLE b,c;
#
# Bug#18447874:WRONG RESULT COMING FROM SEMI-JOIN 
#
CREATE TABLE b (
d INT(11)
);
CREATE TABLE c (
d BLOB
) ;
CREATE TABLE d (
b INT(11)
);
INSERT INTO b VALUES(1),(2),(4);
INSERT INTO c VALUES(1),(2),(3);
SELECT  1 FROM b  WHERE (SELECT 1 FROM d ) IN (SELECT d FROM c) ;
1
INSERT INTO d VALUES(2);
SELECT  1 FROM b  WHERE (SELECT 1 FROM d ) IN (SELECT d FROM c) ;
1
1
1
1
DROP TABLE b,c,d;
#
# Bug#17292723:INCORRECT RESULT FOR (SELECT...) IN (SELECT...) STATEMENT
#
set @@optimizer_switch=@old_opt_switch;
# End of 5.6 tests
#
# Bug#19336348 DEBUG CRASH AT SETUP_SEMIJOIN_DUPS_ELIMINATION IN SQL/SQL_SELECT.CC
#
CREATE TABLE t1 (
col_varchar_nokey varchar(1)
) ENGINE=Sequoiadb;
INSERT INTO t1 VALUES ('c'),(NULL),('x');
CREATE TABLE t2 (
pk int,
col_varchar_key varchar(1),
PRIMARY KEY (pk),
KEY col_varchar_key (col_varchar_key)
) ENGINE=Sequoiadb;
INSERT INTO t2 VALUES (10,'l'),(11,'p');
SELECT 1
FROM t1 AS outr
WHERE outr.col_varchar_nokey IN
(
SELECT innr.col_varchar_key
FROM t2 AS innr
WHERE innr.pk <= 7
)
;
1
DROP TABLE t1,t2;
#
# Bug#18174394 BLOBS: CRASH AFTER UNINITIALIZED VALUES IN ITEM_FIELD::STR_RESULT
#
CREATE TABLE t1(d BLOB, b BLOB);
INSERT INTO t1(d,b) VALUES ('aaaa',''),('bnbb','');
SELECT 1 FROM t1
WHERE (SELECT b FROM t1) IN (SELECT (d>=1) FROM t1);
ERROR 21000: Subquery returns more than 1 row
DROP TABLE t1;
#
# Bug#19779600: ASSERT FAILED IN REPLACE_SUBCONDITION WITH IN
#               PREDICATE INSIDE IN PREDICATE
#
CREATE TABLE t(X INT) ENGINE=Sequoiadb;
INSERT INTO t VALUES (1);
SELECT 1 FROM t WHERE (1 IN (SELECT 1 FROM t)) IN (SELECT 1 FROM t);
1
1
DROP TABLE t;
#
# Bug#19465034 ASSERT ON SETUP_SEMIJOIN_DUPS_ELIMINATION IN SQL/SQL_SELECT.CC
#
CREATE TABLE t1 (
pk INTEGER NOT NULL,
i1 INTEGER NOT NULL,
PRIMARY KEY (pk)
) ENGINE=Sequoiadb;
INSERT INTO t1 VALUES (1,1);
CREATE TABLE t2 (
pk INTEGER NOT NULL,
c1 VARCHAR(1) NOT NULL,
PRIMARY KEY (pk),
KEY c1_key (c1)
) ENGINE=Sequoiadb;
INSERT INTO t2 VALUES (1,'j'),(2,'v'),(3,'c');
CREATE TABLE t3 (
pk INTEGER NOT NULL,
c1 VARCHAR(1) NOT NULL,
PRIMARY KEY (pk),
KEY c1_key (c1)
) ENGINE=Sequoiadb;
INSERT INTO t3 VALUES (10,'v'),(11,'s');
SELECT *
FROM t1 JOIN t2 ON t1.i1 >= t2.pk
WHERE t2.c1 IN (
SELECT  t3.c1
FROM t3
WHERE t3.pk < 3
);
pk	i1	pk	c1
DROP TABLE t1,t2,t3;
#
# Bug#19586047: CRASH IN ARG_COMPARATOR::SET_CMP_FUNC
#
CREATE TABLE t1(x INT) ENGINE=Sequoiadb;
INSERT INTO t1 VALUES (1);
SELECT 1 FROM t1 WHERE EXISTS(SELECT 1) IN (SELECT 1 FROM t1);
1
1
SELECT 1 FROM t1 WHERE (SELECT 1, 2 FROM t1) IN (SELECT 1, 2 FROM t1);
1
1
SELECT 1 FROM t1 WHERE
(SELECT 1, 2 FROM t1 WHERE x = 2) IN (SELECT 1, 2 FROM t1);
1
DROP TABLE t1;
#
#Bug#20119743 ASSERTIONQEP_TAB->USE_ORDER() IN ENUM_NESTED_LOOP_STATE
#             EVALUATE_JOIN_RECORD
#
#
# Bug#20554585 ASSERT JOIN()->TABLES == 0... IN JOIN_TAB::GET_SJ_STRATEGY ON SUBQUERY + VAR
#
CREATE TABLE t1 (
pk int NOT NULL,
PRIMARY KEY (pk)
);
CREATE TABLE t2 (
pk int NOT NULL,
col_int_key int,
col_varchar_key varchar(1),
PRIMARY KEY (pk),
KEY col_int_key (col_int_key),
KEY col_varchar_key (col_varchar_key)
);
CREATE TABLE t3 (
pk int NOT NULL,
col_int_key int,
col_varchar_key varchar(1),
col_varchar varchar(1),
PRIMARY KEY (pk),
KEY col_int_key (col_int_key),
KEY col_varchar_key (col_varchar_key)
);
INSERT INTO t3 VALUES (1,4,'c','g'),(20,1,'i','p');
CREATE TABLE t4 (
col_int int
);
CREATE TABLE t5 (
col_varchar_key varchar(1),
pk int NOT NULL,
col_int int,
PRIMARY KEY (pk),
KEY col_varchar_key (col_varchar_key)
);
SELECT table1.col_varchar_key AS field1
FROM (t3 AS table1
INNER JOIN (
SELECT SUBQUERY1_t1.*
FROM (t1 AS SUBQUERY1_t1
RIGHT JOIN (t2 AS SUBQUERY1_t2
INNER JOIN t3 AS SUBQUERY1_t3
ON (SUBQUERY1_t3.col_varchar_key = SUBQUERY1_t2.col_varchar_key)
) ON (SUBQUERY1_t3.col_int_key = SUBQUERY1_t2.pk)
)
WHERE SUBQUERY1_t2.col_varchar_key >= ANY (
SELECT CHILD_SUBQUERY1_t2.col_varchar AS CHILD_SUBQUERY1_field1
FROM (t2 AS CHILD_SUBQUERY1_t1
LEFT OUTER JOIN t3 AS CHILD_SUBQUERY1_t2
ON (CHILD_SUBQUERY1_t2.col_int_key = CHILD_SUBQUERY1_t1.col_int_key)
)
WHERE CHILD_SUBQUERY1_t1.pk >= SUBQUERY1_t2.pk
)
) AS table2
ON (table2.pk = table1.pk)
)
WHERE (EXISTS ((
SELECT DISTINCT SUBQUERY2_t2.col_int AS SUBQUERY2_field1
FROM (t4 AS SUBQUERY2_t1
LEFT OUTER JOIN t5 AS SUBQUERY2_t2
ON (SUBQUERY2_t2.pk = SUBQUERY2_t1.col_int)
)
WHERE SUBQUERY2_t2.col_varchar_key != @var4
)))
AND table1.col_int_key < (35 + 192)
ORDER BY field1
;
field1
DROP TABLE t1, t2, t3, t4, t5;
#
# Bug#18892055: MISSING DATA ON SELECT ... IN WITH JOINS AND INNODB
#               ENGINE
#
CREATE TABLE t1 (
col_int_key INT,
pk INT NOT NULL,
PRIMARY KEY (pk),
KEY col_int_key (col_int_key)
) ENGINE = Sequoiadb;
INSERT INTO t1 VALUES
( 0, 3 ),
( 0, 4 ),
( 3, 1 ),
( 900000000, 2 ),
( 1368719360, 5 ),
( 1922236416, 6 ),
( 8,7 );
CREATE TABLE t2 (
pk INT NOT NULL,
col_int INT,
PRIMARY KEY (pk)
) ENGINE = Sequoiadb;
INSERT INTO t2 VALUES
( 1, 3 ),
( 2, 2 ),
( 3, 8 ),
( 4, 7 );
CREATE TABLE t3 (
col_int_key INT,
col_int INT,
KEY (col_int_key)
) ENGINE = Sequoiadb;
INSERT INTO t3 VALUES
( 5, 1 ),
( -1, -1 ),
( 300000000, 1 ),
( 8, 1 );
CREATE TABLE t4 ( col_int_key INT ) ENGINE = Sequoiadb;
INSERT INTO t4 VALUES
(0),
(3),
(8),
(900000000),
(1368719360),
(1922236416);
SELECT *
FROM t4
WHERE (col_int_key) IN (
SELECT t1.col_int_key
FROM t1 LEFT JOIN ( t2 JOIN t3 ON t3.col_int_key = t2.col_int ) USING ( pk )
WHERE t3.col_int IS NULL
)
ORDER BY col_int_key
;
col_int_key
0
3
8
900000000
1368719360
1922236416
DROP TABLE t1, t2, t3, t4;
#
# Bug#20835095 CRASH AT CREATE_REF_FOR_KEY IN SQL/SQL_SELECT.CC
#
CREATE TABLE t1 (
pk INTEGER,
var_10_latin1 VARCHAR(10) CHARACTER SET latin1,
var_255_utf8 VARCHAR(255) CHARACTER SET utf8,
var_255_latin1 VARCHAR(255) CHARACTER SET latin1,
var_10_utf8 VARCHAR(10) CHARACTER SET utf8,
PRIMARY KEY (pk)
);
CREATE VIEW v1 AS SELECT * FROM t1;
INSERT INTO t1 VALUES
(1,'FROCJ','korrhrspki','UAYVL','BPZIS'),
(2,'him','a','CHYKN','OZZQT'),
(3,'WBITK','ULWBF','have','rhrh'),
(4,'or','right','up','it'),
(5,'GGDCP','x','who','as'),
(6,'j','i','e','w');
CREATE TABLE tv
SELECT var_255_utf8 AS field1
FROM t1;
SELECT * FROM tv
WHERE field1 IN (
SELECT tv1.var_255_utf8
FROM v1 AS tv1 LEFT JOIN v1 AS tv2 ON tv1.var_10_latin1=tv2.var_10_utf8);
field1
korrhrspki
a
ULWBF
right
x
i
DROP VIEW v1;
DROP TABLE t1, tv;
# 17832047 Crash in calculate_materialization_costs
CREATE TABLE t1(a INTEGER PRIMARY KEY);
INSERT INTO t1 VALUES (0),(1),(2);
SELECT 1 FROM t1
WHERE 1 IN
(SELECT 1 BETWEEN (LENGTH(a) IN (SELECT 1 FROM t1)) AND 1
FROM t1
);
1
1
1
1
DROP TABLE t1;
# 17845989 Assertion failed: !(used_tables() & ...
CREATE TABLE a(b INTEGER) engine=Sequoiadb;
CREATE TABLE c(a INTEGER) engine=Sequoiadb;
SELECT 1
FROM a
WHERE 1 IN (SELECT (a.b IS NULL) IN (SELECT 1 FROM c) FROM c)
;
1
DROP TABLE a, c;
#
# Bug#18194196: OPTIMIZER EXECUTES STATEMENT INPERFORMANT
#
CREATE TABLE t1 (uid INTEGER, fid INTEGER, INDEX(uid));
INSERT INTO t1 VALUES
(1,1), (1,2), (1,3), (1,4),
(2,5), (2,6), (2,7), (2,8),
(3,1), (3,2), (3,9);
CREATE TABLE t2 (uid INT PRIMARY KEY, name VARCHAR(128), INDEX(name));
INSERT INTO t2 VALUES
(1, "A"), (2, "B"), (3, "C"), (4, "D"), (5, "E"),
(6, "F"), (7, "G"), (8, "H"), (9, "I");
CREATE TABLE t3 (uid INT, fid INT, INDEX(uid));
INSERT INTO t3 VALUES
(1,1), (1,2), (1,3),(1,4),
(2,5), (2,6), (2,7), (2,8),
(3,1), (3,2), (3,9);
CREATE TABLE t4 (uid INT PRIMARY KEY, name VARCHAR(128), INDEX(name));
INSERT INTO t4 VALUES
(1, "A"), (2, "B"), (3, "C"), (4, "D"), (5, "E"),
(6, "F"), (7, "G"), (8, "H"), (9, "I");
FLUSH STATUS;
SELECT name FROM t2, t1
WHERE t1.uid IN (SELECT t4.uid FROM t4, t3 WHERE t3.uid=1 AND t4.uid=t3.fid)
AND t2.uid=t1.fid;
name
A
B
C
D
E
F
G
H
A
B
I
DROP TABLE t1,t2,t3,t4;
# End of test for Bug#18194196
#
# Bug#21184091 ASSERT `READ_ROWS >= 0.0' AT 
#              COST_MODEL_SERVER::TMPTABLE_READWRITE_COST()
#
CREATE TABLE t1 (
pk INTEGER,
col_varchar varchar(1),
col_int INTEGER,
PRIMARY KEY (pk)
) ENGINE=Sequoiadb;
CREATE TABLE t2 (
col_int INTEGER,
col_varchar varchar(1)
) ENGINE=Sequoiadb;
INSERT INTO t2 VALUES (7,'x');
INSERT INTO t2 VALUES (4,'z');
SELECT t2.col_varchar
FROM t2 STRAIGHT_JOIN t1 ON t2.col_varchar = t1.col_varchar
JOIN t2 AS table3 ON t1.pk = table3.col_int
WHERE t1.pk IN (SELECT col_int FROM t1);
col_varchar
DROP TABLE t1,t2;
# End of test for Bug#21184091
# Bug#21139722: Assertion failed: !(used_tables() & ((table_map) 1) ...
CREATE TABLE t1(a INTEGER) engine=Sequoiadb;
CREATE TABLE t2(b INTEGER) engine=Sequoiadb;
SELECT 1
FROM (SELECT 1 IN (SELECT 1
FROM t1
WHERE (SELECT 1 FROM t2 HAVING b) NOT IN (SELECT 1 FROM t2)
)
FROM t2
) AS z;
1
DROP TABLE t1, t2;
CREATE TABLE t1(a INTEGER) engine=Sequoiadb;
SELECT (SELECT a FROM t1 AS t2
WHERE a IN (SELECT t1.a+t2.a FROM t1 AS t3))
FROM t1 AS t1;
(SELECT a FROM t1 AS t2
WHERE a IN (SELECT t1.a+t2.a FROM t1 AS t3))
DROP TABLE t1;
# End of test for Bug#21139722
SET DEFAULT_STORAGE_ENGINE=Sequoiadb;
#
# Bug#21139402 ASSERTION FAILED: LENGTH > 0 && KEYPARTS != 0, CRASH IN JOIN::OPTIMIZE_KEYUSE
#
CREATE TABLE t1 (a INT, b INT, PRIMARY KEY(a));
CREATE TABLE t2 (c INT PRIMARY KEY);
SELECT 1 FROM t1
WHERE 1 IN
(SELECT (c IS NULL) IN (SELECT a FROM t1 WHERE b)  FROM t2);
1
DROP TABLE t1,t2;
#
# Bug#21619634 ACCESS OF DEALLOCATED ITEM_OUTER_REF CAUSES CRASH: PREPARED STMT
#
create table cc (i int) engine="Sequoiadb";
insert into cc values (1);
select (select count(i) from cc as cc_alias
where (cc.i in (select cc_alias.i from cc)))
from cc group by i;
(select count(i) from cc as cc_alias
where (cc.i in (select cc_alias.i from cc)))
1
prepare stmt from
"select (select count(i) from cc as cc_alias
         where (cc.i in (select cc_alias.i from cc)))
     from cc group by i";
execute stmt;
(select count(i) from cc as cc_alias
         where (cc.i in (select cc_alias.i from cc)))
1
execute stmt;
(select count(i) from cc as cc_alias
         where (cc.i in (select cc_alias.i from cc)))
1
drop table cc;
#
# Bug #22305361: QUERY WITH MATERIALIZED TABLE RETURNS INCORRECT
#                RESULTS IN 5.6
#
CREATE TABLE t(a INT,b INT);
INSERT INTO t VALUES (1,0),(1,0),(1,0),(1,0),(1,1);
SELECT *
FROM t AS t1
WHERE t1.a IN (SELECT t2.a
FROM t AS t2
WHERE CONCAT(t2.a,'') NOT IN (SELECT t3.a
FROM t AS t3
WHERE t3.b=1));
a	b
DROP TABLE t;
set optimizer_switch=default;
