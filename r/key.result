drop table if exists t1,t2,t3;
SET SQL_WARNINGS=1;
CREATE TABLE t1 (
price int(5) DEFAULT '0' NOT NULL,
area varchar(40) DEFAULT '' NOT NULL,
type varchar(40) DEFAULT '' NOT NULL,
transityes enum('Y','N') DEFAULT 'Y' NOT NULL,
shopsyes enum('Y','N') DEFAULT 'Y' NOT NULL,
schoolsyes enum('Y','N') DEFAULT 'Y' NOT NULL,
petsyes enum('Y','N') DEFAULT 'Y' NOT NULL
#KEY price (price,area,type,transityes,shopsyes,schoolsyes,petsyes) ## Not Sure if it is a problem
);
INSERT INTO t1 VALUES (900,'Vancouver','Shared/Roomate','N','N','N','N');
INSERT INTO t1 VALUES (900,'Vancouver','Shared/Roomate','N','N','N','N');
INSERT IGNORE INTO t1 VALUES (900,'Vancouver','Shared/Roomate','','','','');
Warnings:
Warning	1265	Data truncated for column 'transityes' at row 1
Warning	1265	Data truncated for column 'shopsyes' at row 1
Warning	1265	Data truncated for column 'schoolsyes' at row 1
Warning	1265	Data truncated for column 'petsyes' at row 1
INSERT INTO t1 VALUES (900,'Vancouver','Shared/Roomate','Y','Y','Y','Y');
INSERT INTO t1 VALUES (900,'Vancouver','Shared/Roomate','Y','Y','Y','Y');
INSERT INTO t1 VALUES (900,'Vancouver','Shared/Roomate','Y','Y','Y','Y');
INSERT INTO t1 VALUES (900,'Vancouver','Shared/Roomate','Y','Y','Y','Y');
INSERT INTO t1 VALUES (900,'Vancouver','Shared/Roomate','Y','Y','Y','Y');
SELECT * FROM t1 WHERE area='Vancouver' and transityes='y' and schoolsyes='y' and ( ((type='1 Bedroom' or type='Studio/Bach') and (price<=500)) or ((type='2 Bedroom') and (price<=550)) or ((type='Shared/Roomate') and (price<=300)) or ((type='Room and Board') and (price<=500)) ) and price <= 400;
price	area	type	transityes	shopsyes	schoolsyes	petsyes
drop table t1;
CREATE TABLE t1 (
name varchar(50) DEFAULT '' NOT NULL,
author varchar(50) DEFAULT '' NOT NULL,
category decimal(10,0) DEFAULT '0' NOT NULL,
email varchar(50),
password varchar(50),
proxy varchar(50),
bitmap varchar(20),
msg varchar(255),
urlscol varchar(127),
urlhttp varchar(127),
timeout decimal(10,0),
nbcnx decimal(10,0),
creation decimal(10,0),
livinguntil decimal(10,0),
lang decimal(10,0),
type decimal(10,0),
subcat decimal(10,0),
subtype decimal(10,0),
reg char(1),
scs varchar(255),
capacity decimal(10,0),
userISP varchar(50),
CCident varchar(50) DEFAULT '' NOT NULL,
PRIMARY KEY (name,author) ## field 'category' cannot be created into index
);
INSERT INTO t1 VALUES
('patnom','patauteur',0,'p.favre@cryo-networks.fr',NULL,NULL,'#p2sndnq6ae5g1u6t','essai salut','scol://195.242.78.119:patauteur.patnom',NULL,NULL,NULL,950036174,-882087474,NULL,3,0,3,'1','Pub/patnom/futur_divers.scs',NULL,'pat','CC1');
INSERT INTO t1 VALUES
('LeNomDeMonSite','Marc',0,'m.barilley@cryo-networks.fr',NULL,NULL,NULL,NULL,'scol://195.242.78.119:Marc.LeNomDeMonSite',NULL,NULL,NULL,950560434,-881563214,NULL,3,0,3,'1','Pub/LeNomDeMonSite/domus_hibere.scs',NULL,'Marq','CC1');
select * from t1 where name='patnom' and author='patauteur' and category=0;
name	author	category	email	password	proxy	bitmap	msg	urlscol	urlhttp	timeout	nbcnx	creation	livinguntil	lang	type	subcat	subtype	reg	scs	capacity	userISP	CCident
patnom	patauteur	0	p.favre@cryo-networks.fr	NULL	NULL	#p2sndnq6ae5g1u6t	essai salut	scol://195.242.78.119:patauteur.patnom	NULL	NULL	NULL	950036174	-882087474	NULL	3	0	3	1	Pub/patnom/futur_divers.scs	NULL	pat	CC1
drop table t1;
create table t1 (a int not null unique, b int unique, c int, d int not null primary key, key(c), e int not null unique);
show keys from t1;
Table	Non_unique	Key_name	Seq_in_index	Column_name	Collation	Cardinality	Sub_part	Packed	Null	Index_type	Comment	Index_comment
t1	0	PRIMARY	1	n	n	n	n	n	n	n		
t1	0	a	1	n	n	n	n	n	n	n		
t1	0	e	1	n	n	n	n	n	n	n		
t1	0	b	1	n	n	n	n	n	n	n		
t1	1	c	1	n	n	n	n	n	n	n		
drop table t1;
DROP TABLE IF EXISTS t1;
Warnings:
Note	1051	Unknown table 'test.t1'
CREATE TABLE t1 (
c1 int,
c2 varbinary(240),
UNIQUE KEY (c1)
#  KEY (c2) ## varbinary is variable binary, binary should not be allowed to create index: SEQUOIADBMAINSTREAM:3571
) ENGINE=SequoiaDB;
INSERT INTO t1 VALUES (1,'\Z\Z\Z\Z');
INSERT INTO t1 VALUES (2,'\Z\Z\Z\Z\Z\Z');
INSERT INTO t1 VALUES (3,'\Z\Z\Z\Z');
select c1 from t1 where c2='\Z\Z\Z\Z';
c1
1
3
DELETE FROM t1 WHERE (c1 = 1);
check table t1;
Table	Op	Msg_type	Msg_text
test.t1	check	note	The storage engine for the table doesn't support check
select c1 from t1 where c2='\Z\Z\Z\Z';
c1
3
DELETE FROM t1 WHERE (c1 = 3);
check table t1;
Table	Op	Msg_type	Msg_text
test.t1	check	note	The storage engine for the table doesn't support check
select c1 from t1 where c2='\Z\Z\Z\Z';
c1
truncate table t1;
insert into t1 values(1,"aaaa"),(2,"aaab"),(3,"aaac"),(4,"aaccc");
delete from t1 where c1=3;
delete from t1 where c1=1;
delete from t1 where c1=4;
check table t1;
Table	Op	Msg_type	Msg_text
test.t1	check	note	The storage engine for the table doesn't support check
drop table t1;
create table t1 (c char(10), index (c(0)));
ERROR HY000: Key part 'c' length cannot be 0
create table t1 (c char(10), index (c,c));
ERROR 42S21: Duplicate column name 'c'
create table t1 (c1 char(10), c2 char(10), index (c1,c2,c1));
ERROR 42S21: Duplicate column name 'c1'
create table t1 (c1 char(10), c2 char(10), index (c1,c1,c2));
ERROR 42S21: Duplicate column name 'c1'
create table t1 (c1 char(10), c2 char(10), index (c2,c1,c1));
ERROR 42S21: Duplicate column name 'c1'
create table t1 (c1 char(10), c2 char(10));
alter table t1 add key (c1,c1);
ERROR 42S21: Duplicate column name 'c1'
alter table t1 add key (c2,c1,c1);
ERROR 42S21: Duplicate column name 'c1'
alter table t1 add key (c1,c2,c1);
ERROR 42S21: Duplicate column name 'c1'
alter table t1 add key (c1,c1,c2);
ERROR 42S21: Duplicate column name 'c1'
drop table t1;
create table t1 (
i1 INT NOT NULL,
i2 INT NOT NULL,
UNIQUE i1idx (i1),
UNIQUE i2idx (i2));
desc t1;
Field	Type	Null	Key	Default	Extra
i1	int(11)	NO	PRI	NULL	
i2	int(11)	NO	UNI	NULL	
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `i1` int(11) NOT NULL,
  `i2` int(11) NOT NULL,
  UNIQUE KEY `i1idx` (`i1`),
  UNIQUE KEY `i2idx` (`i2`)
) ENGINE=SEQUOIADB DEFAULT CHARSET=latin1
drop table t1;
create table t1 (
c1 int,
c2 varchar(20) not null,
primary key (c1),
key (c2(10))
) engine=sequoiadb;
insert into t1 values (1,'');
insert into t1 values (2,' \t\tTest String');
insert into t1 values (3,' \n\tTest String');
update t1 set c2 = 'New Test String' where c1 = 1;
select * from t1;
c1	c2
1	New Test String
2	 		Test String
3	 
	Test String
drop table t1;
create table t1 (a int not null primary key, b varchar(20) not null unique);
desc t1;
Field	Type	Null	Key	Default	Extra
a	int(11)	NO	PRI	NULL	
b	varchar(20)	NO	UNI	NULL	
drop table t1;
create table t1 (a int not null primary key, b int not null unique);
desc t1;
Field	Type	Null	Key	Default	Extra
a	int(11)	NO	PRI	NULL	
b	int(11)	NO	UNI	NULL	
drop table t1;
create table t1 (a int not null primary key, b varchar(20) not null, unique (b(10)));
desc t1;
Field	Type	Null	Key	Default	Extra
a	int(11)	NO	PRI	NULL	
b	varchar(20)	NO	UNI	NULL	
drop table t1;
create table t1 (a int not null primary key, b varchar(20) not null, c varchar(20) not null, unique(b(10),c(10)));
desc t1;
Field	Type	Null	Key	Default	Extra
a	int(11)	NO	PRI	NULL	
b	varchar(20)	NO	MUL	NULL	
c	varchar(20)	NO		NULL	
drop table t1;
create table t1(a int not null, key aa(a), 
b char(10) not null, unique key bb(b(1)), 
c char(4) not null, unique key cc(c));
desc t1;
Field	Type	Null	Key	Default	Extra
a	int(11)	NO	MUL	NULL	
b	char(10)	NO	UNI	NULL	
c	char(4)	NO	PRI	NULL	
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `a` int(11) NOT NULL,
  `b` char(10) NOT NULL,
  `c` char(4) NOT NULL,
  UNIQUE KEY `cc` (`c`),
  UNIQUE KEY `bb` (`b`(1)),
  KEY `aa` (`a`)
) ENGINE=SEQUOIADB DEFAULT CHARSET=latin1
drop table t1;
create table t1(a int not null, key aa(a), 
b char(10) not null, unique key bb(b(1)),
c char(4) not null);
desc t1;
Field	Type	Null	Key	Default	Extra
a	int(11)	NO	MUL	NULL	
b	char(10)	NO	UNI	NULL	
c	char(4)	NO		NULL	
alter table t1 add unique key cc(c);
desc t1;
Field	Type	Null	Key	Default	Extra
a	int(11)	NO	MUL	NULL	
b	char(10)	NO	UNI	NULL	
c	char(4)	NO	PRI	NULL	
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `a` int(11) NOT NULL,
  `b` char(10) NOT NULL,
  `c` char(4) NOT NULL,
  UNIQUE KEY `cc` (`c`),
  UNIQUE KEY `bb` (`b`(1)),
  KEY `aa` (`a`)
) ENGINE=SEQUOIADB DEFAULT CHARSET=latin1
drop table t1;
End of 5.0 tests
CREATE TABLE t1 (a INT, b INT, INDEX (a,b)) engine=sequoiadb;
INSERT INTO t1 (a, b)
VALUES
(1,1), (1,2), (1,3), (1,4), (1,5),
(2,2), (2,3), (2,1), (3,1), (4,1), (4,2), (4,3), (4,4), (4,5), (4,6),
(5,1), (5,2), (5,3), (5,4), (5,5);
EXPLAIN SELECT 1 FROM t1 AS t1_outer WHERE 
(SELECT max(b) FROM t1 GROUP BY a HAVING a < 2) > 12;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	PRIMARY	n	n	n	n	n	n	n	n	n	n
2	SUBQUERY	n	n	n	n	n	n	n	n	n	n
Warnings:
Note	1003	n
SELECT 1 as RES FROM t1 AS t1_outer WHERE 
(SELECT max(b) FROM t1 GROUP BY a HAVING a < 2) > 12;
RES
DROP TABLE t1;
#
# Bug#18144: Cost with FORCE/USE index seems incorrect in some cases.
#
# We are interested in showing that the cost for the last plan is higher
# than for the preceding two plans.
#
CREATE TABLE t1( a INT, b INT, KEY( a ) ) engine=sequoiadb;
INSERT INTO t1 values (1, 2), (1, 3), (2, 3), (2, 4), (3, 4), (3, 5);
EXPLAIN SELECT a, SUM( b ) FROM t1 GROUP BY a;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	NULL	n	n	n	n	n	n	n	n
Warnings:
Note	1003	/* select#1 */ select `test`.`t1`.`a` AS `a`,sum(`test`.`t1`.`b`) AS `SUM( b )` from `test`.`t1` group by `test`.`t1`.`a`
EXPLAIN SELECT a, SUM( b ) FROM t1 USE INDEX( a ) GROUP BY a;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	NULL	n	n	n	n	n	n	n	n
Warnings:
Note	1003	/* select#1 */ select `test`.`t1`.`a` AS `a`,sum(`test`.`t1`.`b`) AS `SUM( b )` from `test`.`t1` USE INDEX (`a`) group by `test`.`t1`.`a`
EXPLAIN SELECT a, SUM( b ) FROM t1 FORCE INDEX( a ) GROUP BY a;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	NULL	n	n	n	n	n	n	n	n
Warnings:
Note	1003	/* select#1 */ select `test`.`t1`.`a` AS `a`,sum(`test`.`t1`.`b`) AS `SUM( b )` from `test`.`t1` FORCE INDEX (`a`) group by `test`.`t1`.`a`
DROP TABLE t1;
